[ { "title": "台北人每天上下班都會花多少時間跟費用通勤呢？", "url": "/posts/how-much-commute-time-taipei/", "categories": "生活", "tags": "remote work", "date": "2022-08-22 16:50:00 +0800", "snippet": "通勤是辦公室及學校生活必須的部分，太長的通勤時間對生活滿意度真的是一大影響，來看看在台北市工作的人們，每天都會花多少時間跟金錢在通勤上吧！通勤時間統計以下為690名受訪者通勤時間的分佈，其中以16-30分鐘佔比最多，佔了40.8%，其次為15分鐘以內。平均而言，一趟所需的通勤時間約為29分鐘。通勤費用統計以下為690名受訪者通勤費用的分佈，其中一趟所需花費的通勤交通費用在20元以下佔比最多，為36%，其次是21-40元。平均而言，一趟所需的通勤費用約為42.6元。總結每天來回一趟去上班上學，平均需要花58分鐘及85.2元，如果可以遠端工作的話，這些就都省下來了！省下來的時間，可以做任何自己想做的事，煮個健康的早餐晚餐、運動或是發展其他的興趣，這就是遠端工作最顯而易見的好處了～關於遠端工作其他更多的好處，之前也有些過一篇分享，有興趣的朋友可以看看: 遠端工作有哪些好處？資料來源 台北市資料太平臺: 107 年第 1 次(5 月)臺北市交通民意調查報告" }, { "title": "五種從高處俯瞰皇后鎮周遭景色的方法", "url": "/posts/new-zealand-queenstown-overlook/", "categories": "生活", "tags": "New Zealand", "date": "2022-08-18 17:00:00 +0800", "snippet": "冬天從皇后鎮高處往下看，有藍天、白雪覆蓋的山頭、咖啡色及綠色植被、湖泊及城鎮，可以將所有的美景盡攬眼底，真的是非常壯闊。今天將介紹幾種方法，讓你從高處俯瞰整個皇后鎮，依序由高度高的到高度低的是: Skydive The Remarkables Ski Area Skyline纜車 飛行傘(Paragliding) Queenstown Hill TrackSkydive從15000到12000英尺的地方降落，是最直接且暴力的方法！乘坐降落傘的飛行時間大約為五分鐘，前面是60秒的自由落體，所以可以欣賞美景的時間有限，會害怕的人或是想更悠閒地欣賞風景的人，可以再考慮考慮後面的方法們。The Remarkables Ski AreaThe Remarkables雪場，坐右邊的纜車往上，下纜車後往右前方山上爬行一小段(跟著腳印走就對了)登上山頂後準備看美景拉～但畢竟這裡是雪場，雖然離鎮上只有約一小時的車程，但雪季的時候，八點之後才出門的話，停車場可能就沒位置了。最後！坐纜車上來就要滑雪下去～有藍線跟黑線，新手雪板會落葉飄的話，還是可以下得去的。Skyline搭乘纜車上山，應該是最輕鬆的方法了，上去之後有觀景台，拍出皇后鎮明信片的時間來拉～這邊也有溜溜車可以玩，可以耗掉一些等待夜景出現的時間，或者是在餐廳裡喝杯飲料吃個晚餐都是可以。預先訂位的話可以前往這個網站skyline訂票網站，纜車票、餐廳及溜溜車都可以一次預訂，(要玩溜溜車的話，千萬不要只訂一次，一定不過癮！)。溜溜車夜景飛行傘(Paragliding)一樣約從Skyline的高度開始滑行，由教練帶著你滑翔到鎮上的學校，價格約為200-250紐幣，想體驗飛行傘的朋友可以試試，但要看美景的話，還是待在Skyline上的觀景台或餐廳比較悠閒，時間也比較多讓你可以好好拍拍照～Queenstown Hill Track入口處就在鎮上不遠的地方，由以下入口處進入就慢慢健行就對拉～大約走個一個半小時的路程就可以準備欣賞美景拍照拉～雖然也是附近的一個小至高處，可惜的是看不到皇后鎮城鎮本身，但機場方向的城鎮跟附近山湖景色也是非常棒的了！總結皇后鎮依著湖畔建起的小鎮，依山傍水的美景真的是美不勝收，有各種方式讓你去欣賞它，不論是極限的還是悠閒的～數位遊牧流浪的第一站來到了紐西蘭皇后鎮，如果想即時知道我流浪到哪，或是在做什麼的話，歡迎追蹤我的Instagram: mumu.life.lab。掰掰～👋" }, { "title": "房間DIY改造: 工作區域篇，我需要一張升降桌嗎？", "url": "/posts/room-makeover-working-area/", "categories": "生活", "tags": "life style, room makeover", "date": "2022-07-28 18:55:00 +0800", "snippet": "因為開啟了全遠端工作模式的關係，不是在環遊世界工作，就是在家工作。退掉了台北租屋處回到老家之後，有了改造房間的念頭，這篇文章要簡單分享改造房間中關於工作區域的部分！(文後有購物清單唷)久坐怎麼辦？身為軟體工程師，需要長時間久坐，如果姿勢又不良，蠻容易造成腰部下背部的不適，這邊先簡單地給大家一個關鍵字: 下交叉症候群。那該怎麼辦呢？就是要時常起來動一動～ 為了讓自己不要忘記時常站起來一下，我是用以下幾個方法: 裝水的杯子不要太大，才需要常起身去裝水喝。 多喝水才要常常去上廁所。 番茄鐘工作法: 專注一段時間之後要休息。 站坐交替工作！站坐交替工作！今天要討論的就是以上第四點，站坐交替，當時我第一個想法是買一張升降桌，但後來想想，決定使用另一個方法，簡單省錢，就是買兩張桌子！主要原因就是我工作需求就只有一台筆電的關係，所以可以非常容易地變換工作位置，加上錢錢賺得不夠多，所以想省一下囉～升降桌 優點: 高度可以任意調整，依照每個人的身高，座椅的高度，調到最適合的高度。 缺點: 價格較高，IKEA最便宜的大約落在6000左右，一般市面上的約12000上下。 高腳桌搭配一般桌子 優點: 便宜～ 缺點: 高度設定就是兩種！另外如果你工作會需要用到一堆東西，無法在兩張桌子間搬來搬去的話也較不適用，另外對空間的需求也會較高。 購物清單 購買項目 價格 高腳吧檯桌 1796 IKEA組合書桌: LAGKAPTEN/ADILS 1399 total 3195 總結沒有最好的，只有最適合自己的，大家根據自己的情況來做選擇，如果錢不是你考慮的點的話，那就直接買升降桌吧！😂對這次改造過程其他部分有興趣的朋友們，可以看之前分別寫的文章: 房間DIY改造: 老舊家具及櫃體篇 房間DIY改造: 大門篇，如何用剩的乳膠漆來改造大門 房間DIY改造: 牆壁篇(油漆、開關面板、變電箱遮掩) 房間DIY改造: 地板篇如果想更即時的看到改造過程的，也歡迎追蹤我的Instagram: mumu.life.lab。希望以上的內容對你有幫助！掰掰～👋" }, { "title": "想要簡單卻高效的生活嗎？ 五個有關簡化生活，時間管理的法則", "url": "/posts/five-time-management-laws/", "categories": "生活", "tags": "life style, psychology, productivity", "date": "2022-07-26 23:56:00 +0800", "snippet": " You can do anything, but you can’t do everything.每天被一大堆事務包圍，覺得喘不過氣忙不過來嗎？或許你可以試試簡化你的生活，今天要介紹一些前人所觀察歸納出的一些法則及心理現象，將其應用在生活中，幫助我們簡單生活卻不簡單。帕雷托法則(Pareto principle、80/20法則) 80% of consequences come from 20% of the causes.80%成果來自20%的原因，在許多地方都能用上這個法則，比如全世界的財富分配，大部分的財富集中在少數有錢人手中;公司的大部分的利潤來自與少部分的客戶或產品。所以我們能做什麼呢？就是要找到那最重要的20%的事情，就能省下80%的時間與精力，達到足夠滿足的結果，不去追求完美，將擁有更多的資源能去從事其他的工作、興趣及夢想。這也是簡單生活的核心，在生活各個面向上都只將心力首先花在最重要的事務上，不管是工作項目、客戶、人際關係、擁有的物質、從事的興趣、接收的資訊等等，你可以做任何事情，但不能全部的事情都做。帕金森定理(Parkinson’s Law) Work will expand to fill the time allotted for its completion.我們有多少的時間完成一項任務，我們就會花多少的時間完成，這就是帕金森定律。當我們給一項任務一天的時間來完成時，我們就會花到一天；如果你有急事，2個小時後必須要離開，要那你就會神奇地在2個小時內完成工作。所以我們能做什麼呢？可以為你的任務設定合理的時間及截止日期，就像我之前在掌握這3個原則，打造出最適合自己的代辦清單系統這篇文章中提到的，待辦清單中的事項必須要有截止日期，否則你就是拖拖拖，拖到最後一刻可以完成的他的時候才去完成。Carlson’s Law Interrupted work will be less effective and will take more time than if completed in a continuous manner.如果一件任務被中斷多次，它所花的時間講比起一次做完更多。這本書: 《Deep Work深度工作力：淺薄時代，個人成功的關鍵能力》就是專門再講這一個主題的書，有興趣的朋友可以去找來看看～所以我們能做什麼呢？去除所有可能會干擾你的專注時間的事物，利用意志力來限制自己是不明智的決定，不如打造一個去除分心事務的環境，比如把手機放到離工作區域遠一點的地方，在家規劃出一個專門用來工作的區域等等，或是使用像是番茄鐘工作法來幫助自己。最近我在家或到處遊牧工作的時候，除了咖啡廳，也會選擇去圖書館工作，把自己沈浸到一個無法分心的環境，順便重溫以前當學生的感覺，也能看看學生妹子😎Illich’s Law(Law of diminishing returns、邊際效用遞減) Productivity decreases after a certain period of continuous work.生產力是會隨著工作的時間跟著下降的。所以我們能做什麼呢？休息！我們的能量有限，不管是身體、情緒、心理還是精神，都應該有個使用及恢復的週期，Work hard, Play hard！延伸閱讀: [讀書筆記] 用對能量，你就不會累Laborit’s Law(The Law of the Least Effort、最小努力原則)人會採取可能耗費最少勞動的行為，來完成特定任務：即，將必要之努力最小化。這就是我們的本能，節省能量來完成任務，以提升我們的生存機率，並且會傾向從事一些會獲得立即滿足的行動，比如說吃垃圾食物(立即取得高熱量)、滑社群應用程式(立即得到一些社交互動或資訊)、看劇耍廢(立即獲得感官娛樂刺激)。所以我們能做什麼呢？每天先從最困難最重要的事開始，並且在完成任務後，給自己立即的獎勵，這也是在《原子習慣》一書中所提到的養成習慣四步驟框架中的獎賞部分。延伸閱讀: [讀書筆記] 原子習慣: 細微改變帶來巨大成就的實證法則結論前兩個法則都跟不要太多有關，做的少但卻不一定成就的少，知道自己的目標，找出最重要的事先做，專注並適當休息，養成習慣，如此一來不只能更高效也能減輕壓力。簡單生活，不簡單，首要重點是知道自己的目標，找出最重要的事，祝大家都能活出自己想要的生活！掰掰～👋" }, { "title": "房間DIY改造: 地板篇", "url": "/posts/room-makeover-floor/", "categories": "生活", "tags": "life style, room makeover", "date": "2022-07-22 16:00:00 +0800", "snippet": "房間最大部分的面積不是牆壁就是地板了！今天要分享我在改造房間的過程中，針對地板這一部分怎麼做，首先就來看看成果吧！地板種類這邊只討論便於DIY，也相對比較便宜的產品: 免膠地板及卡扣地板，價格都大約落在2800～3600/坪。免膠地板防水防潮且不太熱脹冷縮，施工超級簡單，鋪上去就好了，適合在租屋處使用，要離開時還可以拔起來帶走。缺點: 家具太重，質地沒那麼硬的地板還是會有壓痕，另外並沒有像廣告說的那麼防滑，安裝的時候還是要鋪好鋪滿， 整個填滿地板面積，卡住才不會滑動，不然就會出現這支影片說的問題: 90s免膠科技地板 ｜黑特｜缺點盤點。產品: 崔勾地板 90s免膠科技地板 特力+: 免膠地板卡扣地板基本上一樣是塑膠製品，優點都是可以防水防潮且不會熱脹冷縮，SPC的材質有參入石粉，所以質地較硬，也比較冰涼。缺點: 但比起免膠地板，施工對地面要求較高，需要平整，否則完工後踩起來會有聲音。產品: 90s卡扣地板 特力+: 卡扣地板施工過程這次選用的免膠地板，為什麼？因為我懶！就選最方便的😂，還有老房子地板不是那麼平整，減少些施工的難度。拼法拼法有許多種，基本我是採用亂紋拼法，裁下來剩多長就直接再下一行使用，節省材料。像下圖就是簡單擺一下，全部對齊的拼法，可以看到交接處就會有一條明顯的痕跡。總結成果還算滿意～ 完工時間2022-07-21，如果未來有什麼災情，再上來更新紀錄跟大家分享。房間地板面積約5坪，總共花費15000元及3個多小時的時間！之前有針對老舊櫃體、大門及牆壁的部分做過改造，有興趣的朋友可以看我之前寫過的文章～ 房間DIY改造: 老舊家具及櫃體篇 房間DIY改造: 大門篇，如何用剩的乳膠漆來改造大門 房間DIY改造: 牆壁篇(油漆、開關面板、變電箱遮掩)之後就剩下傢俱的添購(床、工作桌椅)，如果想更即時的看到改造過程的，也歡迎追蹤我的Instagram: mumu.life.lab。希望以上的內容對你有幫助！掰掰～👋" }, { "title": "柴嘉尼效應: 如何減輕心理負擔、更高效地完成工作？", "url": "/posts/productivity-zeigarnik-effect/", "categories": "生活", "tags": "life style, psychology, productivity", "date": "2022-07-19 23:00:00 +0800", "snippet": "不知道大家有沒有這樣的經驗？在絡繹不絕的早餐店裡，老闆娘總是記得還有哪些餐點還未送到客人手裡，不過一旦那些餐點已經上過了，卻好像就立刻忘記了。柴嘉尼效應(Zeigarnik Effect)我們對未完成的事情會比起已完成的事情更容易記住，這就是柴嘉尼效應。布魯瑪.柴嘉尼(Bluma Zeigarnik)，二十世紀初俄國的一位心理學家，也是在某天下午觀察咖啡廳的服務生時，有了這個假設，換句話說，未完成的工作比起完成的工作，佔了我們更多的腦容量。實驗柴嘉尼找了一群小孩來參與實驗，讓他們去執行一共20個小任務，包含拼圖、捏黏土等等，有些任務完成了有些沒有完成，最後要求這些小孩回想做了哪些任務，結果發現孩子們記得的未完成任務的數量，是已完成項目的兩倍。應用現代人越來越多事務，工作上收不完的電子郵件、回不完的訊息、接踵而來的任務，娛樂上看不完的影集跟電影，玩不完的景點，更容易會有越來越多未完成的事懸在心上。要做的事情越來越多，心心念念擔心著未完成的事，害怕自己會忘記漏掉什麼，結果睡不著甚至做惡夢，這樣焦慮的經驗不知道大家有沒有體驗過？寫下來該怎麼辦呢？其實有一招簡單的方法，就是把那些事務寫下來！，一旦記下來了，就可以暫時不去管他們了，就像我之前寫過的文章: 掌握這3個原則，打造出最適合自己的代辦清單系統裡有提到的，待辦清單能夠幫助我們減輕壓力，將所有尚未完成或必須要做但還沒辦法馬上開始做的事都寫下來，清空你的大腦。所以不管你是工作到一半，有有其他工作項目進來，那就寫下來; 通勤到一半，想到下班之後要去辦一些事情，一樣寫下來;靈機一動來了個點子，也是寫下來，然後就可以回去做你原本正在的做的事情，可能是專心工作、跟朋友聚會玩樂或者就單純是在放空。有人也會利用一天睡前的時間將今天未完成的事項寫下來，做為明天的待辦事項，雖然事情一樣尚未完成，但透過寫下來這個動作，或許就能稍微幫助你減輕壓力。祝大家每天晚上都能睡個好覺😴，掰掰～👋" }, { "title": "我是如何跟我老闆談要遠端工作的？", "url": "/posts/how-i-tell-my-boss-i-want-to-work-remotely/", "categories": "生活", "tags": "remote work, life style, digital nomad", "date": "2022-07-18 22:53:00 +0800", "snippet": "隨著科技越來越發達，有越來越多職務可以只透過網路就完成大部分的工作，到辦公室上班不在是必須。如果你很幸運地工作內容允許，而且你又想遠端工作的話，那最大的阻礙大概就是老闆的心態了，這篇文章將分享，我是如何跟我的老闆談我要遠端工作的。創造價值如果一個談判或是決策，只能對單方面有利，不是你死就是我活，一方做出讓步讓另一方得利，那這樣的零和遊戲我想很難成功，因為誰也不想當犧牲的那一個。所以第一個步驟就是創造價值，這個遠距工作模式的轉變，會創造出哪些價值，可以由雇主跟員工一起來分配享受這些這些價值，也就是除了員工想在家裡爽，或是去環遊世界之外，雇主也必須從中得到好處才行。如果你沒那麼想遠端工作，或許可以看看我之前寫過的文章，來被我推坑吧～ 遠端工作有哪些好處？ [讀書筆記] 一週工作4小時: 擺脫朝九晚五的窮忙生活，晉身「新富族」！對老闆有哪些好處首先如果你是員工，以雇主的角度來看遠端工作這件事，說之以理，告訴你的老闆，如果你們合作的工作模式是遠距的話，可能可以有哪些好處呢？ 節省開銷: 一旦遠距就可以省下辦公室，可能不一定完全不用，但就可以小一點，地點或許也不用那麼市中心，水電費也能省下不少。 生產力更高: 如果你離開辦公室可以更專心，產出更高，那就證明給你的老闆看！一開始或許可以要求每週幾天的遠端工作就好，在那幾天當中證明給雇主看生產力是可以更好的。 吸納或留住人才: 一但遠端工作，全世界的人才都可以為你所用，並且原本的好員工也不用因為非工作的因素而要離職，比如說回鄉照顧老母、跟配偶搬到別的城市生活等等… 之前有寫過一篇這個主題的分享，有興趣的朋友可以參考以下這篇文章: 遠端工作模式對於雇主有哪些好處？提出計畫有時候雇主面對未知的事物也是會害怕，擔心的不外乎就是怎麼知道員工在家有沒有認真工作呢？找不到人怎麼辦呢？此時我們可以提出一些計畫，主要目的就是讓老闆不要那麼擔心: 給老闆工作成果的預期: 主動溝通報告，讓他事先有個一些預期 給老闆找得到你的預期: 都已經遠距工作了，就是要擁有自己安排何時何地工作的自由，不可能隨時隨地都待命著，那與其當老闆要找你時才找不到，不如定下一段時間，比如說保證每天早上的10點到12點是一定找得到你的，其餘的時間就可以自己安排，去玩🤪或者是擁有一大段不被打擾可以專注工作的時間。 漸進式實驗: 一開始或許可以要求每週幾天的遠端工作就好，如果有任何需要，或真的覺得不行，隨時可以回辦公室。一旦成功得到幾天的遠距工作時間，就要努力好好證明給老闆看是可行的！ 總結其實一切的基礎都是個信任問題，平時好好表現，我想在你提出需求的時候，老闆應該是會仔細考慮的。如果還沒信任就趕快累積，透過小型的遠距工作實驗展現可行性，甚至就算老闆不同意遠距工作時，在辦公室的時候也能主動匯報工作進度，建立你自律主動的形象。最後，遠距工作模式可能不只是你的問題而已，而是整間公司的政策，在平時跟同事的合作上，就算是在辦公室，也不要太依賴同步的溝通，真的沒那麼重要緊急的事，多練習使用非同步溝通，能給彼此都多專注工作的時間，以及為遠距工作的轉型無縫接軌！祝大家在前往自己理想生活型態的道路上在進一步！掰掰～👋" }, { "title": "三個數位遊牧可以尋找住宿的方法及各平台", "url": "/posts/remote-working-where-to-find-accommodation/", "categories": "生活", "tags": "life style, remote work, digital nomad", "date": "2022-07-12 21:20:00 +0800", "snippet": "作為一名數位遊牧者，找住的地方一定是我們會常常遇到的問題，每當要移動到下一個地點時，就必須再做一次這個事情。幸運的是，隨著遠距工作越來越盛行，也有越來越多的服務提供住宿選項給你，今天將分享以下幾種尋找住宿的方法以及相對應的平台網站，花費依次由高到低: 短期住宿 Coliving space House sitting短期住宿租房子通常會有一個一年或半年的租約，但身為數位遊牧，可能沒想在一個地方待那麼久，或是有簽證的限制，此時短期住宿會是一個方便的選擇，最簡單的方式就是用各大訂房網站，找飯店。現在也有越來越多的平台，專門提供這樣的物件給遠距工作者，除了住宿外，特別幫你設想到遠距工作者所需要工作環境。優點: 簡單方便選擇多，上網瀏覽一根手指頭搞定，奢華還是簡易根據自己的缺點: 蠻多物件都可以睡到兩三四個人，如果你是邊緣人，只有自己一個人去的話， 除非你真的很不缺錢，不然一個月的租金也是蠻可觀的，如果有伴的，租個完整房原來share真的是蠻不錯的， 如果找不到分母，有缺人的朋友，也可以聯絡我看看唷！😂 Anyplace AirbnbColiving spaceColiving space也常稱為share house，就是會有一起使用公共區域，像是客廳、廚房、工作的空間等等，自己的房間可能跟其他人共用也可能有自己一間，就看你荷包夠不夠深。優點: 住在coliving space最大的好處就是會有室友，能夠認識來自世界各地各行各業的人，一起工作生活一起玩。缺點: 自己隱私的空間略少，如果你比較喜歡有多一點自己的空間的人，工作之餘不想太多社交的，可能就需要找有自己一間房間的，但你去洗澡、廁所、用廚房還是會遇到人拉😄有些平台甚至是有特定的社群，像是遠距工作社群、衝浪社群！更多的平台及房源可以在google上搜尋 coliving space + 地點。 coworksurf.com coliving.com outside.coHouse sitting最省的方式就是House sitting拉～ sitting也就是照顧的意思，幫屋主完成一些任務，通常是照顧寵物或是植物，就可以換到免費的住宿。優點: 免費！經濟面比較有考量的朋友可以試試，真正落實遊牧民族逐水草而居的生活， 逐免費住宿而居😂，畢竟住宿應該是佔遊牧生活開銷上最大的一筆了。缺點: 因為任務通常都是每天要做的，所以每天就只能待在住宿地點附近，沒有辦法跑太遠～ 有些雇主可能允許出去住個一晚，但基本上，缺點就是會被綁在同一個地方，附近可能不一定有你想去的地方之類的。 TrustedHousesitters Nomador HouseCarers MindMyHouse HouseSitMatch祝大家在追逐自己理想的生活上一路順遂～如果想更即時地看我數位遊牧流浪去哪，或是不想看這麼多字，想看精簡點的圖文表達的話，也歡迎追蹤我的Instagram: mumu.life.lab。掰掰～👋" }, { "title": "房間DIY改造: 牆壁篇(油漆、開關面板、變電箱遮掩)", "url": "/posts/room-makeover-wall/", "categories": "生活", "tags": "life style, room makeover", "date": "2022-07-11 00:18:00 +0800", "snippet": "今天要分享我在改造房間的過程中，針對牆壁這一部分做了些什麼，首先就來看看成果吧！要改善的點從Before的照片中可以看到，牆壁的顏色不均、二十幾年的海報(我妹貼的)、醜醜的變電箱及管線、黃黃的開關面板及月曆貼起來的窗戶😂，所以這次牆壁改造的點，除了窗簾直接請人家做之後，其他的有: 牆壁重新粉刷 開關面板安裝 變電箱及線路裝飾油漆粉刷廠牌及顏色我使用的是得利乳膠漆1501白，以及00NN 62/000的電腦調色。如果大家不想要房間那麼無聊都是白色，都要不知道要如何配色時，在這邊提供幾個原則給跟我一樣不是美學專業的人們: 顏色不要太多種 中性色或低彩度顏色不要太多種我想大家都知道，但如果連要選兩三個顏色來配都不知道怎麼選怎麼辦，我推薦使用中性色，也就是黑白灰，完全沒有出錯的可能😂。另外也可以使用低彩度(飽和度)的顏色，就算真的選得不好，整個房間也會有種粉粉的感覺，也就是莫蘭迪色的原理。而得利的電腦調色色號一共有三個組成: 色相、明度跟彩度，最後面的三個數字就是彩度，大家就可以挑選最後三個數字比較小的顏色囉～想更多了解得利油漆色號的意義的，推薦看看這部影片油漆小妹線上聊色卡，顏色該怎麼挑選?。開關面板安裝開關面板老舊發黃，按鍵也不好按，就可以考慮換掉～如果害怕自己接線的話，可以請水電工來做，工錢也是一個幾十塊而已。如果想自己來，推薦宅水電的教學影片，開關有分雙切單切，單切就是一個開關控制一個電路，雙切是兩個開關控制一個電路，就比如說門口跟床頭的開關都可以控制同一個大燈，買的時候需要注意一下是買到雙切還是單切，雙切的開關在單切電路中還是可以使用，但如果你買到單切開關，就無法在你家的雙切電路中使用囉～詳細的施工過程可以參考網路上，有需多的資料可以去學習，記得施工的時候把總開關關掉比較安全！變電箱及線路遮醜選擇使用掛畫來遮擋，上蝦皮就有許多的選擇，背面我是用藍丁膠把畫黏在牆壁上，照片上這四幅畫含運費總共花了我1186元。總結成果還算滿意～這次總共購買的清單如下: 得利乳膠漆1501白(3.75公升): 1000元 00NN 62/000(1公升): 380元 四幅掛畫: 1186元 三個國際牌開關面板: 603元總共～～ 3169元！另外還有針對老舊櫃體、大門及牆壁的部分做過改造，有興趣的朋友可以看我之前寫過的文章～ 房間DIY改造: 老舊家具及櫃體篇 房間DIY改造: 大門篇，如何用剩的乳膠漆來改造大門 房間DIY改造: 地板篇之後就剩下改造地板、及新傢俱的添購(床、工作桌椅)，如果想更即時的看到改造過程的，也歡迎追蹤我的Instagram: mumu.life.lab。希望以上的內容對你有幫助！掰掰～👋" }, { "title": "[讀書筆記] 少才是力量: 簡單高效6大原則", "url": "/posts/book-note-the-power-of-less/", "categories": "讀書筆記", "tags": "books, life style, productivity", "date": "2022-07-09 00:48:00 +0800", "snippet": "在現在這個時代裡，我們被太多的資訊、選擇及任務轟炸，許多人都想在每天24小時的時間裡，完成更多的事，各種時間管理的方法層出不窮，不過這本書卻是要大家簡化生活，作者要跟大家分享如何做更少的事，卻可以成就更多！作者是zenhabits.net網站的創辦人，在幾年裡，作者每次只專注一個目標，而不是一心多用，並且用這個方法完成了以下的目標，並將過程記錄在部落格中: 每天慢跑 健康飲食 做事更有條理、更高效 接受訓練，跑兩次馬拉松 做兩份工作，收入翻一倍 每天早起 成為素食主義者 參加兩次鐵人三項全能比賽 成功經營部落格「禪習慣」 還清所有債務 存下第一筆應急基金 簡化日常生活 清理家中雜物 減重18公斤 撰寫並出版兩版暢銷電子書 完成小說初稿 辭掉工作、創業 成功經營第二個部落格「寫以致用」 出版這本書在做以上這些事的同時，還養育著6個孩子，作者跟每個人一樣一天只有24小時，為何能做到這麼多事呢？有人可能過了好幾年想完成上面一件事都無疾而終，重點就是簡化生活，自我設限，抓住重點！六大原則作者在本書中提出以下六大原則，幫助你大幅提高工作效率，同時簡化生活，並且告訴大家可以馬上開始採取的行動！ 自我設限 抓住重點 化繁為簡 集中精神 養成習慣 小處著手自我設限 You can do anything but you can’t do everything.信箱裡的電子郵件太多？就給自己設個限，每天只能看兩次，每次只能回五封，你就會提高效率，只發最重要的郵件。常常買了一大堆不需要或不想要的東西嗎，如果先設個預算上限，你就只會買最迫切需要的東西。待辦事項清單裡被塞滿了一串長長的任務，結果完成的卻少之又少，不如為清單數量設定一個上限，集中精力完成，我自己也有將之運用在自己的待辦清單系統上，對於這個議題有興趣的朋友，可以看看我之前寫的文章: 掌握這3個原則，打造出最適合自己的代辦清單系統 如何使用Notion打造Kanban based的待辦清單為什麼要設限 能夠把事情簡化，生活更易於掌控，壓力也會比較小。 更加專注自身，找出最重要的事，集中精力完成少量任務，幫助你實現目標。我們可以怎麼做呢首先可以先問問自己這幾個問題: 生活裡的哪些領域壓的我喘不過氣？ 我想怎麼簡化他們？ 除了需要完成的任務，我需不需要限制自己擁有的物品、接收的資訊、承擔的責任？ 設定一個限制，執行一段時間後在檢視看看這個限制需不需要做調整。抓住重點及化繁為簡在簡化生活、刪減項目、限制資訊、減少承諾、清理雜物之前，你必須要先知道什麼東西對你是最重要的。一旦清楚了之後，將不重要的東西刪去就變得簡單。我們可以怎麼做呢首先可以先問問自己這幾個問題: 我的價值觀是什麼？ 我的目標是什麼？ 我對什麼有熱情？ 哪些任務能帶來最大或長遠的回報？ 是需要還是想要？集中精神專注是提高效率的最佳工具。就像在《Deep Work深度工作力》一書中講到的，當某項任務被完全中斷的時候，人得花超過20分鐘才能完全回到之前的狀態，如果你頻繁地在工作之間切換時，就會破壞深度工作的執行，降低效率。專注在「唯一任務」，強力建議一次只做一件事，有助於保持心理健康，提高工作效率。我們可以怎麼做呢 每天早上起床的第一件事，就是做自心中的首要任務。 做一件任務時，儘量排除外界的干擾。 如果有別的任務插進來，將他們紀錄或寫下來，然後繼續回來工作。養成習慣有許多書籍是在講習慣的重要、機制以及如何培養一個好習慣，像是為什麼我們這樣生活，那樣工作？，原子習慣，我們可以怎麼做呢 選擇一種習慣，對！就是只選一個！ 寫下計畫，公開目標 每天彙報進度 慶祝新習慣養成～🎉小處著手(start small)讓一個習慣更容易持之以恆的方式就是先從小目標開始。比如你想減重，與其在頭一個禮拜上了五天的健身房，每天三餐都自己準備健康低熱量的飲食，然後做了一兩個禮拜就放棄，那還不如只要求自己從每天多走5分鐘的路，每週少吃幾餐宵夜，少喝幾杯飲料開始，持續一段較長的時間。以下是各個領域的一些例子: 運動: 每天運動5-10分鐘，而不是60分鐘 早起: 提早15分鐘起床，而不是2小時 健康飲食: 先進行細微調整，而不是徹底改變飲食 清理雜物: 先整理一個抽屜，而不是試圖一口氣把整個家或辦公室清理乾淨總結少就是力量，簡化生活，既可以減輕壓力，卻又不會讓你達成的事變少，重點就是要決定優先順序，當有一大堆事要做時，往往會因為太過混亂而停滯不前，集中精力，一次只面對一項任務時，效率可能會大幅提升。作者用自己親身實驗，證明每次只針對少量的目標去進行，達成率可以更高。祝大家能順利地在朝著自己目標前進～掰掰～👋" }, { "title": "淺談各種資料庫cache策略: cache aside、read through、write through、write back", "url": "/posts/databse-chache-strategies/", "categories": "Web Development", "tags": "system design, database", "date": "2022-06-25 23:54:00 +0800", "snippet": "資料庫的快取策略那麼多種: cache aside、read through、write through、write back，常常哪個是哪個也分不清楚、記不起來，今天將分享這些策略背後的內功心法，讓大家不用在為了記不起這些招式的名稱而傷腦筋。什麼是資料庫快取(database cache)?快取是一種策略，用來增進你的應用程式及資料庫的效能，作法是將常使用的資料放在具有更快存取速度的的記憶體中(in memory)，而達成這樣的目的的策略又有好多種: cache aside read through write through write back有沒有系統性的方法可以歸納這些策略，各自的優缺點即適用的情況又是為何？讓我們接著看下去！Replication其中最核心的關鍵就是: cahce就是一種replication，因為資料一部分放在資料庫中，而另一個放在快取，這樣就是一種replication，在分散式系統中，要做replication就只要問兩個問題: 誰是Master？誰是Slave？ 複製的過程是同步的還是非同步的？之前有寫過一篇關於replication的文章: [System Design] 淺談Database Replication，有何優缺點、做法及何處可見?，有興趣的朋友可以再去看看～Master or Slave首先，我們先定義幾個名詞，master就是接受資料寫入修改的最一開始的節點，而slave就是將master的改變複製一份過來存放的地方。換句話説，資料要寫入，就是寫到master，然後會在複製一份到slave。Synchronous or Asynchronous replication從master複製到slave間的過程，會有一個時間差，同步及非同步的複製差別在於有沒有等到資料確定被複製到了slave才會回傳寫入成功。 synchronous: 當資料寫入到master時，唯有等到他確定被複製到了slave，才會ack成功。 asynchronous: 資料一寫入到master，不等它被複製到了slave，就ack成功。各種cache策略知道了Replication之後，要怎麼將這些觀念應用在cache上呢？就是將以下兩種情況排列組合！就會得到四種快取策略拉～ 資料庫作為master vs. 快取作為master asynchronous vs. asynchronous replication基本上，使用資料庫作為master，可以保證資料不會丟失；若使用快取作為master，則是適合write heavy並且可以容許資料丟失的應用。而同步跟不同步則決定了資料是否會有不一致的現象。接著就讓我們分別更加仔細地看他們個別的作法及優缺點吧。cache aside 寫入: 資料寫入時就是寫到主要的資料庫中。 讀取: 應用程式讀取資料時，會先檢查是否有在快取中了，有的話就回傳，沒有的話就去資料庫中讀取，並存放一份在快取中，因為這個複製的動作是當這筆有被讀取到時才會進行，所以為非同步的複製。 優點: 資料直接寫入到資料庫中，就保證不會丟失，最容易實現，因為寫入時的動作跟沒有快取時是一模一樣的。 缺點: 第一次讀取時一定會cache miss，而非同步的複製就可能造成資料間的不一致。 read through 寫入: 資料寫入時就是寫到主要的資料庫中。 讀取: 跟cache aside非常相似，唯一差別在於應用程式只直接從緩存去拿資料，不需要同時知道緩存及資料庫的存在，而由快取本身決定要去哪裡拿資料。 優點: 應用程式的程式碼會更加簡潔。 缺點: 同cache aside。 write through 寫入: 寫入時直接寫入緩存及資料庫，必須等到兩者都寫入成功才成功。 讀取: 直接讀取緩存，通常搭配read through，如此一來，應用程式都將只需面對緩存就好。 優點: 不會有cache miss。 缺點: 寫入資料要等到快取及資料庫都寫入成功後才算成功，所以會增加寫入延遲。 write back、write behind 寫入: 寫入時直接寫入緩存，在以非同步的方式寫入到資料庫，這麼做可能有幾個原因，你的應用有大量write而資料庫負荷不了，可能在緩存那邊做一個batch insert。 讀取: 直接讀取緩存。 優點: 不會有cache miss、適用於write heavy的應用、減少對資料庫的負荷。 缺點: 資料有可能會丟失，當資料還未被成功從緩存複製到資料庫時，如果緩存這時掛掉，那些資料就不見了。 結論今天從另一個角度來看看各種緩存策略，寫入到資料庫的，不會有資料丟失的問題，同步及異步的複製則決定了資料的一致性，write heavy的應用可以考慮第一時間寫入緩存。策略沒有絕對的對錯，根據你的使用場景(write to read ratio、persistency、consistency)，選擇最適合的方案。希望今天的分享對你有一丁點兒的幫助，祝大家事業成功、生活美滿！掰掰～👋" }, { "title": "遠端工作模式對於雇主有哪些好處？", "url": "/posts/remote-working-advantages-for-boss/", "categories": "生活", "tags": "life style, remote work, digital nomad", "date": "2022-06-22 11:50:00 +0800", "snippet": "在上篇文章中: 遠端工作有哪些好處？以員工、接案者或自由工作者分享了遠距工作模式有哪些好處？今天換個角度！來看看身為老闆的話，這樣的工作模式會帶來哪些好處。我又不是老闆，為何要知道這些？知己知彼，百戰百勝，當你有一天想轉換工作模式必須跟老闆談判時，知道這能為老闆帶來哪些好處，將能夠讓你將心比心地創造出雙贏的局面。遠端工作模式不是零和遊戲，員工得到更多自由的同時，雇主也能同時獲得更多，談判能更成功的關鍵，就是能夠為雙方都創造出價值，然後再一起來分這一杯羹，而不是一方有收穫另一方就得失去些什麼。對雇主有哪些好處呢？接著就直接來看看遠端工作可以為僱主帶來哪些好處吧～世界人才資料庫當你不侷限員工要在辦公室工作時，來自全球各地的人都能為你所用，Pool越大，可能就越容易找到合適的人。以往就有來自印度、烏克蘭的人主動聯絡我們公司老闆的案例，表示希望能為我們工作，但礙於當時沒有遠距工作模式的相關經驗及想法，最後就都沒結果。如此一般，就算是當地小公司，在國際間的各個城市中沒有據點，但還是可以享受到IT強國的人才。降低人才流動有時員工可能因為一些非工作上的因素而必須離職，比如說家有老母，必須回鄉照顧；老婆的工作地點在別處，想要過去在同個城市生活；有環遊世界的夢想，非得離職等等。一旦是遠距工作模式，以上的這些問題就都不是問題！好的人才就不會因為一些非工作相關的理由而被迫要離開公司。成果導向，偷懶員工一眼揪出見不到員工，所有的一切都只能以成果說話，有沒有偷懶就一目瞭然，雇主對於員工的績效評估也會更加客觀。有時雇主可能會看到這個員工早上都第一個到，晚上最晚走，很聽話也很好相處，就認為他是一個好員工，但實際的情況卻是，這位員工的產出並不是太特別的多，待在辦公室的時間可能很多時間在做自己的事，並且晚下班裝忙。遠距工作模式就不會被這些表面的假像給蒙蔽，有做事沒做事非常地清楚，對於績效評量可以更有依據！省錢省下辦公室就是省錢，就是一個很膚淺但也是最直接明顯的好處，省下通勤時間跟相關的花費，不管是雇主還是員工都是皆大歡喜🎉另外就像上面提到的全球人才資料庫，有可能找到生活在消費水準較低的區域的員工，當然這不是最主要的目的，找到合適的員工才是更重要的，但如果能兩個都要，何樂而不為呢～結論遠距工作模式好處多多，且可能是未來的趨勢，企業若能慢慢適應將可能是一大優勢，現在我們公司每個求職者在面試的時候，每一個都問可不可以遠端工作～未來不能遠端工作的話，可能就會漸漸被淘汰了。當然這樣的模式還是會有他的難處要去克服，需要相對應的配套跟做法來搭配，比如溝通協作的模式，工作流程的設計等等，但如果可以成功克服習慣的話，我私心覺得是很不錯拉😂祝大家在追逐自己理想的生活上一路順遂～ 最近我也是正在經歷轉變生活型態的開端，會陸續分享數位遊牧遠端工作的心得及歷程，如果想更即時地看我遊到了哪裡，或是不想看這麼多字，想看精簡點的圖文表達的話，也歡迎追蹤我的Instagram: mumu.life.lab。掰掰～👋" }, { "title": "房間DIY改造: 大門篇，如何用剩的乳膠漆來改造大門", "url": "/posts/room-makeover-door/", "categories": "生活", "tags": "life style, room makeover", "date": "2022-06-18 22:04:00 +0800", "snippet": "想DIY重新裝潢佈置自己的房間，房門不想費功夫整個換掉，但又跟欲改造的風格會格格不入，該怎麼辦呢？這篇文章將分享有哪些方法可以改造房門，各有哪些優缺點，我最後是怎麼做的，花了多少跟多少錢，以及最後的成果分享～(見下圖)有哪些方法可以改造門常見的有兩種方式，分別為: 貼皮及上漆。貼皮表面平整的家具才比較適合使用貼皮，不平整的表面，壁貼將難以施工，貼皮比起油漆，就是除了顏色之外，還可以仿造出另一種材質的感覺，常見的像是木紋、清水模、大理石等等。另外家具表面如果有小傷口、刮痕、坑洞的話，利用貼皮的方式也能使之平整唷。在上一篇文章中: 房間DIY改造: 老舊家具及櫃體篇，就是使用貼皮的方式使整片的老舊系統櫃換然一新。油漆google家具漆，應該就可以看到市面上許多品牌都有在販售，而基本上都會有底漆加面漆。害怕自己美感不佳的話，可以直接買廠商調好的顏色，如果想要自己調顏色，可以去特力屋，跟他們說你想要漆傢俱的，根據你傢俱的材質，他們會告訴你需不要需要額外購買底漆，而面漆的顏色就可以使用電腦調色，好處就是可以一併跟牆壁的油漆一起買，做統一的顏色搭配調整。而且如果你是牆壁漆剩的，更可以直接拿來利用！改造過程因為這次要改造的門非常凹凸不平，所以無法延續之前貼皮的方式，而是選用Dulux 1051平光白乳膠漆，以及立邦的護壁寶作為底漆。拆除把手首先先將把手拆卸下來，youtube有許多教學影片像是這個: 換房門鎖教學示範 Replace a Door Lockset / Doorknob 喇叭鎖更換，不想拆的也無法，稍後漆的時候要小心就是了，但我覺得一起換一個新的美美的把手不是更好嗎～清理門面接著把門上貼紙撕一斯，撕不下來可以用刮刀或是砂紙磨，最後濕布將粉層擦拭乾淨，等他乾就可以準備上漆囉～漆上底漆根據你們表面的材質，可能會需要多上底漆，像是我家的門是塑膠貼皮，直接上漆的話可能會漆不上去，特力屋的店員是告訴我買立邦的護壁寶，這原本是防水用途的。而市面上賣的家具漆有的標榜什麼材質都能上，有的則是會附上底漆，今天就只分享以立邦護壁寶作為底漆，幫大家實驗看看～如果不確定你家具的需不需要上底漆，可以先試試在小面積漆上面漆，等他乾了之後看會不整片剝落就知道了。漆上面漆等底漆乾了之後，就可以開始上面漆拉，通常會上個三四層，第一次就薄薄一層刷過去，看起來會很不均勻那覺得是正常的！如下圖:塗刷三道之後看起來就好許多了！裝上把手就是把它裝上去😂，買來應該都會有說明書，不過在購買之前要注意尺寸跟你家房門挖的洞有沒有合唷！結論使用特力屋推薦的立邦護壁寶底漆看起來是沒問題的，第一次在上乳膠漆時上不均勻時別害怕，等他乾燥之後再多上幾層就ok了繼上次改造完衣櫃後，這次將旁邊的大門也一併處理，貼皮的話，我覺得表面的品質還是會比較一致一點，但礙於門面太過凹凸不平，只能用漆的，雖然有點色差但也是沒辦法，就給大家參考參考～最後附上這次塗刷房門的購買清單及連結: 得利乳膠漆 1501白 立邦 護壁寶 把手: 加安牌 lp1x90g之前還有針對老舊櫃體、牆壁及地板的部分做過改造，有興趣的朋友可以看我之前寫過的文章～ 房間DIY改造: 老舊家具及櫃體篇 房間DIY改造: 牆壁篇(油漆、開關面板、變電箱遮掩) 房間DIY改造: 地板篇" }, { "title": "你可以在這46個國家拿到數位遊牧簽證!", "url": "/posts/digital-nomad-visa-in-46-countries/", "categories": "生活", "tags": "remote work, digital nomad", "date": "2022-06-18 00:12:00 +0800", "snippet": "如果你是個企業家、接案工作者、或像我一樣是個可以遠端工作的打工仔，那麼你可能對數位遊牧(digital nomad)這樣的生活型態有興趣～數位遊牧什麼是數位遊牧呢？就是只要有電腦跟網路，你就可以在任何你想要的地方工作！你有實現環遊世界、體驗各地的文化跟認識世界各地的人的夢想嗎？不用等到退休！現在就可以收拾你的行囊，前往你夢想中的國度！延伸閱讀: [讀書筆記] 一週工作4小時: 擺脫朝九晚五的窮忙生活，晉身「新富族」！ 遠端工作有哪些好處？ 如何不用做額外的工作，就使你的收入倍增數位遊牧簽證但如果你只是持旅遊簽證，你在一個國家待的時間就會有限，有了數位簽證，將可以在當地待一個月到四年不等的時間。這類簽證通常需要你的工作及收入證明，以確保你不會跟當地人搶當地的工作的機會。以下為國家列表: Anguilla Antigua &amp;amp; Barbuda Aruba Australia Barbados Belize Bermuda Brazil Cambodia Cape Verde Cayman Islands Colombia Costa Rica Croatia Curacao Cyprus Czech Republic Dominica Dubai, UAE Ecuador Estonia Georgia Germany Greece Grenada Iceland Indonesia Italy Jamaica Malta Mauritius Mexico Montenegro Montserrat Norway Panama Portugal Romania Serbia Seychelles Spain Sri Lanka St. Lucia Taiwan Thailand Vietnam如果對以上國家有興趣的，可以google 國家名 + digital nomand visa來看看申請辦法唷～參考資料 You Can Get a ‘Digital Nomad’ Visa in These 46 Countries How “Digital Nomad” Visas Can Boost Local Economies" }, { "title": "遠端工作有哪些缺點？以及該如何克服？", "url": "/posts/remote-working-disadvantages/", "categories": "生活", "tags": "life style, remote work, digital nomad", "date": "2022-06-14 23:36:00 +0800", "snippet": "在上一篇文章: 遠端工作有哪些好處？中，提到了許多遠端工作的優點，今天將來看看有哪些缺點，並且提出相對應的解決辦法！遠端工作的缺點:1. 工作和生活混在一起不用到辦公室上班，意味著你必須自己決何時何地工作，這是優點，同時也可能是個缺點！早上起床準備早餐，出門通勤到辦公室，準備個咖啡開始工作，跟同事吃午餐，下午繼續工作，下班去運動，回家吃個晚飯好好休息結束一天。每天在辦公室的生活很可能就像這樣，很規律也不用多想，什麼時間到了就做什麼事，有生產力、社交、健康及下班後自己的時間。接著我們來看看遠距工作可能的樣子: 早上起床準備早餐，邊吃早餐邊收發Email，準備個咖啡開始工作，想到今天是NBA總決賽的日子，打開電視機看了一下比賽，遲遲才開始工作，中午吃完午飯又睡個午覺，結果發現工作趕不完，一直到熬夜到睡前都持續工作著。如此一般，如果沒有自律及自我管理的能力時，遠端工作反而可能是悲劇的開始，不是無法脫離工作，就是無法好好開始工作～怎麼辦？就像在《原子習慣》一書中講到的，組成我們每一天大部分是習慣，而不是有意識的選擇，而自由的生活使得我們會不斷地面臨選擇!我現在要開始工作了嗎？還是看一下NBA，晚上再補就好？我要在客廳用筆電工作嗎？還是去書房？我現在要出門運動去嗎？這樣還要換衣服好懶喔…解決辦法就是使生活行程習慣化，使之成為不需假以思索就會自動去執行的慣例(routine)，替自己加上一些限制，明確地規定自己何時要在何地做什麼事，區分出工作及生活休閒的區域。延伸閱讀: [讀書筆記] 原子習慣: 細微改變帶來巨大成就的實證法則 《原子習慣》應用: 我是如何養成閱讀習慣2. 缺乏社交，孤單寂寞覺得冷自己一個人在家工作，沒人可以閒聊，少了茶水間的八卦，偶爾也是會感到孤單的。雖然不會有人打擾你，造成你專注工作的中斷，不過人畢竟是社會性的動物，人與人的連結還是必須的。怎麼辦？少了跟同事的社交，那你可以跟其他人社交呀～ 有了在哪裡都能工作的自由，除了家裡之外，你還有許多的選擇。像是可以去咖啡廳、coworking space工作，找朋友一起工作(前提是他也可以遠端XD)，或是在一些遠距工作者的社團揪團～以我自己來說，遠距工作之後，反而跟很多許久不見的老友見面，因為我可以直接在他家工作XD，有些則是因為地點的關係，去找不在台北的朋友也方便多了，未來出國的話，也可以找在當地工作生活的朋友們😄，不過社交跟專心工作之間還是必須要做出取捨拉。3. 瑣碎的工作變多基於雇主與員工間的信任，有些公司會制定出的相關準則，像是要回報工作進度狀況、寫工作日誌，或者原本相較彈性的工作內容，主管為了監督是否在家真的有在工作，而制定了完成期限。這些政策無疑地都是在增加員工們瑣碎的工作內容與壓力。怎麼辦？跟老闆培養好信任的基礎是最根本的～一旦老闆相信你會把工作做好，他也就不會時時刻刻要一直關心你的進度。不過如果是剛轉換工作型態，定時回報工作進度或許是不太能避免的，必須要給老闆一個期待，讓他知道他可以期望你在哪個時間點完成哪些任務，而這也是我跟老闆說要遠端工作所用的其中一招，之後會再寫一篇我是如何說服我老闆遠距工作的(TODO)。另外有工作日誌並不一定是個壞事，當員工將完成的事記錄下來，有沒有偷懶就一目瞭然，雇主對於員工的績效評估會更加客觀，完全以工作成果來看，而不是這個員工有沒有早到晚走，聽不聽話，好不好相處…如果員工可以在更短的時間內做完任務，相對地就有更多的時間做自己事，也不用待在辦公室的座位上裝忙😂結論更多的自由，並不一定會帶來更多的幸福，以前人們會追求工作與生活的平衡(work life balance)，上班與私生活有明確的分界，要有夠多的時間可以從事自己的興趣。但遠端工作後，工作與生活更多像是融合在了一起，能做到生活即工作，工作即是生活那是最好，但並不是每個人都能那麼喜歡自己的工作，所以不妨替自己加上一些限制，明確界定工作的時間及地點，或許會更有效率，以及下班後能夠真正地放鬆。並不是每個人都適合遠端工作，如果你喜歡規律穩定地生活，大部分的行程活動是被安排確定好的，那遠端工作可能不適合你。祝大家都能順利地向著自己理想的生活型態上前進！掰掰～👋" }, { "title": "房間DIY改造: 老舊家具及櫃體篇", "url": "/posts/room-makeover-furniture/", "categories": "生活", "tags": "life style, room makeover", "date": "2022-06-10 21:52:00 +0800", "snippet": "想DIY重新裝潢佈置自己的房間，家裏有老舊家具或櫃體還是堪用的丟掉可惜，，又或者它是系統家具，做死的也不想費功夫整個打掉，但又跟欲改造的風格會格格不入，該怎麼辦呢？這篇文章將分享有哪些方法可以改造老舊櫃體，各有哪些優缺點，我最後是怎麼做的，花了多少跟多少錢，以及最後的成果分享～(見下圖)有哪些方法可以改造家具常見的有兩種方式，分別為: 貼皮及上漆。貼皮表面平整的家具才比較適合使用貼皮，不平整的表面，壁貼將難以施工，貼皮比起油漆，就是除了顏色之外，還可以仿造出另一種材質的感覺，常見的像是木紋、清水模、大理石等等。另外家具表面如果有小傷口、刮痕、坑洞的話，利用貼皮的方式也能使之平整唷。家具漆google家具漆，應該就可以看到市面上許多品牌都有在販售，而基本上就是底漆加上水凝瓷漆。害怕自己美感不佳的話，可以直接買廠商調好的顏色，如果想要自己調顏色，可以去特力屋，跟他們說你想要漆傢俱的，根據你傢俱的材質，他們會告訴你需不要需要額外購買底漆，而面漆的顏色就可以使用電腦調色，好處就是可以一併跟牆壁的油漆一起買，做統一的顏色搭配調整。施工過程我這次選擇使用貼皮的方式來將衣櫃改造，因為櫃體表面還算很平整，下次再用漆的方式來處理凹凸不平的門的部分，未來可以做個比較。施工的過程如下:清理第一步就是把傢俱表面清理乾淨，有灰塵的話，容易導致壁貼不黏。拆換把手把手的部分，不論你有沒有想換，都可以先拆下來，門片的背面會有螺絲，轉下來即可，如此一來會有一個平整的表面，會比較好貼，等貼完之後再裝上去就好了。如果想更換把手的話，網路上也有需多把手可以選購，要注意的是孔距必須跟你原本的把手孔距一樣，不然你就要自己再鑽孔了。我的話因為找不到一樣孔距的，所以就乾脆買了一孔的就好，如下圖:貼接著剪下一片壁貼，建議尺寸大小可以略大於實際需要的面積，就可以有比較多的緩衝可以避免貼歪。記得背膠的紙一點點撕開就好，邊撕邊貼的同時，只是刮刀或是直尺等工具，將空氣擠出，確保壁貼表面的平整。裁切貼完之後，再將邊緣多餘的紙利用美工刀裁切整齊！裝上把手等都貼完裁完了之後，不管把手是新是舊，最後把它們裝上就好拉～總共時間及金錢花費如同第一張圖大家所看到的，那一面牆的總面積約為350 x 380 平方公分，每一片門片因為左右都有凸起，所以要分三次貼，上下兩排總共8扇門，花了10幾個小時！而壁貼購買的是倆好壁貼的無印白衫木，123cm x 1000cm，要價新台幣3090！總結成果還算滿意～ 唯一預料之外的就是花費的時間比預期的多，等過一段時間如果有災情的話再跟大家報告😂。其他還有對大門、牆壁及地板的改造: 房間DIY改造: 大門篇，如何用剩的乳膠漆來改造大門 房間DIY改造: 牆壁篇(油漆、開關面板、變電箱遮掩) 房間DIY改造: 地板篇如果想更即時的看到改造過程的，也歡迎追蹤我的Instagram: mumu.life.lab。希望以上的內容對你有幫助！掰掰～👋" }, { "title": "遠端工作有哪些好處？", "url": "/posts/remote-working-advantages/", "categories": "生活", "tags": "life style, remote work, digital nomad", "date": "2022-06-10 00:00:00 +0800", "snippet": "這篇文章將分享遠端工作有哪些好處，也就是我在慢慢轉變為數位遊牧生活型態的過程中，所體會的一些點: 節省通勤時間 時間彈性 地點彈性 專注工作、生產力提升 省錢 在 Instagram 查看這則貼文 穆穆的生活實驗室（@mumu.life.lab）分享的貼文節省通勤時間我想這就是最顯而易見的好處了！有研究指出，每增加20分鐘的通勤時間，你就會更不快樂，而不快樂程度相當於減薪19%！你是想每天早上開車被塞在車陣之中、在捷運公車上跟大家面面相覷，還是要在家悠閒地準備早餐、沖個美味的咖啡來開啟一天的工作呢？延伸閱讀:台北人每天上下班都會花多少時間跟費用通勤呢？時間彈性擺脫了朝九晚五的辦公室框架，如果你事情都做完了，就不必因為主管還沒下班就不敢走，裝忙裝到時間到。並且可以依照自己需求安排時間，有人可能是夜貓子，晚上工作效率較佳，不用每天早上掙扎著起床；有人可能需要在下午四五點去接送小孩放學，而我是喜歡在傍晚的時候就先去運動，免得太晚運動會影響睡眠。也可以選擇週末工作！把平日的時間拿來旅遊，充分利用到平日的交通及住宿都比較便宜的好處！地點彈性邊旅遊邊工作不在是夢想，擺脫了辦公室的框架，你將擁有機動性來實現你的夢想，可以在任何你想生活的地方工作！想衝浪嗎？每週週末開車坐車去到宜蘭、花東，何不直接在當地住下，隨時想衝就衝；想滑雪嗎？以往每年只能出國幾趟，一次滑個三五天，如今就可以直接在日本、歐洲、美國、紐澳住下！季票給他買下去，暢滑整個雪季！喜歡大自然的人，可以遠離喧囂、生活成本又高的都市，擁抱鄉下新鮮的空氣；喜歡都市也好，一切由你自己決定！專注工作、生產力提升在辦公室中，就可能隨時會被打擾，同事間有意無意的閒聊，或是有一點點小事就找你問，失去了大段可以專注的時間。就像在《Deep Work深度工作力》一書中講到的，當某項任務被完全中斷的時候，人得花超過20分鐘才能完全回到之前的狀態，如果你頻繁地在工作之間切換時，就會破壞深度工作的執行。當然遠端工作也不是就一定不會被打擾，只不過你擁有更多控制自己工作環境的自由。省錢這不是主要的目的，但會省錢的話，也誰不愛呢～省去通勤的花費，也因為時間上及地點上的自由，可以變相地讓你用更少的錢買到一樣的價值。比如説利用週末的時間工作，將活動放在平日進行，所有的花費包括交通、旅遊住宿、活動費用都比較便宜！另外也因為地點上的自由，就不一定需要住在都市才會有好的工作機會，可以不用在昂貴的市中心租房或買房，省下房租或是每個月要繳房貸的焦慮及壓力，可以更多地依據自己的喜好來決定住的地方，甚至利用地理套利，到生活成本低的國家去當大爺～延伸閱讀:如何不用做額外的工作，就使你的收入倍增結論遠端工作在時間及地點上的自由，可以帶來如此多的好處，但一體兩面地，有時同樣的好處也會帶來一些壞處，以及我是如何跟老闆談遠端工作(TODO)。另外重點還是要知道你自己想要的是什麼？有了遠端工作，退去了朝九晚五及辦公室的枷鎖，除去一切不想要的東西後，並不會得到繁榮，得到的就只是一片空白。就像有人退休了，終於不用做每天抱怨的工作時，生活卻失去了重心。祝大家在追逐自己理想的生活上一路順遂～如果想更即時地看我數位遊牧流浪去哪，或是不想看這麼多字，想看精簡點的圖文表達的話，也歡迎追蹤我的Instagram: mumu.life.lab。掰掰～👋" }, { "title": "HTTP API: 該如何管理一份很大的OpenAPI document？", "url": "/posts/how-to-manage-a-large-openapi-document-file/", "categories": "Web Development", "tags": "http, restful api, api, openapi", "date": "2022-06-07 00:07:00 +0800", "snippet": "OpenAPI的document文件可以變得非常大一份，特別是當你有好幾百個routes的時候，這時候單一份的yaml檔管理起來可能會非常頭大，這篇文章將分享在這種情況下，我是如何將一份大的檔案拆分成許多小的檔案，易於管理。OpenAPI SpecificationOpenAPI也被稱為Swagger，是一個用來描述你的API的標準，可以根據這個標準來撰寫你的文件，我想你應該很熟悉了，如果還不熟的，可以先看看官方的說明: OpenAPI specification。我如何拆分檔案使用JSON格式官網上的範例文件都是使用yaml，而我偏好使用JSON，基於以下幾個理由： 許多語言都內建支援JSON格式，尤其是javascript，JSON的J就是這樣來的。 可以直接由程式控制，將需要共用的(response、schema、parameter)寫在不同檔案，要用的時候在import進來就好。 除了以上常常會需要共用的，造成spec檔案會變的很大的一個因素就是有太多的path，也能將path依照你想要方式做拆分。寫起來就會像是下面這樣:index.jsconst schemas = require(&#39;./components/schemas&#39;)const securitySchemes = require(&#39;./components/securitySchemes&#39;)const parameters = require(&#39;./components/parameters&#39;)const responses = require(&#39;./components/responses&#39;)const paths = require(&#39;./paths&#39;)module.exports = { openapi: &#39;3.0.0&#39;, info: { title: &#39;Example API Overview&#39;, version: &#39;1.0.0&#39;, contact: { name: &#39;API Support&#39;, email: &#39;b98901052@ntu.edu.tw&#39; } }, servers: [{ url: &#39;/api/v1&#39; }], components: { schemas: schemas, parameters: parameters, responses: responses, securitySchemes: securitySchemes }, paths: paths}paths.js可能就會長得像下面這樣:const pets = require(&#39;./pets&#39;)const users = require(&#39;./users&#39;)const stores = require(&#39;./stores&#39;)module.exports = { ...pets, ...users, ...stores,}可以將所有/pets開頭的路由放到pets.js，以此類推，如此一來就便於管理，不會有一份檔案裡頭有好幾百個path，可以更快地知道要修改一個endpoints要去到哪一支相對應的檔案。輸出當你要輸出JSON檔時，只需要把上述Object做一個JSON.stringify就行，或是依賴其他套件轉成YAML的格式。限制但前提是你使用的動態語言，像是javascript、python等等，才有這樣方便的好處。就是想用YAML其實不用JSON也是可以，上述的方法一樣可以套用到YAML檔，也就是將一些可以重複使用的schema、response，以及拆分出來的path們放到不同的檔案，只是可能需要依賴一些額外的library來幫你做合併的動作。像是swagger-cli，就可以讓你把$ref的目標，放到不同的檔案。總結想要拆分一份大的OpenAPI spec檔以便於管理，核心的關鍵就跟寫程式是一樣的，DRY(Don’t repeat yourself)，將會重複使用的部分拆出來，在原先的OpenAPI spec也能做到，就是使用$ref，但今天更近一步跟大家分享將其寫在不同的檔案的方法: 使用JSON格式、利用其他套件swagger-cli。希望以上的內容對你有一丁點的幫助！掰掰～👋" }, { "title": "如何使用Notion打造Kanban based的待辦清單", "url": "/posts/notion-kanban-board/", "categories": "生活", "tags": "notion, productivity, kanban", "date": "2022-06-04 00:02:00 +0800", "snippet": "待辦清單的首要任務是幫助我們整理心智，在眾多的選擇中，優先認出當下最該先執行的事項，而不會被一堆的事項搞到非常憂慮，什麼都想做卻什麼都做不好，甚至是都沒有開始做。這篇文章將簡單分享我認為待辦清單系統應該具有哪些原則，什麼是Kanban，以及我如何使用Notion，來打造自己的Kanban based的待辦清單系統，Let’s go！三大待辦清單原則市面上的待辦事項系統玲瑯滿目，有沒有一些基本的原則是我們可以把握的呢？以下為大家簡單總結出三項原則： 要有截止日期:沒有截止日期，沒有急迫性，大家就是會拖，懶就是人的天性，我想不用多說什麼，大家應該多少都能感同身受吧😂 清單不能太長:選項太多也會導致不知道要選哪一項任務來進行，也就是決策癱瘓，就算費力地做了選擇，也會導致決策疲勞，耗費了許多能量在決策上。 與目標連結:要知道為什麼要做每項任務，它必須可以幫助你達成某項目標，否則做了很多事，很可能只是在瞎忙。 關於待辦清單的原則，想看更詳盡的解釋，可以參考我之前寫過的一篇文章:掌握這3個原則，打造出最適合自己的代辦清單系統Kanban是什麼Kanban緣起於Toyota的生產管理系統，看起來就像是下圖這樣:主要組成有欄(column)、列、卡片(card)、WIP limit，每張卡片即是一項任務，可以將相關的任務放在同一欄，也可以使用顏色分類，並在每一列區分出未開始、進行中及完成，而進行中的任務數量會有一個上限，也就是WIP limit(Work in Progress Limit)。組成 Cards: 每一張卡片即代表一個任務事項。 Columns: Kanban最明顯的特徵就是有著不同狀態的直欄: 未開始、進行中及完成，藉著將卡片移動來移動去以及視覺化，能夠對當前的進度及狀態一目瞭然。 WIP limit: 而對於進行中的那一欄，有一個卡片的數量上限限制，可以避免我們任務越積越多，並且首先專注於最重要的幾件事上。好處 視覺化: 對於所以進行中及未開始的能夠一目瞭然，如果是一個團隊，成員間也能迅速地同步所有任務事項的狀態。 決定優先事項: 每個當下只需專注於進行中的事項，把他們做完之前，不需要擔心其他的事，可以減少心智負擔，也不用擔心是否會忘掉其他任務，因為你有把它們寫在未開始的那欄。使用Notion來實作最後也是最重要的，將利用Notion這套軟體，來打造自己的Kanban，並且可以符合上述說的三個原則: 有截止日期、不能太長、與目標連結。原本的Kanban系統因為有WIP limit的關係，有符合清單不能太長的原則，但缺少了截止日期及與特定目標連結，接下來我將一步一步地示範如何利用Notion，來完善我們Kanban待辦清單系統！建立表格首先第一步，新增一個頁面，並且選擇Table。接著系統會要你選擇資料來源，這邊就選New database。新增欄位現在需要來定義我們的資料庫裡需要的欄位了，這邊我們是會需要名稱、任務狀態、截至日期、目標或專案。 狀態(Status): 為一個單選欄，主要的狀態就分為未開始、進行中、已完成，可以取用自己喜歡的名字，也可以有更多的狀態，這邊最主要的目的就是區分出進行中的任務。 目標或專案(Project): 每個任務會有附屬於一個目標或是專案之下，記錄下來，可以知道為什麼要做這個任務，當事項太多時，也可以利用這個欄位來做篩選。 截止日期或時間區間(Deadline): 加上截止日期，為自己增加急迫性，否則就很容易一拖再拖，後續也會利用這個欄位來建立timeline的視覺畫圖表，有利於我們使用截止日期來決定哪些任務應該趕快開始進行。 新增Board view建立好資料後，就可以使用board view的功能，按照下圖的步驟，來使得系統像一個看板拉！完成後，就可以在板上將任務拖拉移動來更改狀態，可以依照個人習慣的不同，每天或每個禮拜，決定好要先專注於哪些任務。新增Timeline view再新增一個timeline view，步驟如下圖:可以看到紅線的位置就是當天，有了這張圖表，就可以一目瞭然的看出，哪些任務已經快可以開始或是截止日期已經逼近了，可以據此來調整你的優先事項唷！總結今天簡單地分享了好的待辦清單系統應該要具有的原則: 截止日期、不能太長、與目標連結，也認識了一個常見於敏捷開發團隊的系統: 看板(Kanban)，最後使用了Notion來實作。祝大家生產力高高，每天都可以順利地往自己的目標邁進！ 掰掰～👋" }, { "title": "為什麼逛完IKEA要來隻霜淇淋: 峰終定律", "url": "/posts/peak-end-rule/", "categories": "生活", "tags": "psychology", "date": "2022-05-16 22:12:00 +0800", "snippet": "為什麼IKEA會在最後結帳區的前後，設置餐廳區及有賣霜淇淋的小吃部呢？這麼做對我們購物的體驗有什麼影響嗎？峰終定律可能可以給我們一點答案。什麼是峰終定律我們對於過去的一段經驗及體驗的記憶，主要由兩個部分決定: 高峰時於結束時的感覺。這是由著名的心理學和經濟學家丹尼爾．康納曼（Daniel Kahneman）所提出，他也做了以下實驗來證實這個理論。結腸鏡實驗[1]照胃鏡腸鏡總是一個令人不悅的體驗，實驗將受試者分成兩組，對照組如往常一樣，照完腸鏡就結束，而實驗組則在照完腸鏡結束後，還繼續將腸鏡放在腸子裡一段時間不動，不動的時候就比較沒有那麼不舒服。事後詢問兩組實驗對象對於腸鏡體驗的感受，結果竟然是實驗組覺得體驗較佳！總的來說，他們承受了更多不適的時間，卻因為最後的時間比較沒那麼不舒服，就使得他們對於整段體驗的感受有更好的評價！噪音實驗另一個實驗則是使用噪音作為不悅的體驗來源，實驗對象分別要聽兩段噪音，第一段是持續八分鐘的痛苦噪音，第二段是八分鐘的痛苦噪音再加上八分鐘的輕微噪音，結束後請受試者再聽一次，他們可以選擇要聽哪一段，結果竟然有更多的人選擇聽第二段噪音！！人是不理性的有沒有覺得那些受試者很笨，但人就是這樣，許多時候都是不理性的，人類的判斷會有許多失誤許多心理學的研究及書籍就是在探討這一議題，比如康納曼的《快思慢想》及《雜訊》，巴菲特的事業夥伴蒙格所推薦的《影響力：讓人乖乖聽話的說服術》，這一本我覺得比起康納曼的書，要易讀許多～而這一心理學領域與經濟學結合，就衍伸出一個新的經濟學領域: 行為經濟學，不再使用以往經濟學所假設的理性經濟人模型，而是將人性、不理性的一面也一併納入考量，相關的書籍有像是《不當行為》及《金錢心理學》。延伸閱讀: [讀書筆記] 金錢心理學: 打破你對金錢的迷思，學會聰明花費 (上) [讀書筆記] 金錢心理學: 打破你對金錢的迷思，學會聰明花費 (下)結論IKEA在逛街購物的尾端，擺上令人心滿意足的小吃及霜淇淋，企圖為這次的體驗加分。而人時常是不理性的動物，這篇文章所分享的峰終定律，顯示出我們人類對於過去的經驗記憶，可能時常是有偏差的。但反過來，我們也可以利用這點，來為自己創造出更好的體驗！記得每次結束一整天約會後，要給你的情人來一個大大的擁抱或是kiss goodbye，做為這次約會的美好結尾唷～❤️參考資料 Redelmeier D. A., Kahneman D. (1996). Patients’ memories of painful medical treatments: real-time and retrospective evaluations of two minimally invasive procedures. 行為經濟學" }, { "title": "架設個人網站、撰寫部落格帶給我的5個好處", "url": "/posts/advantages-personal-website-and-blog-brings-to-me/", "categories": "生活", "tags": "self improvement", "date": "2022-05-08 20:31:00 +0800", "snippet": "開始認真規律的寫部落格寫到現在，大概過了近一年的時間，這篇文章將分享寫部落格帶給了我哪些好處: 積極學習 豐富生活 分享輸出 個人品牌 SEO知識及Markdown語法積極學習當你需要規律的有產出的時候，等於變相地要求自己有所學習及成長，如果寫不出來，就代表最近這些日子沒有什麼長進了😂寫作就是 輸入 + 處理 + 輸出，不管是工作專業上的、一般的閱讀或是實踐一些新得到的想法都好，為了要有東西輸出，就會逼自己持續的輸入及思考。豐富生活除了成長之外，適當的休息及玩樂也是必要的！但休閒娛樂也有分為被動及主動的，低品質及高品質的活動。躺在沙發上吃垃圾食物看劇是一種休閒，研究室內設計，準備DIY改造房間也是一種休閒，都很有趣！我也喜歡耍廢！但是收穫到的卻是截然不同的！在《要忙, 就忙得有意義》一書裡有提到，該如何讓我們的一生過得充實，完成很多事呢？其實很多時候只是我們忘記了，我們沒有創造出值得記憶的事物，比如你每天的通勤一小時，如果都是不假思索，同一路線上班下班，就這樣過了30年，在那7800個小時裡(1x5x52x30)，你會記得什麼呢?那如果你一天換個交通方式，一天繞個路去探索別家早餐店，是不是就彷彿記得更多的事，擁有了更多時間呢？所以每天可以問問自己: 今天跟昨天有什麼不一樣呢？分享輸出透過寫作輸出，可以讓我的學習更加地深刻，大家都知道教學就是最好的學習，當你要去教導別人一個概念時，如果自己理解得不夠清楚，就可能會卡關，所以可以趁著寫作輸出時，找出自己還不是理解得很透徹的點。延伸閱讀: [讀書筆記] 最高學以致用法: 讓學習發揮最大成果的輸出大全個人品牌曾經有位素不謀面的朋友的朋友，表示他願意幫我看我的履歷，並且向他們公司(全球市值前10)進行內部推薦，問他為什麼願意這樣幫助我呢？他說因為他看過了我的部落格！這就是自我營銷、個人品牌的強大，在現今網路發達的年代，將自己行銷出去的門檻變得非常低，部落格(或其他平台)不僅可以讓大家認識你，各種機會也會自己找上門來！面試找工作時，公司只能透過幾次會談，在幾個小時的時間來了解你，那何不透過部落格，讓他們可以更多地知道你的強項！SEO及Markdown技術面上的收穫，就是了解到更多關於SEO的知識，既然都花心力寫了，當然還是會想要觸及到更多的群眾，不過我覺得還是真誠且有價值的內容才是最重要的，只是SEO的一些知識，可以幫你加速這個過程。而我的部落格是用Jekyll建置的，是一個基於markdown語法來產出靜態網頁的程式，所以我在寫文章時，都是對著黑白畫面的文字介面，也讓我更熟悉了markdown語法～結論最一開始寫作的初衷，就只是為了讓自己的學習可以更加深刻，不過後來發現它帶來了許多的好處，其中最主要的，就是會讓生活變得更加地充實！有意識的、好好地度過每一天，而不是虛度光陰，等到老的時候，想不起來這輩子都到底幹了些什麼😂這邊簡單地跟大家分享～希望對大家有一丁點兒的幫助，掰掰～👋" }, { "title": "掌握這3個原則，打造出最適合自己的代辦清單系統", "url": "/posts/book-note-todo-list-formula/", "categories": "讀書筆記", "tags": "books, productivity, notion", "date": "2022-05-05 17:18:00 +0800", "snippet": "這篇文章將探討為何要使用待辦清單系統，有哪些基本的原則，並分析現存各種待辦清單系統的優缺點，了解他們分別滿足及不滿足哪些原則，好讓我們可以應用這些原則，設計最適合你自己的待辦清單系統。為何要使用待辦清單決定優先順序決定好每時每刻，當下應該要應該要專注的事，就是待辦事項系統是最大的價值。待辦事項的目標並不是要讓你完成更多的事，也不是要你把所有的項目都上上去，然後專心於把全部都打上勾勾，而是讓我們知道該優先做哪些任務，專注於高價值的事！幫助達成目標並不是所有的事都值得要去做，當有一件事項出現時，不管他是自己想到的還是別人的要求的，知道為什麼要做它是很重要的，它必須符合公司的目標、團隊的目標或者是自己的目標。每個事項都是用來幫助你達成某個目標才是有意義的，否則就容易陷入很忙卻是在瞎忙的狀態！減輕壓力將待辦事項寫下來，能夠使它不在縈繞於腦海之中。或許你也有過這樣的經驗，要做的事情很多，心心念念擔心著未完成的事，結果睡不著甚至做惡夢。將待辦事項寫下來，並決定好優先順序，就能一次專注於當下的工作，也不用擔心會忘記其他的事項，並隨著事項一個一個的完成，感到一步步朝著目標前進的信心，就能夠減輕許多的心理壓力。三個大原則待辦事項系統玲瑯滿目，有沒有一些基本的原則是我們可以把握的呢？以下為大家簡單總結出三個原則： 清單必須要有截止日期 清單不能太長 每項任務要有背景，並與特別目標連結要有截止日期如果沒有截止日期，它就只是一個願望清單，缺少了急迫性，就像信用卡帳單、稅單一樣，你會拖到最後一刻才去繳費。 Parkinson’s Law：Work expands so as to fill the time available for its completion.帕金森定律: 工作總會填滿它可用的完成時間，給你八個小時的時間完成一項任務，你就會花八個小時把它完成；如果你小孩生病了，必須在兩個小時之後離開公司，那你就會神奇地在兩個小時內完成工作！清單不能太長面對一份落落長的清單及太多的選擇，會使得我們決策癱瘓，選擇太多造成難以做出選擇進而行動，就算我們真的成功地做了一連串的抉擇，也耗費了許多心智能量，造成決策疲勞。做決定跟意志力是一樣的，他們是有限的心智資源，所以可以看到許多成大事的人，都會避免自己在小地方上需要做選擇，比如賈伯斯跟祖克柏每天都穿一樣的衣服，艾因斯坦也是一樣的灰西裝一直穿。並且太長的清單，也會使你覺得有一堆未完成事項而感到沮喪。有哪些方法可以幫助清單不要太長呢？ 區隔出當前任務及未來任務 篩選: 可以在兩分鐘之內做完的事，就直接做完，跟達成目標願景無關的事，也不值得寫下來去做。 分類: 可以依據目標、專案、時間、地點任何你想要的方式分類，每一類的清單就不會太長。與特定目標連結任務間要有關聯，要知道情境也就是為什麼要做這項任務，必須要有目標，再將目標拆解出許多小的、可以行動的事項，這些事項才是真正重要的！要如何將目標拆解出任務可以參考S.M.A.R.T原則，由管理學大師彼得‧杜拉克(Peter Drucker)提出，分別為Specific（明確的）、Measurable（可衡量的）、Achievable（可達成的）、Relevant（相關的）和Time-bound（有時限的）。有哪些待辦清單系統全包式清單只要任務一出現，一想到什麼就全部寫下來 好處: 減輕大腦負擔，將未完成任務寫下來，就能卸除它們佔用你的大腦。 缺點: 全部的任務寫在一起，使得清單太長難以從中做出選擇，沒有截止日期、也無法跟目標關聯。任務 + 開始日期 + 截止日期除了記下任務之外，為每項任務加上開始及截止時間 好處: 有了截止日期才有急迫性，不會落入帕金森定律的陷阱裡；並且可依日期來決定的優先事項。 缺點: 沒有每項任務的情境、分類，以及跟目標的關聯。總工作清單 + 每日工作清單就像《子彈筆記》裡的基本元素，Future Log、Monthly Log及Daily Log，將未來清單與近期或每日清單分開。 好處: 跟全包式清單一樣可以做到大腦傾存，區隔當前與未來任務，就能有份較短的優先清單。 缺點: 沒有情境分類跟目標關聯、跟截止日期。專案清單依照專案分項，將隸屬於同一份專案的待辦事項寫於同一份清單之中。比如說你今年的目標專案有出書、整修房子、夏威夷旅遊等等…在整修房子裡的待辦事項可能就會像這樣: 聯絡設計師 進行諮詢，風格、需求定調 購買DIY地板材料 地板施工 購買DIY牆壁材料 牆壁施工 購買傢俱 組裝傢俱 軟裝擺設 好處: 每個任務之間都有關聯，並且是為特定目標前進，而每個專案的清單也不會太長。 缺點: 沒有截止日期。看板(Kanban)Kanban緣起於Toyota的生產管理系統，看起來就像是下圖這樣:主要組成有欄、列、卡片、WIP limit，每張卡片即是一項任務，可以將相關的任務放在同一欄，並區分出未開始、進行中及完成等列，而進行中的任務數量會有一個上限。 好處: 有區分出總任務及當前任務清單，WIP limit(work in progress limit)可以定義出一個不會太長的優先事項。 缺點: 沒有截止日期。結論綜合以上的幾點原則，有下列這些要點是我們可以行動的: 區隔當前與未來任務 知道任務的背景及原因，對目標有貢獻 把專案拆成多項單獨任務 加上截止日期 當前任務數量限制以上的內容為《一流工作者都在用的待辦清單》的節錄。掌握核心的原則，才能根據每個人不同的情況去做變化，依照自己的需求，就設計出最適合自己的系統！而我自己是如何利用這些原則，並搭配工具Notion來打造自己的Kanban based的待辦系統，可以參考我的另一篇文章: 如何使用Notion打造Kanban based的待辦清單感謝您的閱讀～希望以上內容對大家有所幫助，並祝福大家都可以朝自己想要的生活前進！掰掰～👋" }, { "title": "STEPN實測: 效率對產出的影響？我應該要升級我的跑鞋嗎？", "url": "/posts/stepn-efficiency-vs-gst-outcome-test/", "categories": "生活", "tags": "crypto, stepn", "date": "2022-04-24 21:40:00 +0800", "snippet": "買了跑鞋開始跑步的大家可能會有些疑問，我應該升級我的跑鞋嗎？升級了之後，點數要加到哪裡呢？今天這篇文章將分享我實測下來的結果，升級並提升效率值後，但每次跑步GST的產出有多少的影響！實測數據以下是我11天的十跑紀錄，每次皆為花費2能量，以5分速(12km/hr)跑10分鐘的GST的紀錄，橫軸為鞋子的效率值，縱軸為GST產出。散佈圖原始數據 效率 產出(GST) 9.7 5.81 14.7 8.08 19.7 8.62 24.7 9.26 25.3 9.69 25.3 9.74 25.3 9.48 27.7 10.4 31.7 11.27 35.7 11.4 35.7 11.83 35.7 11.6 39.7 12.87 39.7 12.26 資產累積的速度讓我們從另一個角度來看是否要升級鞋子增加效率，也就是GST的累積數，分別為三種情況: 完全不升級鞋子 (假設每天產出5.5GST) 持續投入，升級到效率值約為25 (假設每天產出9.5GST) 持續投入，升級到效率值約為35 (假設每天產出11.5GST)可以看到將鞋升到約LV5，也就是效率值大約25的話，雖然前三天賺得幾乎得要再投入，但7天之後，就會彎道超車將不升級的鞋比下去了。如果持續投入到效率值35，15天就可以超過效率值25的鞋，並且之後每天約多產出2GST。結論如果你認為這個項目會持續一兩個月以上都還不會死掉的話，那將鞋子升級到9等會是比較好的做法(如果你有要跑步賺錢的話)，在高上去的等級我就沒有測試了。為什麼是停在9等呢？因為從九升到十會需要30GST，CP值比較低，不過LV10的鞋可以出租，等之後開放出租的時候再來升等吧！想知道完整遊戲收入情況的，可以看我之前寫過的一篇文章: STEPN: 從2022-04-10進場至今的收益紀錄" }, { "title": "STEPN: 從2022-04-10進場至今的收益紀錄", "url": "/posts/stepn-record-everyday-income/", "categories": "生活", "tags": "crypto, stepn", "date": "2022-04-21 13:25:00 +0800", "snippet": "真的可以賺到錢嗎？每天可以賺錢的速度有多快，幾天才可以回本呢？對於還在猶豫不決、思考著到底要不要進場的玩家們，這些大概就是最重要的問題吧！這篇文章紀錄了我從2022-04-10進場，花了多少錢買鞋子，以及後續每天的產出，希望能幫助還在觀望的玩家對實際情形有近一步的了解～投入金額 (4/10)在4/10以10.1SOL購入第一雙runner的鞋子，當時1SOL = 110USD，而1USD = 28.9 NTD，所以投入的金額為32108 NTD。每天產出(持續更新)下圖是Runner的鞋，跑五分速(12km/hr)每天的收益(已扣掉每天維修費)。2022-04-16以12.5SOL購入第二雙LV0鞋，開始做效率測試。2022-04-23點了4點點數到resilience，鞋子損耗從八點變為六點。2022-04-24購入第三雙鞋，達到每天4點能量可以跑20分鐘，後面的時間無法維持五分速，以致收入沒到兩倍😂原始資料 日期 消耗能量 效率 收入 維修支出 淨收入(GST) 2022-04-11 2.2 25.3 8.46 3.24 5.22 2022-04-12 1.8 25.3 8.96 2.88 6.08 2022-04-13 2.0 25.3 9.69 2.88 6.81 2022-04-14 2.0 25.3 9.74 2.88 6.86 2022-04-15 2.0 25.3 9.48 2.88 6.60 2022-04-16 2.0 9.7 5.81 2.72 2.93 2022-04-17 2.0 14.7 8.08 2.88 5.20 2022-04-18 2.0 19.7 8.62 2.88 5.74 2022-04-19 2.0 24.7 9.26 2.88 6.38 2022-04-20 2.0 27.7 10.4 2.88 7.52 2022-04-23 2.0 35.7 11.83 2.40 9.43 2022-04-24 4.0 35.7 22.66 4.92 17.74 2022-04-25 4.0 39.7 24.46 4.92 19.54 2022-04-26 4.0 39.7 24.34 4.92 19.42 2022-04-27 4.0 39.7 23.63 4.92 18.71 2022-04-28 4.0 39.7 24.01 4.92 19.09 2022-04-29 4.0 39.7 24.78 4.92 19.86 2022-04-30 3.0 39.7 17.76 3.69 14.07 2022-05-01 4.0 39.7 24.14 4.92 19.22 2022-05-02 3.0 39.7 17.02 3.69 13.33 2022-05-03 4.0 39.7 24.52 4.92 19.60 2022-05-04 4.0 39.7 23.93 4.92 19.01 2022-05-05 4.0 39.7 23.75 4.92 18.83 2022-05-06 4.0 39.7 23.81 4.92 18.89 2022-05-07 4.0 39.7 24.86 4.92 19.94 2022-05-08 4.0 39.7 25.14 4.92 20.22 2022-05-09 4.0 39.7 23.95 4.92 19.03 2022-05-10 4.0 39.7 23.42 4.92 18.50 2022-05-11 2.0 39.7 11.60 2.46 9.14 總結可以預期在27.7的效率值(LV5的鞋)下，每天可以有7.5GST的進帳，以1GST = 130NTD來算的話，一天有975塊台幣，所以33天就可以回本啦～33天的回本的前提是，效率27.7、LV5的鞋子(runner)，以12km/hr的速度跑(之後再來做跑步速度對賺錢速率的影響的實測)，LV5的鞋可以直接從市場購買，或是自己從LV0開始升上去，但升到LV5需要花費20GST，而且買LV0的鞋通常又比較貴！什麼？！LV0比LV5還要貴！這是為什麼呢？想知道該如何選鞋進場的跑友們，可以參考我之前的一篇文章: STEPN攻略: 想進場跑步該如何挑選鞋子？不只想升到LV5，想繼續往上升級的，可以參考我另一篇寫關於鞋子效率值對賺錢速度的實測: STEPN實測: 效率對產出的影響？我應該要升級我的跑鞋嗎？" }, { "title": "STEPN攻略: 想進場跑步該如何挑選鞋子？", "url": "/posts/stepn-how-to-choose-shoes-to-start/", "categories": "生活", "tags": "crypto, stepn", "date": "2022-04-17 15:49:00 +0800", "snippet": "在考慮進場STEPN邊跑邊賺嗎？對於想買鞋嘗試玩玩看的玩家，買鞋時有哪些點是需要考量及注意的呢？將在這篇文章一一介紹。可以看到上圖，在撰寫這篇文章時(2022-04-16)，最便宜的鞋在市場上的價格已經來到約12SOL，折合美金約為1224USD，台幣為35655NTD。認識鞋子首先我們先要認識鞋子，好知道哪些因素會影響價格，就算有時有些因素不太影響價格，卻會影響到之後跑步賺錢的效率！鞋子有分品質(Quality)，分別為Common、Uncommon、Rare、Epic、Legendary，今天只就Common的鞋討論，因為最便宜的鞋只會是這種😂鞋子基礎數值每雙鞋子都會有四種基礎素質，分別為Efficiency、Luck、Comfort、Resilience，這些數值目前看起來對價格是沒有影響的，一般的鞋子(Common)的這四種素質都會是1-10的隨機分佈，所以一樣的錢買到4個素質都是10的就是最好了啦～而以跑步賺錢效率來說，最直接影響的數值就是Efficiency及Resilience，Efficiency越高跑步時產生的GST越多，而Resilience越高，會讓鞋子不容易壞，需要維修的費用較少！上圖可以看到，左邊的鞋的素質就比右邊的要好上許多。至於素質的影響有多大，可以看這一篇STEPN實測: 效率對產出的影響？我應該要升級我的跑鞋嗎？鞋子等級升等花費鞋子可以升等，隨著等級的增加，所需要花費的GST及時間都會隨著增加，最高可以升到30等，以下先簡單列出1-10等升級所需的花費。 等級 花費GST 累積花費GST 花費時間(小時) 累積花費時間 1 1 1 1 1 2 2 3 2 3 3 3 6 3 6 4 4 10 4 10 5 10 20 5 15 6 6 26 6 21 7 7 33 7 28 8 8 41 8 36 9 9 50 9 45 10 30 80 10 55 升等可以幹嘛呢？Common的鞋子每升一級可以有4點的點數讓你分配到上述的基礎數值上，至於該不該要花GST來升級鞋子以提升之後每天的產出效率，一樣可以看這篇STEPN實測: 效率對產出的影響？我應該要升級我的跑鞋嗎？另外升級還會開通一些功能，升到5級的鞋子才可以開啟鑄造(mint)的功能，10級就可以出租(目前尚未開放)，可以看到市場上的鞋子幾乎不是Lv0就是Lv5，這就是因為5等才可以鑄造的原因，而鑄造次數就是影響鞋子價格最主要的因素。鑄造(mint)次數兩雙5級以上的鞋子再加上一些花費，就可以鑄造出一雙新的鞋子，而每一雙鞋子最多只能鑄造7次。 鞋子等級 鑄造所需花費GST 1 100 2 100 3 150 4 200 5 250 6 300 7 350 舉個例子: 兩雙鑄造次數皆為0的鞋，需花費200GST來鑄造出一雙新鞋 一雙鑄造次數為2，另一雙為0的話，就需要花費100 + 150 = 250GST所以這也就是為什麼LV5的鞋子還比較便宜的原因，因為他們已經被鑄造過兩次了，而第三次的鑄造會比前兩次要多花50GST。結論買一雙Lv5，鑄造次數已經2次的鞋，且Efficiency及Resilience數值好的鞋，是殖利率最高，最快回本的方法(大約30-40天)，鞋子本身比較便宜之後，又幫你免費升級了5次(省了20GST)，讓你跑步時可以賺到更多GST。但如果你想要玩鑄造，持續投入所賺到的GST時，期待鞋子漲價，賣鞋獲利的話，就要小心不要買到鑄造次數已經是2次或甚至是3次的鞋子啦～就像買股票有人是為了賺價差，有人賺股息，根據你的目的及風險偏好，來決定你的投資策略囉～參考資料 STEPN白皮書: 鞋子鑄造 鞋子鑄造計算機" }, { "title": "REST API Design: Pagination", "url": "/posts/restful-api-pagination/", "categories": "Web Development", "tags": "api, http, restful api", "date": "2022-04-14 22:35:00 +0800", "snippet": "為何要Pagination一個response如果資料太多，回應太慢，一定會造成使用者的體驗不佳，進而流失用戶，而pagination就是使reponse回應速度的加快的做法之一。比如說你在用instagram，在探索頁面中一眼看到的貼文可能只有10幾篇，此時你就不需要一次抓回來30篇甚至是更多的貼文資料，藉此來減少用戶等待的時間，只有當用戶繼續將螢幕往下滾時，再抓取下一個10幾篇的資料就好。以下來看看兩種Pagination的做法，offset及keyset:Offset Pagination最基本的做法就是使用offset及limit，一樣的概念在SQL語法中也可以看到:SELECT * FROM items LIMIT 20;而在HTTP API裡，則會像是這樣curl http://api.exmaple.com/items?offset=0&amp;amp;limit=10也有一些服務會使用其他的名字，例如Elasticsearch用的from及size，都是代表一樣的意思，從第幾則資料開始(offset、from)算，總共抓取幾則資料(limit、size)。offset pagination可能的問題 當offset很大時，比如說offset=1000000，API server必須scan一百萬的資料，效能不彰。 再來就是當你的資料持續再增加時，可能會造成一些混亂，以下面的例子為例: GET /items?offset=0&amp;amp;limit=10 增加了5筆資料 再一次GET /items?offset=0&amp;amp;limit=10，結果其中5筆是第一次query裡已經有出現的了 Keyset Pagination不是使用offset，而是使用某個key作為指定的起始點，比如說created_at，HTTP request看起來可能像是這樣curl http://api.exmaple.com/items?limit=10&amp;amp;created_at:lte:2022-04-10T00:00:00只抓取創建時間比2022-04-10T00:00:00還要早的資料，想翻頁時，就將created_at:lte的時間指定為上一次回傳的最後一筆資料的created_at就好了，如此一來，就不會有後來新增的資料跑進來的問題了。而且通常所使用的key在資料庫中會建立索引，也可以避免上述使用offset造成的large database scan的問題。這是RESTful API一系列文章中的一篇，想了解更多關於RESTful API及HTTP的，可以看這篇目錄:RESTful API Design — A practical guide感謝您的閱讀~期待下次見！" }, { "title": "如何開始開發你的API: API first principle and OpenAPI", "url": "/posts/api-first-principle-openapi/", "categories": "Web Development", "tags": "api, http, restful api, openapi", "date": "2022-04-09 12:50:00 +0800", "snippet": "API first在一頭熱開始寫code實作你的API service之前，應該首先要關注API中的I字，也就是interface，interface是作為服務提供者及服務使用者溝通的介面，為什麼要首先定義好interface呢？有幾下幾個好處:更早得到回饋為什麼要寫API，總是因為有人要用嘛～有人希望我們提供某些服務，而API就是使用這些服務的入口及介面，如果我們可以在開工之前，就先把介面設計定義好，並交給客戶，如此一來，客戶們就可以先看看我們所提供的介面好不好用，有沒有任何的問題，想要的功能有沒有齊全，如果有需要修改或增減的地方，就能儘早地得到回饋！在真正投入心血開發之前，導正方向～更穩定由於上述的原因，我們的介面就會更穩定，更少需要變動，整個系統以更容易去維護。介面的變動往往牽涉到多方人員，越多人依賴這個介面，一旦要改動就麻煩了，所牽涉的層面就越廣。但也並不是說介面就一定不會變，在整個產品的生命週期中，一定會經歷持續改善的過程，可能要加新功能，，或是發現有更好用的介面，只是在我們應該盡最大的努力來維持介面的穩定。併行開發最後，一旦介面定義好了之後，服務提供者及使用者就可以同時針對這個介面來進行工作了，當兩邊都完成各自的工作後，就可以接起來看看有沒有成功，如此一來就可以避免掉使用者苦苦等著提供者完成的窘境。那在完成實作之前，該要先如何描述這個介面呢？這個描述的方法或語言應該要是一個標準，如此一來，各方單位才能看得懂，而這個標準就是OpenAPI。OpenAPIOpenAPI是一個描述RESTful API的標準，藉由寫下OpenAPI的spec檔案，可以讓不管是電腦或是人類的使用者知道，你的API可以做到哪些事，提供了什麼功能及怎麼使用，而不需要再去看source code，或者是真的打打看你的API service來得知！這裡就不詳細說明OpenAPI該怎麼使用了，想了解的去官網查詢～ OpenAPI Specification這是RESTful API一系列文章中的一篇，想了解更多關於RESTful API及HTTP的，可以看這篇目錄: RESTful API Design — A practical guide" }, { "title": "[讀書筆記] 遠距工作模式: 麥肯錫、IBM、英特爾、eBay都在用的職場工作術", "url": "/posts/book-note-remote-work-go/", "categories": "讀書筆記", "tags": "books, life style, remote work, digital nomad", "date": "2022-04-02 22:04:00 +0800", "snippet": "為何要遠距工作？遠距工作有哪些好處？常見會遇到的問題有哪些？該如何解決，不管是以雇主的角度還是以員工的角度，在這本書《遠距工作模式》裡都有提及。為何要遠距工作遠距工作會帶來好處呢？以下從雇主或員工的角度來看待這個問題遠離令人分心的辦公室環境在辦公室中，可能會有各種分心的來源，容易被不斷地打擾，時間被切割成許多的碎片，對於有些需要長時間不被打斷，才能進入狀況的任務，這樣的環境並不適合。當然並不是說其他的地方就沒這問題，在家可能充滿各種誘惑，冰箱裡的零食、小孩或配偶的干擾，但你擁有了在哪裡工作的自主權，就可以更主動地來處理這個問題。省下通勤的時間每天擠在電車、火車裡，或者是開車塞中公路車陣中，這樣的事情實在是很難讓人快樂起來。有些人會把通勤時間拿來利用，我自己也不例外(《原子習慣》應用: 我是如何養成閱讀習慣)，在電車裡閱讀，或是開車的時候邊聽有聲書，不過如果可以好好地在家裡做這些事，不是更棒嗎？😄逃離朝九晚五下午得接小孩放學嗎？去參加小孩在學校裡的活動？或者你是夜貓子想要睡到中午，晚上在火力全開最有效率的工作，做得到這些正式正式彈性上班最棒的好處之一，重要的是工作成果，而非準時打卡。不用擠在都會區大公司的總部集中在都會區，為了取得好的工作機會，必須來到都市，但卻可能犧牲了自由、美妙的鄉間土地與新鮮的空氣，房子那麼貴！交通也擁擠，我們真的願意付出那些金錢代價，換一間鳥籠住嗎？但都市確實有便利的生活及刺激的娛樂，這之間的取捨就看個人喜好了，不過遠距工作提供了另一種可能的選擇。真正的奢華我有個夢想，等到退休之後之後我要幹嘛幹嘛，為何要等到退休呢？！常常就是因為要上班的關係～我想要去到某個雪國，好好地滑雪滑上一個月，精進我的技能，如果是受限於要在某地上班的話，一年可以出國滑個十天好像就很了不起了。不一定要是滑雪，你可能有各種夢想，可能是衝浪、環遊世界、帶小孩去參加各種活動，或者只是多待在家裡陪伴家人，人生並不需要畫分出拼命工作與退休養老的界線！在《一週工作四小時》這本書裡，作者稱這類擁有時間及機動性的族群為新富族，擁有決定何時工作及在哪裡工作的自由，就能使你的財富倍增！延伸閱讀: [讀書筆記] 一週工作4小時: 擺脫朝九晚五的窮忙生活，晉身「新富族」！ 如何不用做額外的工作，就使你的收入倍增世界人才庫當你公司的工作模式不在需要進辦公室時，來自全球的人才都可以為你所用。除了找到人才外，把人才留住也是至關重要的問題，如果不是遠端工作，那有些離職原因可能就是跟工作本身無關的，例如結婚了、受夠這裡的天氣了、想多陪陪家人，或單純想換個新環境？一但遠端工作，好人才就不必離職，也能做他想做的事！省錢省錢並不是遠距工作的主要目標，但如果可以省錢，又何嘗不是件好事呢？在提升了大家的生活品質、還能爭取來自世界各地的人才的同時，提高生產力減少人力及不需要辦公室，都能額外帶來省錢的好處。成果導向在辦公室上班蠻容易會有這樣的問題:準時到公司又晚離開 + 好相處的好人 = 好員工？但其實有可能他根本沒有太多工作的產出，僅憑著他有出現在辦公室又很聽話，就覺得他工作的效率棒棒。一旦實施遠距工作，擁有了在何時何地工作的自由，付出的代價就是需要追蹤任務及回報進度，而公開的工作成果使得有沒有產出就一目瞭然，無所遁形了，雇主也可以更客觀的評量員工的績效，而不只是憑感覺。藉口及問題我怎麼知道員工有沒有在工作?其實如果身為雇主你有這樣的質疑，那你應該一開始就不應該聘請這位員工，如果他真的會偷懶，不管是在辦公室還是在遠處，都一樣會偷懶～而且遠端工作，更容易是成果導向的，避免掉員工其實只是待在辦公室裝忙給你看的這種狀況！家裡充滿誘惑電視機就在那裡，遊樂器也在那邊，冰箱裡有好吃的冰淇淋，還有一堆待洗衣物，家裡有各式各樣的事物可能吸引你，你說要如何在家工作呢？答案很簡單，因為你有工作得做，而你是個負責任的人。另外對抗誘惑最好的方法就是有趣且有成就感的工作，如果使命感不明確，工作太枯燥無味，我想你的問題是該換一份工作，而不是在哪裡工作。當然有時環境就是會有影響，後面內容就有建議可以將工作與私人的空間做出明確的區隔。我現在就要答案如果在辦公室裡，很容易就去打擾別人，其實很多問題可以自己找到答案，或者是先將問題釐清想清楚一點，但如果同事就在你旁邊，隨口就去問他好像沒什麼大不了的，所以容易就會打斷同事專心工作的時間。並不是每個問題都需要立即獲得解答，可以依照事件的緊急程度來決定溝通的管道，不急的問題使用Email，稍微急一點的可以使用些即時通訊的軟體，很急的話就能直接打電話給遠距工作的同事，讓同事自己決定何時回覆的你的訊息，避免在需要一段長時間專心工作的時候被打斷，導致效率降低。一些具體的作法出去社交許多人對於遠距工作的恐懼在於覺得太過孤僻，跟同事跟人都沒有相處互動，但就算在家裡，你也可以跟配偶、子女、家人或是鄰居有高品質的互動，不過工作跟私人時間要區分好就是了。另外沒人說你一定要一直宅著在家裡工作呀～你可以去咖啡廳、共享工作空間、去公園跟路人打籃球，或者是做志工，遠距工作不表示你非得被綁在家裡的書桌前。設立明確界限原先朝九晚五的好處就是上下班容易切分清楚，中間的通勤也能作為緩衝，使得你知道離開辦公室到家裡就可以好好地放鬆，週末的時間，基本上也不會被公事給打擾，而在家工作，你一早醒來在床上打開筆電，回覆電子信箱，接著做早餐然後邊吃邊工作，用完晚餐後，你又覺得好像得跟誰誰誰聯絡一下，可能不小心就從早上七點工作到晚上九點，所以就算是遠距工作，上下班的時間也必須清楚，一來可以讓自己工作時更容易進入狀態及下班時就不要工作，二來也是可以讓你的共事者知道何時是找得到你的時間。而在空間上，在家也要區分出一個區塊是特地用來工作的，要工作就要到那邊去，離開那裡你就是卸載，另外人體工學的基本需求也要好好滿足，有張合適的工作桌、椅子螢幕等等設備，自己的健康自己要顧呀！結論以上從這本書裡，就我比較有感覺的幾個點在這邊跟大家分享，書中還有許多其他的面向及觀點，有興趣的朋友可以去找來看看唷～未來我自己也可能會朝向這方向來調整我的工作模式，想嘗試看看數位遊牧的生活型態，有後續動作及消息，再上來更新！掰掰～👋" }, { "title": "如何在Mac OS中使用command line來將文字複製到剪貼簿", "url": "/posts/mac-os-copy-to-clipboard-using-command-line/", "categories": "Web Development", "tags": "command line", "date": "2022-03-28 20:40:00 +0800", "snippet": "在Mac OS裡，該如何使用command line的指令來將你想要的資料複製到剪貼簿呢？那就是可以透過pbcopy及pbpaste指令，也下為一些例子。複製 複製123 echo 123 | pbcopy 將words.txt檔案中的文字，複製到剪貼簿 cat words.txt | pbcopy 或是 pbcopy &amp;lt; words.txt 貼上 輸出至stdout pbpaste 輸出到檔案裡 pbpaste &amp;gt; some.txt 雖然也可以用滑鼠把想複製的字選起來再按command + C，但有時候就是不想碰到滑鼠！我想這就是工程師的浪漫吧😎" }, { "title": "[讀書筆記] 做自己的生命設計師", "url": "/posts/book-note-designing-your-life/", "categories": "讀書筆記", "tags": "books, life style", "date": "2022-03-23 22:30:00 +0800", "snippet": "我的生活該要怎麼度過呢？找不到喜歡感到熱情的事怎麼辦？對未來的職涯感到迷茫，想要一份我喜歡的、我所熱愛的、最好是有意義，可以改變的世界的工作，該怎麼去進行呢？《做自己的生命設計師》這本書，就是來試著回答上述這些問題，作者在史丹佛大學開設設計人生的課程，將設計思考的工具及心法，應用到你自己的人生當中，讓我們開始學習如何做自己的生命設計師吧！設計思考是什麼設計就是要來解決問題，首先先來看看問題有哪些種類吧！重力問題我最近碰上了一個問題，每每我在騎腳踏車爬坡的時候，那個重力！對就是那個重力！都會死死地把我往下拉，害我要花好大力氣才能登頂，該怎麼辦呢～聽到這樣的問題，大家可能會覺得這人腦子有洞，怎麼會拘泥於這種問題呢？但事實上，這種情況在現實生活中，卻可能是可見的，我們可以看看以下幾個例子： 在我的文化中，以詩人作為職業賺不了錢，我該怎麼辦呢？ 我想回學校讀書當醫生，但那要再花我5-7年的時間，等到可以開始當醫生時，我都40歲了，怎麼辦？以上稱為重力問題，因為是無法行動的問題，無法行動的問題就不是問題，是一個context、一個場景，一個人生的現實面，我們無法或者是非常難去改變它，必須接受它！並且別在這種問題上耗費太多的時間，大家可以思考一下，自己有沒有被某種程度的重力問題所困住了呢？工程問題 vs. 設計問題工程問題是一個封閉的問題，有明確的目標，比如說如何使一座橋樑可以承重1000輛車子，如何讓筆電螢幕轉軸可以轉10000萬不會壞。而設計問題更加開放，事先對於解法別沒有任何的想像跟預設，例如如何使Mac筆電不用搭配滑鼠使用，如何設計一台車，超級美，大家看了會想擁有遊戲也有這樣類似的分類概念，封閉遊戲及開放遊戲，封閉的遊戲像是圍棋、籃球比賽、各種競技運動等等，都是在一定的規則下，追求一個明確的目標；而開放遊戲像是Minecraft、伴家家酒等等，想怎麼玩就怎麼玩，沒有一定對錯輸贏。人生這個遊戲，就是一個開放式的遊戲，並沒有一個明確的目標，所以各種人生的結果都沒有對錯，也沒有好壞，只怕你沒有去活出來！設計思考所針對的問題，就是這種開放問題。設計思考的心態 好奇心: 像個寶寶一樣，帶著好齊心看世界，生活變成一種探索，充滿了各種可能性。 行動導向: 如果想知道自己想做什麼，坐在椅子上想破頭也沒用，去做就對了！多方嘗試，打造原型，試著找出可以解決問題的方案。 重擬問題: 確認自己在解決的問題，是真的該解決的問題 一切都是過程: 別執著於目標，專注過程，隨機應變，可以放掉一開始的點子，也可以放掉還不錯的點子，別害怕失敗，有時搞砸了，反而會發明出意想不到的驚人設計。 通力合作: 幾乎所以偉大的創作及產品，都是集眾人之力打造出來的 設計人生的步驟知道了我們該專注的問題種類、人生的本質，以及設計思考該擁有的心態之後，接下來來看看具體一點的步驟可以怎麼做吧！衡量現況在我們朝向任何目標方現前進之前，首先我們得要知道自己在哪？作者將人生分成四個面向，分別是健康、工作、娛樂、愛，我們可以用幾句話描述這幾個領域的狀態並評分，為每個方面評分，0-10分的話會給幾分，一張圖即能看出哪些方面OK，哪些不OK。以下是作者自己在工作的方面的描述:我在史丹佛大學任教，另外還從事私人顧問工作。我主持做自己的生命設計師工作坊，並擔任社會則任新創公司VOZ的董事，我覺得工作方面的分數為9分!一張圖可以提供判斷，只有自己知道，目前哪些地方OK與不OK，在做完後面的練習、打造原型跟實驗的過程，會不斷地回頭評估衡量，問自己幾個問題: 自己滿意目前四個領域的指標嗎？哪些地方需要採取行動？找到了棘手問題嗎？它是不是重力問題？，總結來說，這個練習的目的就是要回答一個問題:最近過得如何？確定方向在茫茫人生的旅途中，知道了自己在哪裡之後，接下來就是要知道前進的方向了。你有辦法回答: 最近有什麼目標？我在做什麼？一切有什麼目的？意義是什麼？這類的問題嗎？如果不行的話，那該要怎麼做，才能讓自己的人生方向稍微清楚一些呢？工作觀首先要回答你的工作觀是什麼？不是你想做什麼樣的工作，而是你為什麼要工作？如果不知道怎麼下手，可以從以下幾個問題切入： 什麼是好工作? 工作跟個人、他人、社會有什麼關聯？ 工作跟金錢的關係是什麼？ 經歷、成長跟成就感跟工作的關聯呢？就算答案只是為了討生活、賺錢，這樣也沒有錯，在遠古時代，我們的祖先務農種田、打獵採集，就也只是為了填飽肚子，可以生存下去而已。只不過在現在的時代裡，工作越來越多樣多元，也佔據了我們人生中大部分的時間，如果他是一件你覺得好玩的事，或者是有意義的事！那不是更棒嗎～人生觀人生觀就是問: 人生的意義跟目的是什麼？真是個大哉問，或許我們可以把問題簡化為哪些價值觀對你來說重要的，體驗、成長、滿足、名利、個人成就、與家人、社區、世界的關係等等等…大家可以google: list of values，就能看到洋洋灑灑的一堆，Loyalty、Spirituality、Humility、Compassion、Honesty、Kindness、Integrity、Selflessness…從中挑選一些你覺得重要的，作為你的人生信條，而這些價值觀也不是固定不變的，或許在你經歷你的人生過程中，每個階段所重視的會不一樣，也隨著經驗越多，會越來越清楚自己真正想要追求的是什麼？所做所為跟人生觀有無一致常常工作觀、人生觀與所作所為的不一致，就是造成我們不快樂的原因，比如說你是位非常重視環保、永續環境發展的人，結果你卻在一家塑化企業上班！清楚了工作觀及人生觀之後，算是稍微比較知道人生該往哪個方向前進了，不過也就是大概的方向而已，具體的路有千千百百條，該走哪條路呢？讓我們繼續探索下去吧！發想點子該如何想出一些生活上或工作上可以嘗試的點子呢～從現在及過去生活中找 記錄生活: 留心觀察生活中的每個事件從中找出進入心流的時候，心流是什麼呢？就是一種全心投入的狀態，注意不到周遭的事，以及會忘記時間的流逝[1] 觀察過去的經驗: 如果現在的生活真的沒什麼是你喜歡的，那可以回想過去的經驗中，哪段時光是你覺得最棒的卡住了怎麼辦有可能你覺得你的人生就很無趣，無法現在或過去找出可能喜歡的事，那就來瘋狂亂想吧～首先不要批判自己想到的任何點子，扼殺創意，先得出大量的點子再說！ 必須先想出可能會喜歡什麼，才能知道真正會喜歡什麼心智圖發想利用心智圖，以一個詞彙為中心，想出三四個與之有關的詞彙，再對每個新詞彙重複進行一樣的動作，得到三四層的字詞聯想，給自己一個時間限制快速做完，避免大腦的審查機制，以下是G先生做的練習:最後，從最外層的字詞中挑選幾個組合起來，組成兩個可能的點子，從下面心智圖中，或許G先生可以兼職帶領探索營隊，服務喜愛戶外活動的孩子？那不如在海灘上辦個海盜營隊。或是調職到有海灘的分店！打造原型有了方向跟計畫之後，接下來就是要要去實行了，那該怎麼去做呢？並不是一頭熱，拋頭顱灑熱血，一股作氣地All-in下去，如果這樣做的話，會有什麼缺點呢?比如說你想開咖啡廳，就直接租下店面、裝潢、買下設備、雇人、宣傳然後開始營業，這樣可能會非常危險。能不能盈利生存下次是一回事，說不定做了幾個月之後你會發現，其實你喜歡的是好喝的咖啡本身，或者是美美的咖啡廳裝潢，但對於經營一間咖啡廳所要做的其他瑣事都感到非常厭煩，或許專心於製作咖啡當個咖啡師更適合，或者是根本是想當室內設計師🤔原型(prototyping)那該怎麼做呢？就是要打造原型，原型是什麼呢？原型是一個小型的、實驗性質的產品，用來驗證想法或釐清需求，而在人生的道路上，原型就可以驗證自己的點子可不可行，釐清到底是不是自己想要的需求，fail fast and fail forward。有哪些方法？產品的原型，就是用小小的成本來打造，而人生想法的原型該要怎麼去進行呢？有以下幾種方法可以參考: 原型訪談:在真正要做一件事之後，可以先跟已經在做那件的事的人聊聊，通過其他人的經驗及視角，或許會得到一些新的想法，並且更加清楚現實的情況是不是跟自己幻想的一樣，免得是自己腦補太多😂 原型體驗:除了對話，再來就是身體力行，或許可以請朋友帶你體驗她上班一天的生活，或著是無償提供自己的勞力一週，參與某些專案，或者是去實習三個月。 在一開始開咖啡廳的例子中，可能可以先去咖啡廳打工看看，做做看各個面向的工作，來確認自己是否真的喜歡那件事情。 腦力激盪:有時有了長期計畫，卻想不出點子方法或原型來試試，可以腦力激盪來想想。找一群人3-6個，如果可以是一起做奧德賽計畫的夥伴更好 結論好的人生不是用想的想出來的，也不是找出來的，並不會有個工作或是人生在那邊等著你去找到他，找到之後，就像童話故事書裡的王子公主，在一起之後就從此幸福美滿。也不用執著於《靈魂急轉彎》裡的Spark，覺得人生一定有那個一個使命，最適合你的事物在那等著你，你一定要先知道那是什麼，才有辦法過人生。人生有無限種可能，沒有任何一種好過另外一種，首先知道自己的工作觀及人生觀，決定了方向，接著發想出各種可能、做出計畫，最後也是最重要的一步，就是真正地去做他！在做的過程中，邊做邊修正，更加地了解自己。期許大家都能活出豐盛的人生～～🎉延伸閱讀: 成功是什麼? 5本關於自我成長的推薦書單參考資料 《心流: 高手都在研究的最優體驗心理學》" }, { "title": "成功是什麼? 5本關於自我成長的推薦書單", "url": "/posts/self-improvement-books/", "categories": "讀書筆記", "tags": "books, self improvement", "date": "2022-03-22 22:30:00 +0800", "snippet": "人生該怎麼過? 成功是什麼? 我覺得就是從你現在的位置出發，到達你想要的生活，這樣就成功了。所以怎樣才算是成功，對每個人而言都不一樣，因為每個人的目標不同，重視的核心價值觀也不同。邁向成功的公式找到你目標，然後走到底，這樣就成功了，那要怎麼走到底呢?有了目標以後，每天你做出選擇，相對應地有一些行為，但是最好將其變為習慣，否則將難以持之以恆，因為我們的意志力是有限的。然後為了取得進步，不能每次都做一樣的事，必須踏出舒適圈才會有所改變，並且知道有些成果是需要些時間才能顯現。而在這過程中間有許多的曲折及困難，比如說做了幾天就半途而廢，找一堆理由藉口，或是做了一陣子卻看不到成果就放棄了，也可能是一開始有進步，但到了某個階段卻停滯不前了，不知道該如何更進一步，不然就是你覺得好累，沒有力氣能量繼續，又或者是你根本不知道你的目標是什麼? 該往哪裡前進? 也沒有動力前進。在上述每個環節中卡關的，在這裡推薦相對應的書 不想半途而廢: 原子習慣 著急看到成果: 複利效應 停滯不前: 刻意練習 沒有力氣、覺得無趣: 一週工作四小時 找不到人生目標: 做自己的生命設計師 《原子習慣》選擇很重要，但其實人生並沒有那麼多重大的選擇時刻，影響你這個人最多的，是組成你每天生活的習慣。習慣佔據你人生的八、九成，試想一下每天醒來，躺在床上滑一下手機，走去浴室刷牙洗臉，要不要吃早餐，早餐要吃什麼，通勤去上班的路上在做什麼，工作時如何面對同事，面對事情是如何處理，下班了之後要做什麼，要去運動嗎?還是回家躺在沙發上耍廢，該準時就寢嗎？還是東摸摸西摸摸又到了半夜了，跟人聊天會抱怨最近發生的負面的事嗎？上述說的這些事，你都不需要在當下耗費心思去做選擇，而是不假思索地反應出來，但他們就是你現在會成為怎樣的人的根本原因，所以我們要致力於培養好的習慣、去除壞的習慣。你可能也想這麼做，但就是時常失敗，這本書將系統化地分析習慣的基本原理及組成，簡單的說就是: 提示 -&amp;gt; 渴望 -&amp;gt; 回應 -&amp;gt; 獎賞並且從各個面向提出可行動的方案及建議，幫助你過關斬將，培養新的習慣。延伸閱讀: [讀書筆記] 原子習慣: 細微改變帶來巨大成就的實證法則你可以期待獲得什麼? 了解習慣對人生的重要 系統化地分析習慣是如何形成的 該要如何養成好習慣 該要如何去除壞習慣《複利效應》每天微小的改變並不亦察覺，經過時間的累積卻會產生巨大的影響。或許大家都聽過複利效應，應該通常是在財務儲蓄領域上，但這概念可以應用在生活的各個面向上，我們每天做的事，影響可能很小，多吃一片洋芋片、多抽一根菸、晚上熬夜少睡一個小時，造成的影響幾乎無法察覺，但經過時間的累積，改變就會很巨大，這跟上面的原子習慣是相呼應的。你可以期待獲得什麼? 了解複利效應是什麼? 並且適用於人生各個方面 認清世上沒有魔法，唯有努力才有回報 努力的方向要對，如何加速看到成果《刻意練習》 透過刻意練習，善用大腦和身體的適應力，每個人都能改善技能，甚至創造出你本來以為自己沒有的能力，達到顛峰表現。如何在某個領域邁向頂尖、擁有高手級的表現，只要一直一直不斷地做、不斷地練習就好了嗎？其實光是這樣是不夠的，比如說你已經會開車，然後你每天開了好幾個小時的車，但你卻不會因此變成舒馬赫，辛苦的媽媽每天煮三餐，但卻不會因此成為超級大廚。那該要如何刻意練習來持續取得進步呢？這邊簡單地說就是針對你想進步的目標，進行突破目前極限的練習，目標必須明確，而且可以量測或獲得回饋，知道自己確實有在進步並進行修正。你可以期待獲得什麼? 知道大腦是具可塑性的，如何學習及改變 持續取得進步的要素的什麼？ 並不是一萬個小時就好《一週工作四小時》誰說一週要工作四十小時，朝九晚五地待在辦公室，打破社會框架，有錢有閒地實現自己的夢想人們總說等我賺夠了錢我就要怎樣怎樣，等我退休了我就要去做什麼，那何不現在就開始呢？！追求夢想、做自己的興趣及想做的事，不用等到退休，作者提出迷你退休的概念，將大把退休時光平均分散在一生當中，不要盲目地工作、追逐金錢，只將目標放在提早退休上，而是開始漸漸地擺脫不想做的工作，擁抱自由及機動性，開始重拾各種興趣、嘗試你的夢想，否則等到退休那天，你可能也會茫茫然不知道要幹嘛，因為一直以來，從沒有停下來好好思考過。延伸閱讀: [讀書筆記] 一週工作4小時: 擺脫朝九晚五的窮忙生活，晉身「新富族」！ [讀書筆記] 用對能量，你就不會累你可以期待獲得什麼? 認識新富族: 不再朝九晚五待在辦公室工作，擁抱自由及機動性的族群 除去大部分非必要且會花費你時間的事，擁抱更多的自由 打造自動進帳的事業 看看作者的有趣的經歷及如何達成上述目標《做自己的生命設計師》透過打造原型、進行實驗，發想繼而嘗試人生各種可能，才能找到熱情不知道自己的人生要做什麼嗎？第一步就是要去想，隨意的發想，如果你連想都沒想過的話一件事，你不可能會在你的人生中去做那件事，甚至去喜歡他，所以第一步就是發揮想像力，無所限制地記錄下所以可能會喜歡的想法。接著要針對那些想法，打造原型去實驗，什麼是原型呢？在產品設計的領域裡，就是用來驗證設計的產品是否適切，有無欠考量或未發現的盲點，必要時在正式生產前加以更正。而在人生領域中，就是去稍微體驗你想做的事，而不用100%一下子就All in，比如說你喜歡喝咖啡，想開間咖啡廳，那你不應該是馬上辭職，準備個幾百萬就開始要開店，而是可以先透過蒐集資訊、訪談好幾位咖啡店店長、去打工、或是做一下咖啡廳裡各個職位的工作，來測試自己有沒有盲點，到底是不是真的喜歡這件事。你可以期待獲得什麼? 人生迷惘怎麼辦 該如何去發想，找出可能會喜歡的事 該如何打造原型，去測試自己的新的人生延伸閱讀: [讀書筆記] 做自己的生命設計師Summary感謝你看到這邊～ 希望這些內容能帶給你一點啟發，我也是閱讀這些書過後，學習到了許多及產生很多新的想法，但更重要的是將其實踐在生活當中，首先先透過書寫分享，讓自己複習一遍，之後有更多親身實驗的結果，會在跟大家分享! 掰掰～👋" }, { "title": "[Golang] 4種發起HTTP請求的方式", "url": "/posts/golang-how-to-make-http-requests/", "categories": "Web Development", "tags": "golang, http", "date": "2022-03-18 11:00:00 +0800", "snippet": "這篇文章將介紹如何使用golang作為http client，來發起http request，將介紹以下4種做法: http.Get http.Post http.PostForm http.NewRequest一個HTTP Request message不外乎就是method、url、headers跟body，如果對於HTTP message還不熟悉的，可以看我之前寫過的文章:HTTP 簡介，以及使用telnet、nc、curl等指令來探索http.Getfunc Get(url string) (resp *Response, err error)參數為一個url，沒有headers，也沒有body，就是這麼簡單，如果想要客制化自己的header，就必須使用後面的http.NewRequest。http.Postfunc Post(url, contentType string, body io.Reader) (resp *Response, err error)參數為url, contentType及body，headers的部分，除了Content-Type之外的，也無法自己自訂，而body是一個io.Reader，以下是一個Content-Type為appplication/json的例子:jsonString := `{&quot;email&quot;: &quot;test@homuchen.com&quot;, &quot;name&quot;: &quot;homuchen&quot;}`http.Post(&quot;http://localhost:5000/api/users&quot;, &quot;application/json&quot;, bytes.NewReader([]byte(jsonString)))伺服器端將會收到以下的HTTP message:POST /api/users HTTP/1.1Host: localhost:5000User-Agent: Go-http-client/1.1Content-Length: 27Content-Type: application/jsonAccept-Encoding: gzip{&quot;email&quot;: &quot;test@gmail.com&quot;}http.PostFormfunc PostForm(url string, data url.Values) (resp *Response, err error)Header Content-Type會被自動設為application/x-www-form-urlencoded，body是使用url.Values來傳遞，以下為一個範例://直接使用字串qs, _ := url.ParseQuery(&quot;email=test@homuchen.com&amp;amp;name=homuchen&quot;)http.PostForm(&quot;http://localhost:5000/api/users&quot;, qs)//使用mapv := make(map[string][]string)v[&quot;email&quot;] = []string{&quot;test@homuchen.com&quot;}v[&quot;name&quot;] = []string{&quot;homuchen&quot;}qs := url.Values(v)http.PostForm(&quot;http://localhost:5000/api/users&quot;, qs)以上兩個Reqeust，都會產上下列一樣的HTTP message:POST /api/users HTTP/1.1Host: localhost:5000User-Agent: Go-http-client/1.1Content-Length: 39Content-Type: application/x-www-form-urlencodedAccept-Encoding: gzipemail=test%40homuchen.com&amp;amp;name=homuchenhttp.NewRequestfunc NewRequest(method, url string, body io.Reader) (*Request, error)如果想要客制自己的headers就必須使用NewRequest拉，方法如下:req, err := http.NewRequest(&quot;GET&quot;, &quot;http://localhost:5000&quot;, nil)req.Header.Add(&quot;Content-Type&quot;, &quot;application/json&quot;)req.Header.Add(&quot;Accept-Language&quot;, &quot;en-us&quot;)req.Header.Add(&quot;X-Some-Custom-Header&quot;, &quot;foo bar&quot;)最後要發起HTTP請求，則要使用http.Client的Domethod，以下使用http.DefaultClient作為http.Client，至於要如何使用自己的http.Client就不在此多說拉～jsonString := `{&quot;email&quot;: &quot;test@homuchen.com&quot;, &quot;name&quot;: &quot;homuchen&quot;}`req, err := http.NewRequest(&quot;GET&quot;, &quot;http://localhost:5000/api/users&quot;, bytes.NewReader([]byte(jsonString)))req.Header.Add(&quot;Content-Type&quot;, &quot;application/json&quot;)res, err := http.DefaultClient.Do(req)如此一來就會發送出一個跟前面例子一樣的HTTP RequestSummary今天介紹了四種發起HTTP Request的方法，前面三種的彈性比較低但比較方便，有固定的method及content-type，無法隨意更改及加減。而其實http.Get就是http.Client的Getmethod，http.Post為http.Client的Postmethod，http.PostForm是http.Client的PostFormmethod。最後如果想要加上自己更多的header，就要使用http.NewRequest，這邊簡單地記錄下使用golang作為http client最基礎的用法，希望有幫助到任何人，掰掰～👋" }, { "title": "動機: 到底是什麼在驅動、引導我們的行為？", "url": "/posts/motivation-what-motivates-us/", "categories": "讀書筆記", "tags": "self improvement, psychology, books", "date": "2022-03-13 23:05:00 +0800", "snippet": "我們每天都有許多的行為，不論是認真學習新技能、努力工作、躺在沙發耍廢看劇吃著垃圾食物、出門跟朋友去露營、做志工等等等…背後都有一股力量在驅動著我們，那股力量就是獎賞及懲罰，我們會為了追求某些獎賞或是避免某些懲罰而去做出某些行為。但有些實驗卻發現，有時就算是沒有任何獎賞或是懲罰，我們也會想做某些事，甚至有時有了獎賞，反而還會減少我們的動力！今天將從以下幾個面向，來分析驅動著我們行為的那股力量，看看獎賞懲罰系統有哪些組成，除此之外還有哪些力量在驅動著我們，最後從腦神經科學的角度來看這一切： 獎賞及懲罰: 生理面 獎賞及懲罰: 社會面 獎賞之外的動機 有獎賞反而表現更差 什麼時候外部的動機是有用的？ 內部動機: 自主性、專精及意義生理面的獎賞首先是生理的、本能的、為了生存的，也是最顯而易見的一種動機。我們餓了就會去找東西吃；口渴了就會去喝水；為了生存下去，食物、水、空氣、陽光、性等等等都是必須的。我們的身體被打造成一但基本需求無法滿足，我們就會產生強烈的渴望去做這些事情。但這就是全部的我們嗎？絕對不是！沒有人會說驅動我們所有行為的都是這類動機，這樣我們跟動物有什麼不一樣呢？社會面的獎賞及懲罰而獎賞及懲罰的另外一面是社會性的，我們努力讀書是為了考高分，或是得到父母的稱讚、會為了獲得一份好工作而努力，因為期待有著更多的收入，這類動機不單純是為了生存的，我們不做這些也不會死，可以軟爛地茶來張口、飯來伸手、不求上進地在原本職務上完成本分就好。為什麼我們會想賺更多錢，除了提供更好的生活品質之外(生理的)，賺更多錢也可能代表者更有能力，社會地位較高，大家對你的評價會是有能力的，可靠的，這些就是社會性的獎賞。另外我們還會避免社會處罰，比如說不想被大家說閒話，所以我們表現的行為得符合社會期待、合乎社會規範，因此必須抑制上述所說的第一種動機，不能因為我們餓了，我就去吃別人的食物；不能因為我想做愛，就隨便在路上強暴別人。做這樣的行為在法律上、社會上是會有處罰的，因為這種為了在社會裡生存的動機，規範了我們的行為。獎賞之外的動機在過去幾百年來，我們都是在這樣的想法下生活，但我們想要激勵自己或是別人去做某些行為時，我們的做法通常都是威脅利誘，但這就是全部了嗎？猴子解謎遊戲讓我們來看看幾個實驗，在很久很久以前，有個人在猴子做了身上做了個實驗，把他們跟一個解謎遊戲放在一起，沒有任何訓練跟獎賞，結果發現猴子就是會自己去玩、去解決那個問題(將下圖的裝置從左圖變成右圖)，並且變得越來越熟練這就引出了一個問題，即使沒有生存上的需要，也沒有外部的獎賞及處罰，還是有一個驅力在驅動著猴子的行為，那這股力量這到底是什麼呢?有時我們就是會在沒有外部獎勵的時候去做一些事情，純粹就是為了好玩、樂趣、好奇、挑戰、成就及滿足。有獎賞反而表現更差常常我們希望提供獎勵、誘因來鼓勵一些行為，但有時卻會識得其反！提供了獎勵之後，反而讓人之後更不會去從事某些行為。讓我們來看看以下這一個實驗:首先實驗人員先去幼兒園觀察一群孩子，看看他們自由的下課時間都會做些什麼，結果發現有一群小孩都會畫畫，他們就把那一群小孩挑出來，作為實驗對象。實驗如此進行，將他們分為3組，第一組告訴他們畫畫的話，就給你們獎勵唷～～ 於是他們開始畫，畫完之後給獎勵；第二組則是放他們自己去玩，結束後，如果有畫畫的就一樣給獎勵；第三組則是什麼事都沒干預。因為他們原本就就都愛畫畫，所以就都有畫，拿到相對應的獎勵後就放他們回去，然後繼續觀察他們的行為。結果發現！第一組的小孩畫的變少了！！而第二及第三組都沒有變，所以差別是什麼呢？並不是有無獎勵與否，而是有沒有如果怎樣就給你什麼的這種獎勵，當小孩為了得到獎勵才去畫畫時，這樣的外部獎勵反而削弱了原本純粹的動機…內部動機有哪些所以除了外部的誘因獎賞之外，我們可能純粹為了好玩、樂趣、好奇、挑戰、成就及滿足等等的內部的動機去做一些事情，這裡將簡單地把內部動機做一個分類，分成三類，分別為: 自主性、熟練及 意義。自主性(Autonomy)不知道大家有沒有這樣的經驗，自己本來會去做好的事，一旦媽媽碎念叫你去做那一件事，你就反而肚爛不想做了😂我們人就是不喜歡被操控被命令，相較於被命令的行動，我們對於基於我們自主意志而採取的行動更有動力去做，當員工不在被監督，可以用自己的喜歡的方式，在自己喜歡的時間、地點工作時，會更具有生產力。Google的20%時間，就是給員工20%的工作時間，讓他們自己自己決定要做怎樣的project，結果是許多的產品及服務都是在這些時間裡誕生出來的，像是Adsense、Gmail、Google News等等…熟練(Matery)有時玩遊戲，贏了也不會得到什麼獎勵，但我們就是會想要破關，不斷地一直去練習他熟練他，或許我們天生就是喜歡去精進一些能力。有份論文，調查訪談了幾百位開源軟體的程式開發人員，到底是什麼因素，使得他們願意無償地為這些專案付出時間及勞力，結果發現，在有薪及無薪的開發人員中，他們為什麼投入開源專案開發的原因，有顯著差異的部分就是為了增進寫程式的技能[1]。意義(Meaning、Purpose)意義對每個人來說都是不一樣的，找到一份比你自身更大的事物，歸屬於此並擁有使命感，能帶來很大的動力。有人可能致力於地球環境保育、永續能源，有人可能關心下一代的教育、或者是老人家的照顧需求、性別平權、勞工權益等等的議題，而加入各式各樣的機構，與目標理念一致的人一起努力奮鬥是很棒的一件事。但大部分的人，可能不知道自己的使命，甚至是說人生的意義，這也沒關係！我自己也是還不知道這部分的答案，或許我們還在探索的階段，現在能做的，可能就像是《做自己的生命設計師》說的，首先先幻想！接著挑幾個想法來打造原型實驗看看，唯有試過做過之後，才能對於自己想要的人生有更清楚的描繪及方向。總結外部的獎賞及處罰，確實會驅動我們的行為，但我們並不全然是這樣的行動的，甚至有些時候，還會反過來損害我們的動機，以上是來自《動機，單純的力量》一書的部分簡單摘要。參考資料 Why Hackers Do What They Do: Understanding Motivation and Effort in Free/Open Source Software Projects" }, { "title": "[讀書筆記] 更快樂：哈佛最受歡迎的一堂課", "url": "/posts/book-note-happier/", "categories": "讀書筆記", "tags": "books, life style, self improvement, psychology", "date": "2022-02-09 21:19:00 +0800", "snippet": "作者於2002年在哈佛大學開始講授 正向心理學，這門課主要探討的問題就是: 如何幫助自己和別人活得更快樂？第一年只有8人選修，6人退選，第二年學生多達380人，第三度開課時，有855名學生註冊，成為哈佛選修人數最多的科目。該如何解釋哈佛大學的學生對正向心理學的需求日益殷切的現象？大家對快樂學越來越感興趣？是現代人越來越憂鬱嗎？(雖然事實上是如此[1])還是新的教育方式或生活型態的影響？其實『快樂學』並不是現代的產物，從柏拉圖、亞里斯多德、各種宗教及哲學體系、到現在許多市面上的自助書籍，無不想探討快樂的問題，而正向心理學，泛指 『研究人類最佳心理運作狀態的學問』，作為學術象牙塔及社會大眾間的橋樑，結合了嚴謹的學術研究及有趣的自助運動。你快樂嗎?當我告訴我朋友我正在看正向心理學的相關書籍時，他們就會問我: 你不快樂嗎？😂，好像擔心我會不會跑去自殺似的，然而我快樂嗎？這個問題其實我也回答不出來，不知道該要如何去定義及量測快樂，也就無法回答出我到底快不快樂的這個問題。那我們該要如何學習快樂呢？如果無法得知我們到底快不快樂，怎們知道我們的學習有沒有成果呢？作者對這問題的回答是這樣的: 與其問「你快樂嗎?」這樣的是非題，不如問該「怎麼做可以變得更快樂？」，你快樂嗎？是個是非題，答案要不是快樂就是不快樂，這意味著快樂只是某段旅程的終點，一旦抵達了這個定點，旅程就結束了。然後這個定點並不存在，我們永遠都可以活的更快樂，沒人可以時時刻刻都幸福無比，所以與其問你快樂嗎？不如問怎麼做才能活得更快樂？追求快樂是個持續進行的過程，今天的我比五年前的我快樂，但願五年後的我比今天的我快樂。未來還是現在?我該做一份人人欣羨，薪水很高但我不喜歡的工作，還是應該做自己喜歡但薪水不高的工作呢？是要先忍耐個幾年，有了穩定的經濟基礎後再去追求夢想，還是要毅然決然地踏上追夢的旅程？著名的米歇爾棉花糖實驗[2]，顯示了能夠延遲享樂的小孩，未來的成就比較高，但這說明我們該延遲享樂嗎？或者是應該要推遲到什麼時候呢？四種生活類型作者在這裡提供了一個模型來描述四種生活類型:橫軸為現在，越右邊代表對現在越有好處，縱軸為未來，越上面代表你所做的選擇是對未來有好處的，反之亦然，接下來我們就一個一個象限來看看吧，也可以想想自己是否在人生的某個時期，這樣地生活著。拼命三郎坐落在左上角的區塊，這一種生活型態做的事都是為了未來的利益，而延遲了立即的享樂，我們把它稱為拼命三郎型。好好讀書～等考到好大學就輕鬆囉；等上了大學，還要好好顧好成績，參加活動好好實習，才能進到好公司擁有好工作；等工作之後，繼續埋頭苦幹，期待著升遷加薪，好好存錢，等到退休或是提早退休之後就爽了！這種生活型態的人總是在追求著未來的目標，而不是當下的體驗，以為達到目標之後就會開心快樂。的確沒錯，當我們考上好大學放榜的那一瞬間，被錄取升職加薪的那一刻的確很爽，但這樣的快樂卻只能持續一陣子，緊接著我們又為著下一個目標繼續打拼。社會獎勵結果，而不在乎過程，家長老師總說著要考高分，升學找到好工作，卻不太強調學習本身的樂趣；大家都想要找一份薪水高，大家稱羨的工作，而不是去做自己喜愛的事，就如美國哲學家愛默生所說的: 「我們一直想著未來要過什麼樣的生活，但是到頭來，卻像沒有真正活過一樣。」享樂主義跟拼命三郎相反，總是追求當下立即的享樂，而不顧未來長遠的利益。不停地吃下垃圾食物，不想工作一直窩在被窩裡看劇都是這一類的生活類型，以為幸福的人生就是一連串的享樂經驗，但真的是如此嗎?有項心理實驗是以下這樣:他們付費給一些大學生，對他們的要求是什麼都不能做。他們的基本需求得以滿足，但是被禁止做任何工作。幾個小時之後，這些大學生就開始感到沮喪，儘管參與研究的收入非常可觀，但他們寧可放棄參與實驗而選擇其他壓力大、收入沒那麼多的工作。虛無主義這一區塊最慘，放棄追尋快樂，覺得人生也沒有意義，賽利格曼的習得性無助(learned helplessness)[3]描述了這一類覺得做什麼努力都徒勞無功的人。一開始我覺得怎麼會有人是落在這個區塊，再怎樣，至少也可以當個及時行樂的人吧，但仔細想想，我也有過短暫時刻變成這類的人，也就是在一直的享樂耍廢過後，連要做什麼來耍廢都不知道了！劇看到不知道要看什麼；遊戲打到很生氣，隊友都是雷包；覺得日子空虛，不知道到底要幹什麼😂快樂開朗型所以到底該立即享樂，還是為了未來的利益忍耐打拼呢？ PTT鄉民: 「小孩子才做選擇，我全都要！」拼命三郎以為達到未來的目標就能快樂，而享樂主義以為只有享樂的過程才是重要的，其實應該是要懂的享受追求目標的過程(後面會講到關於設定目標的重要)。但有時總有些活動無法同時兼顧現在及未來的利益，像是為了考試K書、儲蓄、加班趕工，這時可以穿插一下偶爾享樂的活動是有幫助的，能讓我們添加活力，冥想、休息、散步、發呆、悠閒地躺在海邊、看劇、玩遊戲等等，如果無法找到能夠兼顧現在及未來利益的活動，不妨就將兩種活動穿插進行。延伸閱讀:[讀書筆記] 用對能量，你就不會累快樂是什麼？每個人在人生的不同時期，或是不同的事情上，都或多或少會有上面四種的生活型態，而作者認為的快樂就是要有樂趣，也要有意義，要兼顧現在以及未來，也就是坐落在快樂開朗型的生活型態。樂趣是指我們目前感受的正面情緒，是現在的好處； 意義則伴隨使命感而來，代表所作所為對將來的好處。何謂樂趣?正向情緒，也就是我們的感覺，愉悅、高興、極樂、狂喜、滿足、溫暖、舒服等等等…，追求正向情緒是我們的本能天性，應該沒有人懷疑為什麼我們會想追求正向情緒吧？何謂意義?意義是你的歸屬感、使命感，這個東西帶給你超越他本身的價值。每個人會從不同的事物裡尋找意義，可能是開創事業、環保愛地球、養兒育女、寫程式🤔等等，重點是要符合自己的價值觀及特殊嗜好，而不是順從他人或是社會的期望。只懂的尋找樂趣，無法得到快樂；一昧地尋求意義，也無法得到快樂。假如為某個行動找到了意義，但這項行動卻無法提供立即的滿足，那也無法持之以恆。目標目標與快樂的關係目標的作用，可以讓你活在當下，不會擔憂未來，也不後悔過去，提供你一個指引，知道現在走的每一步都是朝著正確的方向前進，如此一來可以更加地享受過程。有了目標，但我們的心思卻不是應該要一直看著目標，如果一昧地看著目標會很辛苦，我們的快樂在於享受過程，朝著目標一步一步前進的過程，而不是達到目標時的快樂。當然在達成目標時一定會很快樂、狂喜，但這種感覺沒辦法持續，回想一下你考上大學，成功被好公司錄取的那天，快樂的感覺持續了多久呢？幾天還是幾個月，不論如何，他應該沒有持續到現在吧！因為人就是一個會習慣的動物，不管是快樂還是痛苦，有個研究是中樂透的人跟腳被截肢的人，在一段時間過後，他們快樂的水平都回到了事發之前的水準，這樣的現象稱為享樂跑步機(Hedonic treadmill)也稱為享樂適應性。結論該要如何才能變得更快樂？這是一個普世的問題，不論你是任何種族、來自任何國家、成長於何種文化、及環境、處於何種階層，都會希望生活過得更幸福圓滿。這本書有一句話我覺得是貫穿整本書的重點，就是: 要有樂趣，也要有意義，無盡的享樂會感到空虛，久了也會不快樂，而只有追尋意義、成就，容易成為拼命三郎那樣，只看著未來的目標，忘了去享受當下。要找到個人的意義，需要有充分地對自己了解及認知，知道自己所重視的價值觀及長處，能夠活出言行一致、發揮長處的生活，當你的生活充斥著各種與你價值觀相矛盾的事時，必定是不會快樂的。這本書後面的章節，還有討論在教育、職場及感情上的應用，不過基本的原則就是上述的這些，有興趣的人可以再去看看唷～參考資料 台灣憂鬱用藥數據 米歇爾-棉花糖實驗 賽利格曼-習得性無助" }, { "title": "《原子習慣》應用: 我是如何養成閱讀習慣", "url": "/posts/how-i-keep-reading/", "categories": "生活", "tags": "self improvement, life style, books", "date": "2021-12-09 21:03:00 +0800", "snippet": "出社會以前，完全沒有在看課外讀物的我，是如何養成現在每天都會閱讀的習慣，雖然閱讀的時間不多，大約每天30-60分鐘，但跟以前的我相比，已經是巨大的進步了～這篇文章將依據《原子習慣》所提出的框架，提示 -&amp;gt; 渴望 -&amp;gt; 回應 -&amp;gt; 獎賞，來分析我閱讀習慣的各個面向，算是原子習慣的應用案例～如果沒看過這本書的也可以看看我之前寫的文章:[讀書筆記] 原子習慣: 細微改變帶來巨大成就的實證法則提示環境中的提示對你有淺移默化的影響，你無法輕易地待在一個滿是垃圾食物的環境，然後一直靠意志力不去吃零食，另外也可以觀察目前的生活上，選擇一些已有的習慣作為提示，將想要培養的習斷堆疊在後面。以下分享我如何利用環境及習慣堆疊來達成閱讀的習慣: 環境: 因為我每天通勤都需要搭捷運，所以我就選擇了這個環境來讀書，因為在捷運上，除了滑手機就沒有其他提示及誘惑使你分心。 習慣堆疊: 上捷運站好就位，接著下一步就是拿出書來看，最後讓這個動作不假思索。渴望提示出現之後，你會產生渴望，比如說晚上下班回到家裡，會有想要明亮燈光的渴望;一到了Friday night會有想要放鬆的渴望，那我上捷運會有想要看書的渴望嗎？ 沒有…但是上捷運會有想要打發這幾十分鐘無聊時間的渴望，所以大部分人的回應都是滑手機，那該怎麼辦呢？ 其實沒有渴望就是沒有，也沒關係，再從其他面向著手就好，或者是你自己可以做渴望綑綁，也就是做完想要培養的習慣之後，可以做其他你本來就想要做的事，比如說看完15分鐘書後，才可以滑手機。另外我有想到另一個渴望就是耍帥，捷運上不乏許多正妹，可以看看書，展現一下自己知性上進的一面XD有個IG帳號hotdudesreading專門收集在車上看書的帥哥們，大概也是一樣的概念😄回應有了渴望之後，接著就是回應，也就是你如何採取行動去回應滿足你的渴望，要養成一個新習慣，最好是讓它非常容易去執行。我在捷運上看書的情形，就是每次只要看15分鐘！ 就是15分鐘! 不多不少，因為車到站了就要下車了。比起一開始一頭熱，狂看1小時，結果持續不到幾週，持續每天都看15分鐘還要來得更好，無需費力的進行了幾年之後，累積的成果也是很可觀，重複勝於時間，次數勝於質量。獎賞做完一個習慣後，如果我們得到了獎賞便會增強這個習慣，而且越立即的獎賞越好。我們可以看到許多壞習慣之所以那麼容易養成，就是因為獎賞來的立即，比如說抽煙、垃圾食物在你吸了、吃了一口之後，尼古丁、高糖、高鹽的獎賞就馬上來了，而會影響健康的後果可能在好幾年後才顯現。如果沒有立即的獎賞怎麼辦? 那就自己創造! 我用的方法就是紀錄，紀錄本身也是一種獎賞，因為每次的勝利在紀錄上可以記上一筆時，會帶來成就感，而且你也會不想讓一連串的紀錄中斷。我使用的紀錄APP是種樹APPForest 專注森林，有點像是蕃茄鐘工作法的概念，在種樹期間不能使用其他APP，而且還會幫你種真的樹唷。總結今天簡單地分享我是如何應用上《原子習慣》所提出的框架，來培養閱讀習慣，雖然每天讀的時間不多，但持之以恆才是更重要的。感謝您的閱讀，掰掰～👋延伸閱讀 [讀書筆記] 原子習慣: 細微改變帶來巨大成就的實證法則 懶人早餐: 15分鐘，高纖高蛋白低碳水" }, { "title": "[System Design] 淺談Database Replication，有何優缺點、做法及何處可見?", "url": "/posts/what-and-why-database-replication-advantage-and-disadvantage/", "categories": "Web Development", "tags": "system design, database", "date": "2021-11-28 17:00:00 +0800", "snippet": "什麼是database replication?顧名思義就是將一份資料，複製成多份，並把它放到不同的機器上，好像也沒什麼好說的🤪，接著會看看為什麼要做複製，它會帶來什麼好處及壞處，再看看要如何做到replication，最後看看在RDBMS、NoSQL或是你自己的系統，是怎麼應用這些概念的。為何要replication資料備份把一份資料變成多份放到不同的地方，最明顯的好處就是備份，當你的機器壞掉，如果硬碟沒壞，其實重啟之後資料還是在那邊，但就怕你的機器整組壞光光，或是就是硬碟爆了無法再使用，此時如果資料有複製道別台機器上，就不用怕會有資料的丟失。讀取效能資料都在同一台機器時，所有的讀取查詢都必須經由這台機器來完成，一台機器總有他的瓶頸，一台不行，那你有試過兩台嗎？三台四台五台嗎～對於讀取效能的增進，主要有兩個方向，分別是吞吐量(throughput)及延遲時間(latency)。 read throughput:複製了N份，我就有N台機器可以供我查詢拉，平均分散所有的查詢請求到N台機器上，預期最多就可以有N倍的throughput。 read latency:另外也可以把一些機器放到離user近一點的地方，減少網路封包來回的時間，降低latency， Replication帶來的缺點儲存空間想當然爾，複製了幾份的資料就需要多幾份的磁碟的空間，不過現在硬碟越來越便宜的時代，應該不是個大問題。資料的不一致不一致的主要來源就是兩種: replication和concurrent write，試想一下資料如果只有單一來源，那要跟誰不一致呢？反之，因為有了replica，每份複製要如何保持同步及一致就會是個問題? 會造成什麼consistency的問題，後面會在陸續討論。How接下來，我們來看看要如何複製。假設你今天有一份檔案，不會再修改，那就直接將檔案複製一份放到另一台機器上供使用者去讀取，那不就做完了嗎～沒錯！就是這個簡單，所以問題是什麼呢？ 問題就在於我們會不斷地修改檔案，資料庫會不斷地接收使用者的insert、update，這時要如何保持多處資料的同步一致呢?Master Slave首先，我們先定義幾個名詞，master為可以接受資料寫入修改的節點，而slave就是存放複製的檔案的地方，只負責被讀取，並不會從slave中寫入資料。資料要從master被複製到slave，最簡單的可能就像是直接cp，scp，或是你寫備份script，每天固定時間將DB裡的資料寫到另一台DB。另外現在許多資料庫都有提供change data capture的功能: 每當一有資料寫入時，就會通知你，這有點像是是在application level的trigger，像是MangoDB的Change Streams或是AWS Dynamo的Streams。而RDBMS也有類似的功能，像是postgreSQL的WAL、MySQL的Binlog，如果是cluster的，內部可能也是利用上述的機制來做複製及備份。Replication lag資料要從發生寫入的地方，複製到另一個地方，這中間的時間差就是replication lag，可能是每天將整個資料庫的檔案做一次備份到別台機器，那lag最長就是一天;如果是在每筆資料寫入的時候，就立即透過網路寫入同一筆資料到另一備份中(透過剛剛說的change data capture)，那lag可能就是幾毫秒。Lag造成不一致如上所述，資料寫入後、在replication lag這段時間內，多份的複製間並還沒有同步，也就是說他們是不一樣的！不一樣就是不一致！就會有些問題。這裡舉兩個例子inconsistency的例子，就是會無法達成read your write consistency及monotonic read consistency， read your write: 寫入一筆資料後在讀取，卻讀不到你剛剛些入的資料，而是取得舊的資料。如上圖，當你寫入一筆c=3的資料後，資料尚未從master複製到slave，但你馬上從slave讀取，就讀取不到。 monotonic read: 連續的讀取，讀到最新的資料後，接著又讀到舊的資料，經歷了時間上的倒退。如上圖，當你讀取c的值時，首先讀到3的值，接著再讀一次反而不見了。 因為你不知道你是從master還是slave中讀取資料，如果master剛剛接受的新的更新寫入還沒複製到slave，則slave上的資料就是舊的，從slave讀取就會導致讀不到你剛剛寫入的資料。解決方法 只從master讀取: 但這好像就失去了複製到slave的好處了，read throughput沒有增加，只剩下備份的好處。 當讀自己寫的資料時，從master讀取: 如此一來可以保證有read your write consistency，但你要額外判斷query是不是要取得自己的資料。為何要知道這些呢?知道NoSQL的用法比如說MongoDB的write有各種設定[1]，w option可以設為0、1或majority，你知道他們的區別及取捨嗎?其核心的概念就是今天所討論的replication所造成的consistency及durability的問題，之後有機會再單獨寫一篇講MongoDB的write concern(TODO)。自己的系統也會有replication隨著系統越來越複雜，你可能也會使用到多個資料產品，比如說你有個主要的資料庫，使用者流量越來越大已不堪負荷，可能需要做讀寫分離，另外還有像是用elasticsearch等搜尋引擎，用redis作為cache，這些都是一份資料可能同時需要存在許多地方，廣義上來說，也都是replicaton，以下我們看看cache及讀寫分離這兩個例子。Cache常見的做法可能會是加一台cache database，像是redis，這也是一種replication，因為你把資料從主要的資料庫裡複製了一份到redis上。這時候你就有很多事要決定了，要用cache還是本來的資料庫作為master，也就是說一開始寫入的地方要發生在哪裡: cache還是main database?還有要多久將兩份資料同步，也就是replication lag會是多久，可能會有lag也可以沒有，這一切的決定就會衍伸出有cache aside、read through、write through、write back等等等的架構設計，延伸閱讀:淺談各種資料庫cache策略: cache aside、read through、write through、write back讀寫分離當你的RDBMS資料庫無法再負荷的了大量的寫入或查詢時，或許你有聽過讀寫分離，就是所有寫入的操作只能在某一台資料庫發生，也就是今天所說的master，而其他的查詢都透過slave，其實我也沒有實際做過，但核心的概念就是今天所講的replication。其他CDN、DNS廣義上CDN及DNS都有replication的概念，將檔案或DNS record複製到鄰近user的機器上，DNS甚至複製到了user的本地機器裡，可以看到他們為了支持更好的read performance，不管是latency還是throughput，而採用了這樣的架構設計，換來的是inconsistency的問題，就像是DNS record的更新，通常要花上幾分鐘甚至是幾天才有辦法同步。Summary今天看了replication是什麼，會帶來哪些好處(resilient、read performace)，以及會面對怎樣的問題(inconsistency)，並且知道了一些會用到這些概念的地方，不管是他內部就幫你做好的(NoSQL)，還是你自己的系統架構，或者是一些已經存在的別的系統(CDN、DNS)。透過更了解replication的概念，對於我們如何使用別人的產品或是自己系統設計上的取捨都有更清楚深刻的見解，感謝你的閱讀，有任何問題或是想法都歡迎留言唷～ 掰掰👋參考資料 MongoDB Write Concern" }, { "title": "Node.js: 7 cryptography concepts using ctypto module", "url": "/posts/cryptography-in-nodejs-using-crypto-module/", "categories": "Web Development", "tags": "crypto, node.js", "date": "2021-11-24 22:11:00 +0800", "snippet": "這篇要介紹nodejs中的crypto module的用法，如何使用這個module來實現密碼學中常見的概念，包含hash、salt、password hashing、MAC(message authentication code)、Symmetric Encryption及Asymmetric Encryption及Digital Signature。Hash可以使用指令openssl list -digest-algorithms來查詢可用的algorithms，以下使用sha256為例，並輸出base64的字串。const { createHash } = require(&#39;crypto&#39;);function hash(input) { return createHash(&#39;sha256&#39;).update(input).digest(&#39;base64&#39;);}SaltrandomBytes可以幫我們隨機產生你所想要長度的隨機亂數，用來作為salt，它的回傳值是一個Buffer。const { randomBytes } = require(&#39;crypto&#39;);function salt(len) { return randomBytes(len).toString(&#39;hex&#39;)}Password hashing利用scrypt及scryptSync這個KDF(一個為非同步，一個為同步的API)，function的前三個參數分別為: 欲hash的明文資料，此處為密碼 salt output的長度const { scryptSync, randomBytes } = require(&#39;crypto&#39;);function passwordHash(password) { const salt = randomBytes(16).toString(&#39;hex&#39;); const hashedPassword = scryptSync(password, salt, 32).toString(&#39;hex&#39;); return `${salt}:${hashedPassword}`}以上例子使用randomBytes來產生salt，接著將密碼與salt一起hash成32 bytes的hash value，最後跟salt一起回傳。MAC跟hash一樣可以使用指令openssl list -digest-algorithms來查詢可用的演算法。const { createHmac } = require(&#39;crypto&#39;);const key = &#39;my-secret!&#39;;const message = &#39;foo bar👻&#39;;const hmac = createHmac(&#39;sha256&#39;, key).update(message).digest(&#39;hex&#39;);Symmetric Encryption支援的對稱式加密的演算法一樣可以透過這個指令來取得openssl list -cipher-algorithms，此處使用aes256。const { randomBytes, createCipheriv, createDecipheriv } = require(&#39;crypto&#39;);const message = &#39;This is the message I wanna deliver&#39;;const key = &#39;key shared between two parties&#39;;const iv = randomBytes(16);//Encryptconst cipher = createCipheriv(&#39;aes256&#39;, key, iv);const encryptedMessage = cipher.update(message, &#39;utf8&#39;, &#39;hex&#39;) + cipher.final(&#39;hex&#39;);//Decryptconst decipher = createDecipheriv(&#39;aes256&#39;, key, iv);const decryptedMessage = decipher.update(encryptedMessage, &#39;hex&#39;, &#39;utf-8&#39;) + decipher.final(&#39;utf8&#39;);Asymmetric Encryption首先使用generateKeyPair或generateKeyPairSync來產生公鑰及私鑰。const { generateKeyPairSync } = require(&#39;crypto&#39;);const { publicKey, privateKey } = generateKeyPairSync(&#39;rsa&#39;, { modulusLength: 4096, publicKeyEncoding: { type: &#39;spki&#39;, format: &#39;pem&#39; }, privateKeyEncoding: { type: &#39;pkcs8&#39;, format: &#39;pem&#39;, cipher: &#39;aes-256-cbc&#39;, passphrase: &#39;top secret&#39; }})接者使用publicEncrypt及privateDecrypt來encrypt、decrypt message。const { publicEncrypt, privateDecrypt } = require(&#39;crypto&#39;);const message = &quot;I am the message to be encypted🥳&quot;//加密 Encryptconst encryptedData = publicEncrypt(publicKey, Buffer.from(message));//解密 Decryptconst decryptedData = privateDecrypt(privateKey, encryptedData);Digital Signature數位簽章牽扯到hash及非對稱加密，使用crypto module中的createSign及createVerify，回傳的Sign及Verify Object都幫我們做好好囉～const { createSign, createVerify } = require(&#39;crypto&#39;);//取得你的公私鑰匙const publicKey = require(&#39;./ssl/key.pem&#39;)const privateKey = require(&#39;./ssl/cert.pem&#39;);const message = &#39;this data must be signed&#39;;//使用私鑰signconst signer = createSign(&#39;rsa-sha256&#39;);signer.update(message);const signature = signer.sign(privateKey, &#39;hex&#39;);// 使用公鑰verifyconst verifier = createVerify(&#39;rsa-sha256&#39;);verifier.update(message);const isVerified = verifier.verify(publicKey, signature, &#39;hex&#39;);Summay其實就是從官方document裡，把比較常用的整理到這裡，這篇就只有紀錄在Nodejs裡如何實作，並沒有討論為何需要上述的每一個東西，以及有何用途，有機會再陸續補上～ 掰掰👋參考資料 Crypto | Node.js Documentation" }, { "title": "[System Design] 淺談Database Partition. Centralized and Distributed.", "url": "/posts/what-is-database-partition-sharding/", "categories": "Web Development", "tags": "system design, database", "date": "2021-11-21 18:19:00 +0800", "snippet": "什麼是partition，vertical跟horizontal partition有何不同? 阿sharding又是什麼?這些跟NoSQL有關嗎? 在傳統的RDBMS，像是MySQL或PostgreSQL中，這些概念也有用嗎?這篇文章將討論上述的問題，看看partition在RDBMS及NoSQL中的實踐應用，以及各種優缺點。什麼是PartitionPartition原意就是分拆的意思，在資料的世界裡，就是把一份資料，分成許多小份，比如說log file的rotation也是，把今年的日記寫在同一本，去年的日記是另一本也是partition。分拆出來的多份資料，並沒有一定要分散到多台機器中，他們可以被分散到多處，也能被放在同一台RDBMS裡的不同table，也就是說partition並不是分散式資料庫(Distributed Database)的專利。Partion的方式有兩種，分別為vertical及horizontal partition，我們看資料的方式通常是使用表格的，也就是說有欄有列，vertical partition就是根據欄來做分拆，而horizontal partition是對列進行分拆。Vertical Partition如下圖，vertical partition是根據欄位來進行拆分，會拆分出schema不同的表格，主要是為了效能優化，易於管理等目的，再後面的章節中，再來討論應用場景及優缺點。Horizontal Partitionhorizontal partition，是根據列來進行拆分，每個拆分出來的資料集都跟原本的資料集長一樣，只不過是一個子集合。該如何做Horizontal Partition要根據列來進行拆分的話，就必須有個方法，來決定每一列是屬於哪一份partition，作法就是選擇一個資料欄位，用這個欄位經過一些運算或判斷來決定這筆資料屬於哪一個partition，而這個欄位就稱為partitioning key。在上面的例子中，我們選擇了id做為我們的partition key，將資料拆分為兩份，一份為id是奇數，另一份id是偶數，除了上述使用ID奇偶數的方法外，哪些欄位可以適合作為partition key呢? 又有哪些方法來利用每筆資料的partition key，使其分配到特定的partition?Range based就是指shard key依照某個range來指派partition。舉個例子，假設我們選用birthday做為我們的shard key，然後指派出生年在1960年前的為partition 1，1960-1990的為partition 2，1990之後的為partition 3。這樣做的缺點是，如果你的資料有一堆1990年後出生的年輕人，那麼partition 3就會有一大堆資料，分散的並不平均。而優點是做range query時，可以就近就拿到幾乎所有的資料，比如說我想要查詢所有1995-1996出生的人，此時只要去到partition 3，就可以拿到所有的資料了。Hash based另一個作法，就是先將partition key的值先hash過，如此一來就可以避免使用range partition的缺點，也就是造成hot load，但是如此一來，將會損失某些資料既有的連續性及相關性。Centralized or Distributed?看完了partition的相關概念之後，接著就來看看是要將partition放在同一台機器裡(Centralized)，或是要分散到多台機器中(Distributed)，來討論有何作法及應用場景，相對應的好壞處、以及相關市面上已經有哪些solution。按照上圖的編號的順序一個一個來討論～Multiple tables [1] 應用場景1: 將不常用的欄位拆分出來，比如說你有多頁面都會下這樣的查詢: SELECT name FROM users WHERE id = &#39;123&#39;; 只有用到name欄位，但你的users table中可能還有description、或是biography等落落長的文字資料，平常很少用到，如果放在同一個table的話，每次都還需要將不需要的資料讀取進來。 應用場景2: 除了依照使用頻率來拆分之外，也可以依照資料的性質，比如一些不會改變，會用來做聚合計算(COUNT, AVG)的欄位資料，可以拆分到獨自的table。 SELECT AVG(price) FROM orders; 比如說我只關心訂單的平均價格，但如果orderstable裡包含了所有資訊，類似的query就還是需要將全部的資料都讀取進memory。 優點: 減少不必要讀取，避免佔用server的memory，造成太頻繁的swap。 缺點: 增加了應用程式的複雜度，有些場景需要額外做JOIN來取得資料，而上述的應用場景2，現在多會搭配一些適合OLAP的dataware house一起使用，對此不太了解但有興趣的朋友，可以用關鍵字OLAP、data warehouse、columnar database、column oriented database去搜尋。Table partition [2] 應用場景: 最常見的就是選擇時間相關的欄位來作為partition key，以下以postgresql為例，使用measurement table中的logdate作為partition key: CREATE TABLE measurement ( city_id int not null, logdate date not null, peaktemp int, unitsales int) PARTITION BY RANGE (logdate); CREATE TABLE measurement_y2021m09 PARTITION OF measurement FOR VALUES FROM (&#39;2021-09-01&#39;) TO (&#39;2021-10-01&#39;);CREATE TABLE measurement_y2021m10 PARTITION OF measurement FOR VALUES FROM (&#39;2021-10-01&#39;) TO (&#39;2021-11-01&#39;);CREATE TABLE measurement_y2021m11 PARTITION OF measurement FOR VALUES FROM (&#39;2021-11-01&#39;) TO (&#39;2021-12-01&#39;); 並按照每個月的range創建partition。 優點: 常見的access patern可能會是讀取最近的資料，對於比較久以前的資料很少去讀取，所以不需要每次讀取都在一個大的table裡尋找，藉由partition創造出多的小的table，改善效能。另外像是如果你有保留政策(retention policy)的話，也變得相當容易去管理，比如說你只保證保留近一個月的資料，所以超過一個月的partition就直接DROP掉就好了！ 缺點: 跟以下的[3]一起說明～Multiple RDBMS servers [3]終於要進到分散式系統的領域了～ 把一份大的檔案分拆成許多小份，當然也有許多益處，讀取效能的優化、更易於管理等等，但隨著資料的長大，資料增加的速度越來越快，總有一天一台機器還是會遇到瓶頸，此時就有了將資料放在多台機器的想法。原理都是一樣的，選定一個欄位作為shard key，你的application server將決定這筆資料的要放到哪台DB上， 優點: 增加了throughput，不管是卡在Disk或是CPU，一台機器不夠寫不夠讀，那你有試過兩台三台十台嗎～ 缺點: application code的複雜度變大了是一定的，除此之外，每個partiton現在已經各自獨立，跨partition沒有unique constraint、reference constraint，更不可能JOINsecondary indexes也必須各自去建立，幾乎許多RDBMS提供的好用的功能，在跨partition時都不能用了，只能在自己的application code上去實現。 比如說你想做JOIN，但被referenced的table已經被我們做partition了，application code就必須去到每一台機器裡去找，然後在程式裡面把資料做結合。 舉個例子 CREATE TABLE users ( id INTEGER PRIMARY KEY, name VARCHAR(20));CREATE TABLE orders ( id INTEGER PRIMARY KEY, user_id INTEGER REFERENCES users (id)); 我們有users及orders table，orders的user_id是個foreign key指到users的id，如果我們今天將users及orders用它們的id做partition了，則同一個user的orders可能會被分散到不同的機器之中，所以就沒法JOIN拉～ 其實這裡的解決方法就是選用user_id作為shard key就好了，但不可能所有的資料集都有辦法使用同樣意義的欄位來做partition。 Sharding in NoSQL [4]在大數據時代，為了處理大量資料而冒出的許多NoSQL都有的內建功能，就跟上面講的原理一樣，只不過這次資料庫本身就幫我們把sharding這件事都處理好拉～不需要我們寫任何一行的code，只需要在configuration file或UI上設置一下就好。而面對的問題還是一樣的，所以大部分的NoSQL提供的API都比較簡單，不像RDBMS有各種constraint，可以JOIN，transaction可以用。關於NoSQL怎麼實作sharding的，每種產品也都不同，大家要自己去看他們是如何實作的，shard key怎麼選的，可以自己選嗎?是range還是hash partition，如何動態增加或減少shard的數量(這部分這篇文章裡沒有討論到)。比如說MongoDB可以自己選擇shard key，也可以選擇shard strategy，大家可以根據自己的use case來調整，詳見MongoDB shardingMultiple services? [5]其實好像沒看到DB做vertical partition，然後把不同的partition分散到不同的機器上的，就算是column oriented的DB，應該也是用horizontal partition的方式來分散它的資料(不太確定)，如果有人想要補充，歡迎留言～開開孤陋寡聞的我的見識。所以這邊我的Multiple services的意思是指，比如說今天你的users table有個大頭貼的欄位，或是任何大的document或Blob，雖然DB也可以存，不過也可以將它拆出來，使用其他的服務像是AWS S3、或是GCP的GCS，好拉，其實加這個就只是要讓我的表格不會空一格😂總結今天知道了什麼是partition，有分為vertical及horizontal的，以及該如何做horizontal partition，選定shard key，以及決定你的shard strategy，不管你是自己做，還是資料庫幫你做好好的，根本的核心概念及會面臨的問題都是一樣的，有了這些概念，對於不管是自己家系統的架構，或是別的資料庫產品，都有更好地了解，並更清楚地可以根據適合自己問題場景，選擇適當的作法。感謝你的閱讀，有很多地方我可能還是不懂或搞錯的，或是有任何想法，更棒的idea想討論的，都歡迎可以留言唷～ 掰掰👋參考資料 PostgreSQL: Documentation Understanding Database Sharding MongoDB sharding" }, { "title": "什麼是Hash Function? 有什麼特性及用途?", "url": "/posts/what-is-hash-function-its-properties-and-usages/", "categories": "Web Development", "tags": "crypto", "date": "2021-11-17 17:52:00 +0800", "snippet": "在之前一篇文章: 密碼學是什麼? 有何用途以及要解決什麼樣的問題?中討論過密碼學的出現是為了解決什麼問題，這篇文章要討論密碼學裡一個重要的概念，Hash Function，其與對稱式加密跟非對稱式加密三者共同構成密碼學裡的核心。賭博遊戲再開始正式的內容之前，先來想個有趣的問題: 賭博中如何防止莊家出老千?比如說我們現在玩骰子遊戲，賭大小，1-3是小，4-6是大，賭博最怕莊家出老千，莊家看你賭小就作弊讓骰子骰出大，看你賭大就骰小，該如何解決這個問題呢~這篇文章講Hash那提出的解法當然跟Hash有關囉，文末再來揭曉，首先先來認識Hash function。什麼是Hash FunctionFunction就是有一組輸入然後會產生一組輸出，同樣的輸入會產生出同樣的輸出，而hash function的輸出是固定長度的，不同的hash funtion，所產出長度都不同，比如說md5為128個bits，sha256顧名思義為256個bits。輸出的結果跟輸入的資料相比起來，通常是小很多的，所以輸出的結果會被稱為message digest，或是直接稱為hash value。Hash function的特性接下來我們來看看好的hash function還具有其他哪些特性，可以使得他在密碼學裡佔有一席之地。Irreversibility不可逆的，單向的，就是說當我們得到一個hash funcition的output時，我們無法反推出其input，Collision Resistance什麼是碰撞? 就是說當有兩個不同的輸入，經過hash function的計算後，得到了一樣的結果時，就是碰撞。比如說我們的hash function是將輸入除以5的餘數，這樣當我們的input是1、6、11、16等等等的時候，所得到的ouput都是1，就碰撞了。所以如果一個好的hash function是collision resistance的話，當我們看到兩個不相同的hash value時，我們就知道他們倆的input也是不相同，反之亦然，當看到兩個相同的hash value時，我們就知道它是由兩個一樣的input所以計算出來的，因為他不會碰撞，不會有多個input對應到同一個output。用途Hash Function就是做出承諾、指紋、識別的方法，怎麼說呢？接下來我們來看看在哪些地方有用到hash function吧!承諾比如現在要做出愛妻承諾，我們將10條的愛妻守則經過hash function計算的到一個hash value，這個value就是一個承諾。承諾就是不會改變的東西，如果我們偷偷地更改了愛妻守則裡的其中一個字，因為改變太微小了，老婆可能不會發現，但只要再經過hash function計算過後，就會發現hash value完全不一樣了～如此一般，hash value的一致可以用來保障我們原始資料是沒有改變的，可以被用在下列這幾個地方: 檔案校正碼 下載安裝檔用來確定我們收到的檔案是沒有損毀的，以及我下載下來要安裝的東西，不是被惡意的第三方給改過的！隱密的承諾除了是承諾之外，它還可以是隱密的承諾，也就是說我知道你做了一個承諾，但我不知道你承諾的內容是什麼，因為hash function具有不可逆的特性，但你可能會說這有什麼用嗎~讓我們來看看吧！密碼儲存當我們使用密碼登入別人的服務時，伺服器要知道使用者的密碼輸入的對不對，那它就要記錄下大家的密碼，日後使用者登入的時候才可以比對。不過要是伺服器被駭客侵入，或透過其他的方式取得這份使用者密碼清單，那代誌就大條了😱所以通常伺服器資料庫都不會直接把密碼紀錄下來，而是將密碼hash過後，再將hash value存起來，如此一來就算駭客得到這些hash values，也無法得知原本的密碼是什麼，而每次使用者登入的使用，只要再將他輸入的密碼hash過一次，然後跟資料庫裡的比對，一樣的話就代表使用者輸入了正確的密碼了，在這裡這個承諾就是密碼本身。識別因為hash value是固定長度的，可以將它當作一份資料的識別，比如說身分證字號就是使用一位英文加上九位數字，來代表著某一位台灣人。Gitcommit d9a1e4f5f1fe19b05bafb4176b2c9a6b89c14bc9 (HEAD -&amp;gt; master)相信會使用git的大家對這樣的文字不陌生，其中的d9a1e4f5f1fe19b05bafb4176b2c9a6b89c14bc9就是將這個commit版本中的所有檔案作為input，使用SHA1 hash出來的，長度為160個bits，也就是40個hexadecimal的字母，他就作為這個commit的識別。UUID v3、UUID v5這兩個版本分別使用MD5及SHA1，由於v5使用SHA1會生成160bits的hash value，會將其截斷為128bits。賭博遊戲的解法現在要來解決文章開頭的問題了～利用的就是hash function的隱密的承諾的特性，提出的解法如下:玩家可以先將他要下的賭注hash過，得到一串看不懂的東西，然後公開這串hash value，由於不可逆的特性的關係，莊家看不懂玩家到底是賭大還是賭小，等開出結果之後，玩家再公布他的賭注，並將此再hash一遍，如果得出的hash value一樣，玩家就可以宣稱他看到骰子開獎之後才公布的賭注跟原先的賭注是一樣的，酷吧😎總結感謝你的閱讀～ 這篇文章簡單地介紹了什麼是hash function，以及它具有哪些特性，還有其用途，包括檔案校正、密碼儲存、git commit、uuid等等…在密碼學中，還會搭配對稱式及非對稱式加密來達成一些其他的任務，比如說訊息驗證碼(message authentication code)、數位簽章(digital signature)等等…後續會再慢慢介紹以上的東西，掰掰～ 👋" }, { "title": "[讀書筆記] 原子習慣: 細微改變帶來巨大成就的實證法則", "url": "/posts/book-note-atomic-habits/", "categories": "讀書筆記", "tags": "books, self improvement, habit", "date": "2021-11-14 21:36:00 +0800", "snippet": "《原子習慣》這本書收首先帶我們了解到習慣是什麼，它就是我們平常不太會去注意到，卻是很大地影響我們人生的一件事，更清楚地認識了習慣及其重要之後，作者將習慣拆解成四個階段，提出一個框架，好讓我們可以一步一步地培養好習慣、斷除壞習慣。習慣是什麼習慣佔據你人生的八、九成，試想一下每天醒來，躺在床上滑一下手機，走去浴室刷牙洗臉，要不要吃早餐，早餐要吃什麼，通勤去上班的路上在做什麼，工作時如何面對同事，面對事情是如何處理，下班了之後要做什麼，要去運動嗎?還是回家躺在沙發上耍廢，該準時就寢嗎？還是東摸摸西摸摸又到了半夜了，跟人聊天會抱怨最近發生的負面的事嗎？上述說的這些事，你都不需要在當下耗費心思去做選擇，而是不假思索地反應出來，但他們就是你現在會成為怎樣的人的根本原因。因為習慣做起來毫不費力，而且頻率很高，經過時間的累積後，影響將會慢慢顯現，變得越來越巨大。專注系統，而非目標這就有點像是被動收入，專注於打造每天每個月的現金流，而不是獲得一大筆錢，被動現金流一旦打造完成之後，無時無刻都可以為你帶來收益。但如果你是將目標放在獲得某筆金額，過程中可能會很辛苦，並且有人可能還會無所不用其極地來達成，比如說超時工作、想辦法投機股票、加密貨幣、偷搶拐騙等等等…專注於系統就像是好好地養好一隻會生金蛋的雞一樣，照顧好雞本身，自然會帶給你金蛋，如果只專注於目標，就有可能做出殺雞取卵般的行為，所以好習慣就是一隻好雞🐔！專注於目標也有其他的壞處，比如說你的目標是減重10公斤，除了可能會用激進的手段來達成之外，也可能在費盡千辛萬苦終於達成之後，你就沒有動力繼續保持健康的生活又復胖，更多的可能是就中途放棄，沒有意志力再進行下去。所以該怎麼辦呢？這本書給出解答就是透過習慣來達成你的目標，藉由每天的小勝利，讓你成為你想要成為的人，只要知道終點在哪個方向(首先你也要知道方向)，每天有朝著那個方向前進就好，而且重點是不自覺地，輕鬆地前進，而不用依靠自制力，人的自制力是有限的，每天都依靠意志力，總有一天會累歪的😫四步驟所以該如何打造自己的習慣系統呢? 作者提出了一個框架，將一個習慣的組成拆解如下: 提示 -&amp;gt; 渴望 -&amp;gt; 回應 -&amp;gt; 獎賞我們從環境中、或是固定的時間地點接收到了提示刺激，引起了我們的渴望，接著為了滿足那個渴望，我們做出了回應，也就是一些行為，最後得到了獎賞來滿足那些渴望，得到獎賞便增強了整件事的迴路，下次只要遇到一樣的情況，大腦便會想做一樣的事，因為他期待會獲得獎賞。以吃垃圾食物為例，我們可能到了週五晚上回到家，經歷了一週辛苦的工作準備迎接週末時，洗了個舒服的澡，坐上沙發，以上這些時間地點的提示，就觸發我們想要耍廢的渴望，於是乎，我們做出了回應，打開電視打開Netflix，準備好零食飲料，開始耍廢～立刻地，我們得到了影劇的刺激，以及充滿糖分、脂肪、鹽分的食物的滿足，大腦覺得開心，便增強了我們未來繼續如此作為的可能。所以該怎麼培養好習慣，剷除壞習慣呢～作者分別對這個階段提出可行動的方案及建議，幫助你過關斬將，往好的方向前進～提示所有的習慣始於提示，提示可能是某個特定的時間地點，也可能是來自環境中的某個訊號。環境中的提示有個實驗是這樣的，在醫院的自助餐裡，改變可樂跟瓶裝水的擺放位置，將瓶裝水跟可樂交換放到明顯的位置，結果一句話都不用說，就改變了人們的行為，瓶裝水的銷量上升了兩成左右，而可樂的銷量則下滑。當我們在家裡，客廳桌上就擺著洋芋片，就算我們本來沒有想吃，也非常有可能隨手就拿起來吃了，如果放的是健康的水果，你吃的就不會是洋芋片而會是水果; 如果想養成看書的習慣，或許可以在早上整理完床鋪後，放一本書在床頭櫃上; 想認真工作的時候，就不要在有電視的地方，把手機丟得離自己遠遠的，以免不時就打開電視或拿起手機滑滑。另外，空間的用途最好固定，在床上就是要睡覺，書桌就是要工作的地方，想娛樂時去到客廳，擁有一個小角落來看書，當我們想要做某件事時，就去到特定的地方，如此一來，身邊的環境也可以幫助我們開始做特定的事。習慣堆疊提示也可以是自己的某個行為，所以習慣堆疊這招，就是要利用我們原先已經擁有的習慣來作為提示，比如說每天早上可能我們會沖杯咖啡，那可以再準備完咖啡，坐到位子上時，就先看10分鐘的書，或是工作時，拿起手機要滑時，就做10下伏地挺身，在原有的習慣做完之後，立馬接上自己想要習慣。渴望接收到提示之後，我們會產生渴望，Friday night使我們有想要放鬆的渴望，看到飲料零食使我們有想要吃它喝它的渴望，所以我們可以為我們想要的習慣創造出渴望。有個工程師(不是我)想要培養運動的習慣，他也非常愛看Netflix，所以他將他的跑步機跟電腦改裝，只有當他在跑步的時候，才可以打開Netflix😂你也可以規定自己當做完需要做的習慣時，才能去做想要的事，把渴望跟需要做的事捆綁在一起，也可以跟上述的習慣堆疊合在一起應用，在做完既有的習慣後，去做需要的習慣，然後才能做想要的習慣。回應回應指的就是你真正去做的那件事的行為，該如何設計你的回應好讓我們養成新的習慣呢!容易去做當要去做一個行為的阻力太大時，我們就很可能會放棄。假如你像要養成去健身房運動，但你卻選了個健身房離你家30分鐘路程的地方，每次當你想去運動，除了要克服想偷懶的心魔外，還要加上30分鐘路程的艱辛。相反地，當你想要阻止自己去做一個壞習慣時，要讓他變得困難，比如說看完電視，就把電視機整台收進倉庫裡，每次要看的時候，都要把電視從倉庫中搬出來，再接線，有時候因為懶，就不會再去做那些自己想要去除的壞習慣了。重複勝於時間，次數勝於質量有一門攝影課做了以下的實驗，將學生分成了兩組，一組在整個學期中只要繳交一次期末成品，一次定生死，而另一組則是要求學生每週都要繳交練習作業，想要運動嗎？每天做一下伏地挺身也行，沒錯！就是一下; 想要跑步嗎？先從一個禮拜去散步三次也好，一件事如果是你無法想像你可以持續一生都堅持在做的話，就一定不會持久。與其新年新希望，在年初雄心壯志一週上三次健身房，然後做了幾週半途而廢，不如每天從散步，做一下伏地挺身開始，持之以恆，久而久之，你可以會開始在散步途中跑個100個公尺，或是都做一下伏地挺身了，就開始做了第二下、第三下…獎賞做完一個習慣後，如果我們得到了獎賞便會增強這個習慣，但如果這個獎賞來的太慢，可能會被我們忽略，試想一下所有的壞習慣，獎賞都是來得又快又即時，抽菸時尼古丁立刻進入我們身體當中，吃垃圾食物時馬上覺得滿足～ 看劇時立即享受到感官的刺激，而壞處卻是可能很久之後才會來，我們人類往往都是短視近利的，所以必須讓我們想要培養的習慣有獎賞之外，還要讓它來的即時。創造立即獎賞如果我們想要培養的習慣可能就是沒辦法帶來立即的獎賞該怎麼辦呢?有時成功完成習慣帶來的勝利感成就感本身就是很好的獎賞了，在均衡飲食、去運動完後，覺得自己真是一個健康的人～強化了成為自己想成為的人的形象，就是很棒的事了，除此之外還可以透過一些方法來創造獎賞。比如說你想要省錢，每次阻止自己亂花錢時，總是心力交瘁，花了很多的意志力終於阻止自己花錢，但卻只是讓自己不去做一件事，而沒有得到什麼，這時候，不妨將成功省下來的錢，存入另一個帳戶，這個帳戶可以用來資助自己想做的事，想完成的夢想，如此一來，每次省錢時就有得到一個立即的獎賞的感覺，也就是在自己的旅遊、美食或夢想帳戶中添上一筆。另外也能透過紀錄的方式，為自己每次成功執行一下習慣時記下一筆，有時為了不想讓紀錄中斷，也是一種動力！Summary感謝您的閱讀～ 讀完這本書後，知道了不要再依賴意志力來逼自己達成目標，而是可以透過許多方法來設計自已，讓自己掉下好習慣的陷阱，不知不覺中，每天往好的方向前進! 期許大家都能每天每天讓自己更加成長一咪咪🤏🎉最後跟大家分享我應用所學，在生活中培養新習慣的故事(陸續新增): 懶人早餐: 15分鐘，高纖高蛋白低碳水 《原子習慣》應用: 我是如何養成閱讀習慣 " }, { "title": "台北捷運在疫情期間各站的進出人數", "url": "/posts/mrt-transportation-volume-during-pandemic/", "categories": "生活", "tags": "", "date": "2021-11-11 16:04:00 +0800", "snippet": "COVID-19爆發以來，台灣人民的生活跟世界其他國家相比，受到的影響相對較小，以下將分享台北捷運各站，在疫情期間(2020-01 ~ 2021-09)，每個月的進出站人數資料數據。資料來源臺北捷運各站分時進出量統計上述連結中的原始資料中，有每個小時從A站進到B站出的人數，每月近一千萬筆的資料，在下將其整理為每月某站的總進出站人數各站進出人數以下橫軸時間為2020-01 ~ 2021-09，縱軸單位為百萬人。台北車站忠孝復興西門板橋士林結論可以看出各站的趨勢都大同小異，在2020年初小量下滑，在2021五月開始，搭乘捷運的人數大量地縮減。另外12月時板橋站有特別多人可能是耶誕城的關係🎄🎅。以上只簡單列出幾站的資料，如果想要看別的站或是想要確切原始數據的話可以跟我說～除此之外，還想知道其他問題的話也可以問我，比如說總進出人數最多的站前幾名，成長或衰退最多的站是哪些?等等問題。以上就是這次的分享囉，掰掰～👋" }, { "title": "Nodejs: 如何逐行讀取檔案，或使用Unix pipe與其他process互動", "url": "/posts/nodejs-how-to-read-from-file-line-by-line-and-use-shell-pipe-with-nodejs-process/", "categories": "Web Development", "tags": "node.js, linux", "date": "2021-11-09 10:00:00 +0800", "snippet": "這篇文章將介紹如何使用Nodejs的readline module來一行一行地讀取檔案，接著既然都可以從檔案中逐行讀取了，那也可以從standard input中逐行讀取吧，如此一來，就可以跟其他linux command一樣，一起使用pipe！像下面這樣:cat words.txt | node wc.jsreadline createInterface:首先使用readline.createInterface()，需要一個input參數，他需要是一個stream.Readable，這裡我們使用fs.createReadStream()打開我們的檔案，並作為input，傳給createInterface。 const readline = require(&#39;readline&#39;);const fs = require(&#39;fs&#39;);const rl = readline.createInterface({ input: fs.createReadStream(&#39;./words.txt&#39;),}); Event: “line”接著就可以監聽line event，每當從input讀取到換行(\\r、\\n or \\r\\n)，line event就會被發送。callback function有一個參數，它是個字串。 rl.on(&#39;line&#39;, (row) =&amp;gt; console.log(row)); Event: “close”當input stream結束的時候，close event就會被發送。 rl.on(&#39;close&#39;, doSomething); 完整程式碼最後我們就利用上面的資訊，寫一隻wc.js，來計算檔案中每個字出現的次數，將結果以JSON的格式輸出至stdout上。const readline = require(&#39;readline&#39;);const fs = require(&#39;fs&#39;);const input = fs.createReadStream(&#39;./words.txt&#39;);const rl = readline.createInterface({ input });const count = {}rl.on(&#39;line&#39;, row =&amp;gt; { count[row] = (count[row] || 0) + 1})rl.on(&#39;close&#39;, () =&amp;gt; console.log(JSON.stringify(count)))unix pipe這邊示範如何從stdin中讀取資料流，就可以使用shell pipe ( | )，讀取來自前一個程式的output了。只需將readline.createInterface的input參數，從fs.createReadStream(&#39;./words.txt&#39;)改成process.stdin就行了！因為他們都是stream.Readable的implementation。const readline = require(&#39;readline&#39;);//只改了這行const input = process.stdin;const rl = readline.createInterface({ input });const count = {}rl.on(&#39;line&#39;, row =&amp;gt; { count[row] = (count[row] || 0) + 1})rl.on(&#39;close&#39;, () =&amp;gt; console.log(JSON.stringify(count)))summary感謝你的閱讀～ 這篇文章示範了如何使用readline模組來逐行讀取檔案，並且看到了兩個stream.Readable的實例，體會到了stream的好用之處。另外我還有寫過另一篇一樣功能，只不過是用golang寫的，stream.Readable可以類比為golang中的io.Reader，有興趣的可以看看:[Golang] 如何逐行讀取檔案，或使用shell pipe到go process其他stream的實例:How to stream data from Blob Storage at your HTTP server using Azure and express.js" }, { "title": "密碼學是什麼? 有何用途以及要解決什麼樣的問題?", "url": "/posts/what-problems-cryptography-to-solve/", "categories": "Web Development", "tags": "crypto", "date": "2021-11-07 13:30:00 +0800", "snippet": " 如何在有惡意的第三方的情況下安全的通訊密碼學要解決的問題大概可以以上面這一句話來概括，這篇文章主要的目的，就是要來深入探討這句話，通訊的本質是什麼，會面臨什麼問題，以及什麼樣才是安全的通訊，要達到哪些目標才算安全呢?通訊 (communication)什麼是通訊就是將信息(message)由一方傳達到另一方，比如說對話、傳小紙條、寫信或Email、傳LINE、通電話、上網看網頁、使用社群網站等等等… 各式各樣的訊息，在各處流動，尤其是現在網際網路發達的時代，訊息的來源可能來自世界各地，更多元、更即時、也更大量。惡意第三方試想一下，你在跟人對話，旁邊有人在偷聽; 視線範圍內沒人，但卻隔牆有耳;小時候在教室裡傳紙條，被中間的同學打開來看; 特務電影中，駭客在路邊的一台小車裡，監聽著你撥打的電話; 以上的種種的例子，都是有第三方得到了別人中間通信的內容。通訊的媒介都是公開的我們在跟別人講話，訊息在空氣中透過聲波傳送; 我們傳紙條寫信，將信息寫在紙上傳遞;古代打仗，有傳令兵、馬拉松跑者，帶著重要的情報在路上奔波; 講電話時，則是將訊息轉化為電磁波發送出去。不管你用的通訊方法是哪個，都需要一個媒介來傳遞，而這個媒介是公開的!沒有辦法阻止別人來讀取當中的資料，就算你是有護衛的傳令兵，也可能被殺了然後被奪取令旗。密碼學的出現所以密碼學的出現，就是為了解決以上的問題，在古代戰爭中已經有許多的密碼學的蹤跡，世界大戰時，破解德軍加密過的訊息，也是當時戰爭中相當重要的一環。什麼是安全上述所舉的例子，其實只提到安全其中的一個部分，也就是信息不想被第三方看到，但其實還有其他可能被惡意攻擊的面相，以下就來討論，要達到所謂的安全，需要顧到的環節。以下將用一個例子來說明，假設有兩個人名為Alice跟Bob，他們倆是筆友，透過寫實體信的方式互通往來，而有一個壞人Charlie想要偷看信件並破壞兩方感情，來看看Charlie有哪些招數可以用吧。偷看 (Sniffing)Charlie要做壞事的第一步，當然就是先偷看他們通信的內容是什麼？只要到收信者的信箱那邊等，或是去找郵差襲擊他，都可以達到這個目地，把信拿出來看一看再放回去，Alice跟Bob的甜言蜜語，或是要約會的時間地點都會被知道。竄改 (Tempering)再更進一步，Charlie可以將信中的內容做更改，比如說約會時間為下午1點，可以改成4點、7點、10點，這跟提款單或支票使用數字要用大寫是一樣的意思，就是為了防止內容被修改過卻看不出來。冒充 (Impersonation)如果Charlie有辦法模仿他們的字跡，就可以直接寫一封新的信！在真實世界中，我們就是透過字跡、簽名，來認證信息的來源是不是本人，但不乏看過許多冒用簽名的例子。通話的話是使用聲音，視訊可以看長相，但聲音也可以合成，影像也可以，看看最近當紅的小玉deepfake風暴就知道了，所以到底該如何證明一份訊息的來源是真的出自本人，也是一個重要的問題！Summary感謝你的閱讀～ 今天學習到了密碼學的目的，了解到通訊不安全的本質，壞人可能透過哪些方法來做壞事，包括偷看、竄改及冒充。該如何怎麼防範這些問題，就是密碼學的核心，至於密碼學是如何做到這些事的，這篇文章還沒有說明，之後有機會再補上!如果有人留言敲碗要的話，我就立馬開始寫！哈哈，掰掰～👋延伸閱讀(陸續新增)陸續將密碼學相關文章補上～ 什麼是Hash Function? 有什麼特性及用途?" }, { "title": "[Golang] 如何逐行讀取檔案，或使用shell pipe到go process", "url": "/posts/golang-how-to-read-from-file-line-by-line-and-use-shell-pipe-with-go-process/", "categories": "Web Development", "tags": "golang, linux", "date": "2021-11-05 13:00:00 +0800", "snippet": "這篇將示範如何用go的bufio，開啟檔案並且一行一行地讀取資料，最後示範直接用unix pipe將資料pipe給我們的go程式，做到像下面這樣的事:cat words.txt | go run ./wc.gobufio.Scanner我們將使用bufio.Scanner來一行一行地讀取檔案內容，先看看會用到的function們的signature: func NewScanner(r io.Reader) *Scanner func (s *Scanner) Scan() bool func (s *Scanner) Text() stringbufio之所以叫做bufio，就是因為他在io的基礎上，加上了buffer，這邊我們使用的bufio.Scanner，一樣是從io.Reader裡Read資料出來，但會先將資料存在他的buffer裡面，呼叫Text()可以拿到資料，呼叫Scan()則是叫他繼續讀取下一筆資料。預設上，每一次Scan就是讀取一行，如果回傳值為false就代表已經沒有資料了，除了一次讀取一行之外，還有其他的方式，但今天這裡就不介紹了～範例程式以下示範讀取一個檔案(words.txt)，算出每一行的字出現幾次，並將結果打印至螢幕上:words.txt: applebananaorangeappleappleorangewc.go:package mainimport ( &quot;bufio&quot; &quot;fmt&quot; &quot;io&quot; &quot;log&quot; &quot;os&quot;)func main() { file, err := os.Open(&quot;./words.txt&quot;) if err != nil { log.Fatalf(&quot;error when reading file with message: %v&quot;, err) } wc(file)}func wc(input io.Reader) { scanner := bufio.NewScanner(input) count := make(map[string]int) for scanner.Scan() { word := scanner.Text() if _, ok := count[word]; ok { count[word] += 1 } else { count[word] = 1 } } for word, n := range count { fmt.Printf(&quot;%s: %d\\n&quot;, word, n) }}Shell Pipe既然我們已經可以從檔案中一行一行讀取資料了，那要不要試試看這樣！利用shell pipe從上一個程式的stdout中讀取資料。cat words.txt | go run ./wc.go想要達成上面的用法，相當簡單，只要把我們wc function的參數，從使用*os.File改成os.Stdin就行了～因為他們都有implement io.Reader，也就是main function變成如下:func main() { wc(os.Stdin)}Separate IO from Logic前面我們將wc算完的結果，直接fmt.Printf到stdout上，但有時如果我們想寫到檔案裡，或是寫到network socket時，就不太方便。wc應該只專注在word count一件事上就好，不需要管input是從哪裡來的，就像前面我們使用*os.File後面用os.Stdin一樣，也不用管output要寫到哪裡去，所以我們再將程式改寫如下:import ( &quot;os&quot; &quot;fmt&quot; &quot;io&quot; &quot;bufio&quot;)func main() { wc(os.Stdin, os.Stdout)}func wc(input io.Reader, output io.Writer) { scanner := bufio.NewScanner(input) count := make(map[string]int) for scanner.Scan() { word := scanner.Text() if _, ok := count[word]; ok { count[word] += 1 } else { count[word] = 1 } } for word, n := range count { fmt.Fprintf(output, &quot;%s: %d\\n&quot;, word, n) }}wc就只管將結果寫到一個可以寫的地方，至於它是什麼地方，就由呼叫他的人來決定！By the way, wc這名字取的不好，因為我們實現的是uniq -c這個command，而不是wc😄Summary感謝你的閱讀～ 今天學到了如何使用bufio.Scanner來一行一行地讀取檔案，另外也體會到了interface的強大，io.Reader及io.Writer是個很好的例子，並且利用os.Stdin就可以使用shell pipe ( | )，跟其他linux command一起搭配完成任務！最後，我也有寫一篇一樣功能的Node.js版本，有興趣的可以看一看:Nodejs: 如何逐行讀取檔案，或使用Unix pipe與其他process互動" }, { "title": "104人力網站爬蟲: 如何只用shell script來抓取資料", "url": "/posts/crawler-104-jobs-data-using-shell-scripts-curl-and-jq/", "categories": "Web Development", "tags": "crawler, http, curl, linux", "date": "2021-11-01 20:00:00 +0800", "snippet": "想要抓取網路上的資料，大家可能都會想到python爬蟲，但有時並不需要那麼麻煩，linux command line tool就有許多好用的工具，今天以104人力網站的為例，示範如何只使用shell script，就可以開始抓取資料!前言這邊假設大家已經有網路爬蟲的基本概念了，一般大家寫爬蟲最多人用的就是python，流程就是到目標網站上操作，並且一邊觀察chrome dev tool，將http requests用python的requests套件重現，之後將response回來的資料做parse，最後存起來，可能是存到檔案或是資料庫裡。前面三個步驟是觀察，後面要進行動作，共有三個主要的動作，分別為: 發起HTTP請求、處理HTTP回應的資料，將處理好的資料存起來。而這三個動作，分別都有好用的command line tool可以直接使用，分別為: Make HTTP requests: curl Parse JSON response data: jq Save data: redirect »curlcurl是個HTTP client，相當於python的requests套件，想要在104上搜尋軟體工程師第1頁的結果，可以使用下列的指令，有兩個querystring的參數: keyword及page。其他還有許多篩選條件像是地區，年資，有興趣的去104網站自己按按就知道該使用哪些參數囉，這裡就不再多做描述。curl -H &#39;Referer: https://www.104.com.tw/jobs/search&#39; https://www.104.com.tw/jobs/search/list?keyword=軟體工程師&amp;amp;page=1對HTTP message或curl的使用還不熟的，可以參考我之前寫過的文章: HTTP 簡介，以及使用telnet、nc、curl等指令來探索 A Linux HTTP client tool — curl的介紹及用法jq [1]成功取得回應後，可以看到terminal上噴出一堆密密麻麻的資訊，難以去閱讀，今天為例的104 API，回傳的是application/json的資料格式，可以將這坨資料pipe到jq[1]指令上，他可以幫我們parse JSON格式的資料，也可以做其他的動作，包括選擇我們要的欄位、map、filter、transform等等，詳細的使用方法可以到官網看他們的文件。104的api回傳JSON格式的資料很方便，但很多網站沒有或是找不到這種API可以使用，就必須處理html的解析，我有找到一個工具pup[2]，看起來也蠻好用的，如果你知道其他更好用的方法，也歡迎留言跟大家分享唷～redirect處理好回應後，最後將資料導到file裡存起來就好囉~ 如果寫到同一份檔案當中，記得使用»，才不會把先前的資料給蓋掉唷。完整程式碼#!/bin/shif [ -z $1 ] || [ -z $2 ]; then echo &quot;&quot; echo &quot; Usage:&quot; echo &quot; sh ./`basename $0` \\$keyword \\$page&quot; echo &quot;&quot; echo &quot; Example:&quot; echo &quot; sh ./`basename $0` 軟體工程師 1&quot; echo &quot; sh ./`basename $0` 專案管理 2&quot; echo &quot;&quot; exitfikeyword=$1page=$2curl \\ -H &#39;Referer: https://www.104.com.tw/jobs/search&#39; \\ https://www.104.com.tw/jobs/search/list\\?\\&amp;amp;keyword\\=$keyword\\&amp;amp;page\\=$page \\ | jq前面為防呆的檢查，確保使用者有輸入關鍵字及頁數，用起來就像這樣:sh ./104.sh 軟體工程師 1得到的結果如下:如果只想要資料的list，可以再pipe到jq做進一步的處理:sh ./104.sh 軟體工程師 1 | jq .data.list得到的結果如下:結語有時只想要簡易的爬蟲，不想要大張旗鼓地寫個python時，就可以寫個shell script，加上crontab就能去抓取資料。比如我只是想記錄某個keyword資料量的每天趨勢變化，就可以sh ./104.sh 軟體工程師 1 | jq .data.totalCount &amp;gt;&amp;gt; data.csv一天跑個一次，一份csv檔案，就可以達到我們想要目的。感謝你閱讀到這邊～希望以上的內容對你有一丁點的幫助，掰掰～ 👋附錄 jq - https://stedolan.github.io/jq/ pup - https://github.com/ericchiang/pup" }, { "title": "[讀書筆記] 用對能量，你就不會累", "url": "/posts/book-note-the-power-of-full-engagement/", "categories": "讀書筆記", "tags": "books, life style, habit, self improvement, productivity", "date": "2021-10-30 10:30:00 +0800", "snippet": "原文書名為《The Power of Full Engagement》，作者提出能量管理的概念，幫助我們找回對生活與工作的熱情和意義！簡介我們生活在步調緊湊的數位時代，資訊、訊息、工作緊接而來，很多人致力學習時間管理，試著把每一分一秒塞得滿滿，卻忘了我們不是機器人，是精力及能量有限的人類。試想一下我們有沒有下面的情況: 你參加一個四小時的緊湊會議，但到了最後兩小時，你能量大幅滑落，無法集中精神。 工作到了下午，你欲振乏力，失去耐心、脾氣暴躁。 今天是妻子的生日，但經過整天工作之後，沒有力氣出去慶祝，或是會分心想著工作的事。 下班計畫了許多活動要去參加，卻一在拖延，只想到家躺在沙發上看電視，完全沒有力氣。有的話就需要好好來管理一下能量拉～不同面向的能量作者將能量分為四種不同，卻又彼此相關的面向，分別為身體、情緒、心理及精神 身體: 最明顯的一個面向，體現在你有沒有體力做事，會不會容易疲累。 情緒: 缺乏時，就容易出現負面情緒如挫折、失望、憤怒、缺乏耐心、同理心及自信心。 心理: 保持專注、理性樂觀的能力及創造力。 精神: 清楚自己的價值觀，維持動力、毅力及知道目標、方向。平衡使用、定時更新 人生是一場馬拉松嗎? 一場又一場的短跑會不會更好些?做每件事全力以赴，能量全開，並且要定時休息、補充能量，不然你就被榨乾了，這道理在身體上很明顯，但在其它面向，也需要注意。你有多久沒有純粹為了喜悅、放鬆做一件事了呢？有多久沒有檢視平常的作為跟核心的價值觀相不相符呢?Tim在《一週工作四小時》裡也有提到相關的概念，工作及興趣都是週期性的，並且提出迷你退休: 將一般累積在人生後半段的退休時光平均分散在一生當中，對這本書有興趣的朋友，可以看我之前寫的讀書筆記:[讀書筆記] 一週工作4小時: 擺脫朝九晚五的窮忙生活，晉身「新富族」！突破極限、接受訓練就像肌肉想要變強壯一樣，我們需要鍛鍊它，讓它突破現有界線一點，再讓他休息恢復，就像在《刻意練習》裡說的，要走出舒適圈一點點，一點點就好唷！而在情緒、心智及精神層面也一樣是如此，在後面的章節中，可以看到許多個案，如何針對他們在各方面的能量進行鍛鍊。建立儀式我們的意志力是有限的，靠著自律、意志力想要長久地逼自己去做一件事是不實際的，這也是在《原子習慣》一書裡所提倡的。想要改變，去做一件事，有個好的辦法就是讓他成為習慣、儀式化，也就是可以不假思索地就去做它。習慣占了我們一天中大部分的時間，想一下你一早起床，你需要克服萬難，用盡一切力氣將自己拖到浴室，然後刷牙洗臉嗎？需要像小孩一樣張開雙手，認真專心地才能穿好衣服、綁好鞋帶嗎？都不需要，因為我們已經養成習慣，這些事做起來毫不費力，如此一般，在生活中的其他面向，比如飲食、運動、睡眠、正向、感激、耐心、專注、省思也都可以讓他們習慣化、儀式化。個案分析在這本書的中間，作者分別就四種不同的能量闡述，並透過很多個案，分析他們的問題，是休息復原不夠，還是哪方面需要鍛鍊加強，推薦大家去書中看看個案們的故事，也能找找自己有沒以相似的問題~以下就只簡單地總結一下四個面向的內容。身體談到呼吸、飲食、睡眠、運動，關於這部分，市面上或網路上也有許多相關的資源，在這裡我額外推薦一些書。 睡眠: 《為什麼要睡覺》 運動: 《真正的快樂處方：瑞典國民書！腦科學實證的健康生活提案》情緒情緒能量的不足，體現在我們會容易升起各種負面情緒，焦慮、急躁、沒耐心、負面悲觀，也會使我們做其他事時，無法能量全開、效率不佳，同樣也是需要復原及鍛鍊。復元試問一下自己: 最近單純為了喜悅、更新能量的活動佔了多久呢？舉凡種花、打球、看書、做愛、從事體育活動、聽音樂會、參觀博物館都可以，看電視也是可以，但容易接受太多心智及情緒的垃圾，沒有營養，且容易過量。如果不知道要做什麼，推薦可以來這裡看看維基百科 List_of_hobbies，或是google嗜好清單，從裡面看看，覺得有感到興趣的就做吧！就單純是為了好玩，培養一些跟平常生活無關的嗜好，但說不定也會擦撞出某些火花。鍛鍊在書中的個案有人缺乏自信，有的缺乏同理心，有人沒有耐性，書中分享這些個案鍛鍊自信、同理心及耐性的過程故事，在此就不多做描述。包容相對特質個性通常有相對的兩面，熱情和超然、自信與謙虛、小心及大膽、耐心跟急切，大部分人都會比較偏重一面，像我就很沒有熱情，超然面對一切😂，比起自信，相對地謙虛很多; 然後非常慢郎中😄，檢視自己在哪個特質上最不平衡，就可以找到自己需要鍛鍊的部分。心智作者指的心智能量主要有兩個，一個是專注，另一個為理性樂觀。關於專注，《Deep Work深度工作力：淺薄時代，個人成功的關鍵能力》，這本書是專門討論現代人失去了深度思考、深度工作的能力，被電子郵件及社群綁架分心的議題。理性樂觀則為接受世界原本的樣子，但永遠積極努力，朝向期望的結果或解決方式邁進。與之相反的就是悲觀、或者是盲目樂觀，船到橋頭自然直，期待什麼都不做，事情就會變好。精神精神能量是指讓生活與內心深層的價值觀吻合，同時超越自我利益，它是堆動我們各種行為的力量，維持動力、毅力和方向最強大的支持與來源。書中有個女性的故事，想要戒菸卻始終失敗，但在某一刻開始，它就再也沒有拿起一根菸，那個時刻就是得知自己懷孕的那天，胎兒的健康給了他實踐目標的力量。付諸行動知易行難，我們該如何提升和維持生活中各面向的能量呢？作者提出一個三步驟的進程「目標-真相-行動」。確立目標首先要回答一個問題: 我們的能量要如何使用，才能符合我們的價值觀？我們的生活步調太匆忙，很少停下來思考自己最重視的東西。但如果像我一樣，不知道自己最重視的價值觀是什麼怎麼辦～這就真的要停下來好好想想了，在Rokeach Value Survey中，有列出36項價值觀，可以認真思考，從中選出5項你最重視的，隨著人生再過，這5項價值觀也會再隨之調整，它們將成為我們度過人生的基本原則。知道真相接著就要誠實地面對我們自己，在日常行為中，有多少是不符合價值觀的，有時我們會自欺欺人，覺得自己做得不錯，或是不願面對真相，唯有誠實地面對失敗及做不好的地方才能去改進。建立儀式有了目標及知道首先要改進的目標後，選一個想要鍛鍊的目標肌肉，一個就好，提出明確的行動指南，在某個時間地點或情景該怎麼行動，將其轉為自發性的行為，關於這部分可以延伸參考《原子習慣》，針對如何建立習慣，有系統性的認識。總結作者將能量分成四個面向: 身體、情緒、心理及精神，讓我們知道必須照顧到每個面向，才能精力滿滿。該怎麼照顧呢？就是透過定時的更新復原及鍛鍊，能量是有限的，一昧地使用卻不補充無異於殺雞取卵。最後祝福大家每天的生活都能充滿能量～ 找到目標熱情，或者去做好玩的事！ 掰掰～ 👋延伸閱讀 [讀書筆記] 一週工作4小時: 擺脫朝九晚五的窮忙生活，晉身「新富族」！ [讀書筆記] 為什麼要睡覺? :睡出健康與學習力、夢出創意的新科學 " }, { "title": "懶人早餐: 15分鐘，高纖高蛋白低碳水", "url": "/posts/lazy-breakfast/", "categories": "生活", "tags": "food, life style, habit", "date": "2021-10-26 17:30:00 +0800", "snippet": "想少吃些外食的精緻碳水，於是乎開始研究自己下廚，在《原子習慣》裡有說到，想要開始培養一個新習慣時，要讓他容易去做，不會太麻煩，目標小一點，好容易踏出第一步並且持之以恆。所以我開始下廚的重點是簡單、方便、懶人，而不會是美味(可能是個人廚藝問題)、便宜，並且先只從早餐開始做起，今天就簡單分享一下我做了些什麼吧！食材選擇就是以最方便的為主！所以直接去逛了一圈家樂福，買了蛋、冷凍毛豆、冷凍花椰菜！冷凍蔬菜就是方便拉～ 不用洗菜、不用切菜，而且營養價值並不會比新鮮的冷藏蔬菜差，唯一的缺點可能就是比較貴，但這也不是現階段的目標，所以ok。為什麼買毛豆跟花椰菜呢？因為我只有看到這兩個XD，而100克的毛豆有14克左右的蛋白質，8克的膳食纖維、B-胡蘿蔔素跟一點點的維他命C。另外花椰菜也是含有豐富的維生素及礦物質～蛋簡單營養，不必多說!料理簡單最重要～ 其實就是炒炒就好，冷凍蔬菜本身都已經快熟了，退冰之後，進鍋裡加熱一下就ok。 毛豆炒蛋: 將幾顆蛋打入碗中，打散加入些鹽巴攪拌均勻，倒入鍋中煎一下，再加入毛豆，然後翻翻炒炒即可起鍋，灑點黑胡椒 炒花椰菜:一樣熱鍋後，放花椰菜下去炒炒，加點鹽巴就可以起鍋了，最後一樣灑點黑胡椒花費首次嘗試下廚，成功！僅花了15分鐘，幾乎不需要任何準備，食材買買，進鍋子裡翻一翻就好😄總共花費花椰菜1/5包=89 x 1/4 = 22.25，毛豆1/4包 = 69 x 1/4 = 17.25，2顆蛋 = 2 x 5 = 10，總共49.5元～但是份量有點少，所以也不是說很便宜。簡單記錄了一下開始下廚的動機及想法，希望對你有所幫助，如果你有更懶的撇步，歡迎下面留言跟大家分享唷！掰掰～ 👋延伸閱讀: [讀書筆記] 原子習慣: 細微改變帶來巨大成就的實證法則" }, { "title": "如何不用做額外的工作，就使你的收入倍增", "url": "/posts/double-your-money-without-any-extra-work/", "categories": "生活", "tags": "finance, life style, self improvement, digital nomad", "date": "2021-10-20 19:00:00 +0800", "snippet": "有這麼好康的事？！好拉，當然沒有，在這裡要討論的並不是要讓你的絕對收入倍增，也就是你每個月領的薪水並不會變多，而是如何花更少的錢，來獲得一樣的體驗，好讓你金錢的實際價值倍增～這是我在《一週工作四小時》這本書裡看到的想法，作者稱之為自由倍增因子，也就是你能藉由操控這些事，來讓金錢的實際價值倍增，他們就是做什麼(what)、在哪做(where)、何時做(when)、跟誰做(whom)。以認養代替購買 以體驗取代擁有想要住在山中的滑雪小屋，每天滑雪嗎？還是想要在某個海島別墅，每天享受日光浴及海灘，開著帥氣跑車，享受路人稱羨的眼光嗎？你可能會說，你需要變成億萬富翁才能過上這樣的生活。不！你並不需要！你想要的是住在滑雪小屋每天滑雪的生活，而不是擁有一間小屋;你想要的是海島風光、沙灘、比基尼，而不是買下一座小島; 你想要的開著跑車耍帥的虛榮心，而不是擁有一台跑車本身，財力雄厚與活得像百萬富翁是完全不同的兩件事。地理套利也就是利用匯率，在消費指數低的國家進行消費，一樣的金錢就可以擁有了更大的購買力！當你可以自由地決定你要在哪裡生活時，就可以獲得這項好處，所以脫離在辦公室裡工作的社會框架，是作者在《一週工作四小時》裡所提倡的，不過你是創業者還是受僱於人的打工仔都一樣～有時就算不能出國也一樣可以得到一些好處，比如說你最近想學衝浪，那你就可以直接住在宜蘭烏石港、台東東河附近，每天，或隔幾天想衝就衝，不需要再耗費通勤的時間跟金錢！時間上的自由當你不用週一到週五，朝九晚五地待在辦公室時，你就可以買週二到週四的便宜機票，或是選擇在平日的時候參加任何活動，因為通常假日的收費都比較貴。能把工作時間挪到六日，就算工時一樣，也可以相對地為你帶來額外的收入！避免付錢之痛及期待在《金錢心理學》這本書裡說到，在體驗消費的當下時，如果要你付錢，你就會感到痛苦，也就沒那麼快樂了～所以可以選擇預付的方式，提前預先支付掉活動的費用，讓你在體驗的當下，專心地享受美好的部分，除此之外，預訂好活動到活動發生的這段期間，還可以讓你每天都有期待的感覺，使得這個活動帶來的效益更多！Summary透過做什麼(what)、在哪做(where)、何時做(when)、跟誰做(whom)，能夠讓你相對變得富有，感謝大家的閱讀，在這邊聽我練蕭威，如果你還有什麼讓財富倍增的好方法，歡迎在下面留言跟大家分享唷！ 掰掰～ 👋延伸閱讀[讀書筆記] 一週工作4小時: 擺脫朝九晚五的窮忙生活，晉身「新富族」！[讀書筆記] 金錢心理學: 打破你對金錢的迷思，學會聰明花費 (上)" }, { "title": "RabbitMQ和Kafka有何不同？何時該選用哪種產品？", "url": "/posts/difference-bwtween-rabbitmq-and-kafka/", "categories": "Web Development", "tags": "message queue, kafka", "date": "2021-10-16 23:00:00 +0800", "snippet": "在上篇文章什麼是message queue? 優點及使用場景中，看完了為何要使用message queue之後，今天要討論兩類message broker的差異，分別是memory based及log based，memory based像是使用Redis作為broker或RabbitMQ，而log based最有名的，就比如說是Kafka。這篇文章會先來看看message broker普遍的基本特性及用法，然後再討論兩種broker的內部設計的不同，最後就可以比較在各種特性上，兩者的不同。基本特性Message borker最基本的操作就是produce跟consume，一個產生message，一個消耗message，此時我們可以問的幾個問題如下:Multiple consumers 當有多個consumer時，每個message會被處理多次嗎？還是只會被其中一個consumer處理到一次？Load balancing每個message只會被其中一個consumer處理到，所以你可以指派任意多個consumer去consume一個topic，當你想要並行處理你的工作時，這會非常有用。Fan-out每個message會被送到所有的consumer去處理，像是broadcast，可以用在當你的message需要到各個不同的系統時，比如說一筆交易的資料，需要被送到data warehouse保存、送到BI分析給老闆看、送到使用者的系統來更新他的交易資訊頁面。Persistence 當broker掛掉時，已經發送過來的messsage會消失嗎？還是等到broker重啟之後，會再重新發送？就是顧名思義，producer的每個message，是否會確保送到consumer那邊，broker掛掉，message還會不會在。不過consumer有沒有處理好這個message又是另一回事了(見下段Acknowledgements)。Acknowledgements 當consumer工作到一半掛掉時，如何確保每個message已經被完整地處理好了呢？因為consumer也可能隨時會掛掉，可能在收到訊息之前，或收到訊息但工作到一半時，broker為了確保訊息有好好地到達，會使用acknowledgement，acknowledgement就是必須由consumer告訴broker，他已經收到message，broker可以將他從queue中移除了，至於ack的時機不同會導致訊息被處理的次數的保證的不同。At most once先ack，再處理訊息，如果在處理到一半時掛掉，這個訊息就沒被完整處理到了，因為已經ack了，broker已經把訊息從queue中移開，不會再發送這個訊息出來，所以最差的情況就是沒被處理到，正常的情況就是處理一次，而且最多一次，此為at most once。//consumer first ack the message and the processfunction (message) { queue.ack(message) essage.ack()}At least once想反地，先處理訊息再ack，如果在處理到一半時掛掉，因為還沒ack，broker會再發送這個訊息出來，所以最差的情況就是訊息被處理到多次，正常的情況就是處理一次，而且至少一次，此為at least once。//consumer processes the message first and then ack itfunction (message) { process(message) message.ack()}Internal Design現在就來看看message system的內部設計，如此一來就可以知道各個系統的特性以及該如何回答上面的問題，Memory based這類系統顧名思義，主要使用memory作為message存放的地方，當consumer ack了某個信息後，就把它刪掉了，完全不留痕跡。當然很多系統也可以透過設置，決定要不要將信息寫到硬碟上，不過主要是用來做recovery的，確保broker本身掛掉時，message不會丟失，當確認了message已經成功抵達了它要到的地方後，一樣會把它刪掉。此類系統著重的是message從producer到consumer的過程，而不是留下一個永久的狀態或結果。而信息的傳送是由broker主動push給consumer的。Log based而log based的系統則是相反，只有要message進來，就都寫到硬碟上，是一個append only log，當consumer要消耗信息時，就是讀取檔案上的資料，讀到盡頭了就等通知，等有新的資料繼續被append到檔案中，有點像是Unix tool tail -f 的感覺。此時，信息的傳送consumer去向brokerpull。為了不讓寫入的速度被限制一個硬碟上，需要將一個topic的log partitioned，每個partition由一台機器負責，可以獨立地讀寫。Comparison between RabbitMQ and Kafka終於可以來看看兩者的比較拉～ 首先奉上一個表格，再來一點一點詳細討論！ 特性 RabbitMQ Kafka Load Balancing Yes Yes, but limited Fan-out Yes, through exchabge binding Yes Persistence Yes, through configuration Yes Inorder delivery Yes, conditionally yes, per partition Load Balancing Memory based: 自然地support了load balancing，當有message時，broker輪流地向跟他有建立連結的consumer推送信息，就達成了load balancing的效果，越多consumer，就可以平行處理越多的工作。 Log based: 無法天生支援load balancing，因為每個consumer彼此是各自獨立的，分別從頭、或從某個地方開始讀取log檔案，所以想達成load balancing，是透過partition的方法: 假設我現在有一個topic，並且將它partition成三份，此時就可以assign三個consumer給他，看起來就像是這一個topic的message被分給三個consumer，而實際上是每一個partition對應到一個consumer，所以！可以同時平行處理這個topic的consumer的數量，也就會是partition的數量。 Fan-out Memory based: 需要透過額外的設計才能達成，RabbitMQ implememt的AMQP協議，exchange binding可以實現pub-sub的patter。 Log based: 自然地support fan-out，每個consumer對log檔案想讀哪就讀哪，想重複讀幾次就讀幾次。Persistence Memory based: 透過設置，可以同步將message寫入硬碟，確保不會丟失，不過就只保存到當consumer成功消耗之前。 Log based: 如前面所述，每個message都會寫入硬碟，除非你說要刪掉它，不然就會一直在。Inorder delivery Memory based: 無法保證message一個一個按照順序的被處理，除非每一個topic只有一個consumer。 Log based: 每個partition上的message，一定是被consumer做一個sequential read的動作，所以信息一定會被按照順序讀取，但不同partition之間就沒有順序的保證，他們基本上是獨立的。Use cases最後就來看看在哪些場景比較適合使用哪一種產品吧！是否需要被保存下來?如果你想要message被保存下來，那就用log based的messaging system，保存下來有哪些好處呢？ 可以肆無忌憚地去consume message，可以去嘗試、做實驗，不用怕message會不見， 各種event sourcing的好處，有興趣的可以google它看看～工作昂不昂貴?如果處理一個message的工作量是很大的，需要耗費很多時間才能做完，你可以比較不會想用log based的產品，為什麼呢? 它無法使用大量的consumer來平行地處理所有的工作，因為可以平行工作的consumer的數量受限於partition的數量 在一個partition裡，只要有個message需要耗費很多的時間，就會造成塞車，也就是head of line blocking。順序重要嗎?有些類型的message彼此是獨立不相干的，被處理順序是如何並不重要，就沒一定要使用log based的產品，但當你需要保留message的順序時，唯有log based的messaging system可以給你保證，不過只限定於同個partition。有哪些例子是順序重要的呢? 比如說對一個使用者的帳戶餘額做加減乘除的運算，順序不同結果就不同，但你可以使用user id作為partition key，則在每一個partition裡保持對的順序就好，不同的partition間的順序就不重要了。感謝你閱讀到這邊～ 希望以上的內容對你有一丁點的幫助，掰掰～ 👋" }, { "title": "RESTful API: How to design paths and identify resources", "url": "/posts/restful-api-how-to-design-paths-and-identify-resources/", "categories": "Web Development", "tags": "http, restful api, api", "date": "2021-10-14 13:20:00 +0800", "snippet": "繼上篇文章RESTful API簡介: 什麼是RESTful? 以及為何需要它?後，我們知道了RESTful API是resource based的，今天講著重討論該如何設計resource，也就是HTTP URL中path的部分。Resource based每個URL都應該對應到一個或多個資源，使用那些使用者與你的服務互動時會需要用到的資源(名詞)，並使用HTTP Method來表明你想要對資源的操作(動詞)，比如說你是一個網誌服務，使用者可以看、新增、修改、刪除自己的文章，也能瀏覽別的作者的文章，GET /articles -&amp;gt; 看全部的文章GET /articles/d8e209 -&amp;gt; 看某篇文章POST /articles -&amp;gt; 新增文章PUT /articles/4f8662 -&amp;gt; 修改某篇文章DELETE /articles/4f8662 -&amp;gt; 刪除某篇文章GET /authors/homuchen -&amp;gt; 看作者homuchen的資訊GET /authors/homuchen/articles -&amp;gt; 看作者homuchen的所有文章將操作轉成名詞如果你想要進行的操作比較複雜，可能是需要同時對多個資源進行操作，又或者是無法以CRUD之一來表示，可以考慮自己創造一個新的Resource。無法以CRUD表示比如說你想要lock及unlock某篇文章，此時只有一個人可以讀取或修改它，HTTP Method裡沒有可以表示lock及unlock的操作，所以就自己創造一個資源叫article-locks，並使用PUT、DELETE來操作。PUT /article-locks/{article_id} -&amp;gt; Lock住某篇文章DELETE /article-locks/{article_id} -&amp;gt; Unlock某篇文章牽涉多個資源當你的一個任務需要同時對多個資源進行操作時，有兩種做法，一個是讓client發出多個api請求，另一個則是定義一個新的endpoint，來幫使用者做完所有的事。比如說API的使用者想要發起一筆交易，需要從A帳戶扣一筆錢，在B帳戶新增一筆錢，如果讓client自己送出兩個api請求也可以，但是他就要處理其他許多狀況，比如說其中一個api成功，另一個失敗怎麼辦。#還要確保兩個api request同時成功或同時失敗PUT /accouts/A/withdrawal -&amp;gt; 從A帳戶扣一筆錢PUT /accouts/B/deposit -&amp;gt; 在B帳戶新增一筆錢或者可以創造一個新的資源叫transaction，使用PUT來發起一筆交易，而api server則幫client處理了所有該注意的事，使這個交易atomic、檢查A帳戶裡的餘額夠不夠等等…PUT /transactions -&amp;gt; 發起一筆交易Identify sub-resources via path segments有些資源他本身可能沒有意義，也不會被直接使用，必須仰賴在某些資源下，才知道他所要代表的事物，比如說文章底下的留言，如果不知道它們是在哪篇文章底下，留言本身就無法被看懂，此時可以使用多段的path來表示parent-child的階層關係。/articles -&amp;gt; 所有文章/articles/{article-id} -&amp;gt; 某篇文章/articles/{article-id}/comments -&amp;gt; 某篇文章的所有評論/articles/{article-id}/comments/{comment-id} -&amp;gt; 每篇文章的某則評論Summary今天看了要如何設計我們API的URL，重點就是URL是資源、是名詞，搭配method，表示要對資源進行的操作，當操作無法以CRUD表示、或需要同時對多個資源進行操作時，可以考慮創造新的domain entity。另外當資料有階層性的關係時，可以使用多段的path還表示。這是RESTful API一系列文章中的一篇，想了解更多關於RESTful API及HTTP的，可以看這篇目錄:RESTful API Design — A practical guide" }, { "title": "[讀書筆記] 一週工作4小時: 擺脫朝九晚五的窮忙生活，晉身「新富族」！", "url": "/posts/book-note-the-four-hour-work-week/", "categories": "讀書筆記", "tags": "books, life style, work, self improvement, remote work, productivity", "date": "2021-10-10 23:00:00 +0800", "snippet": "讀完這本《一週工作四小時》後，讓我產生了許多在工作上及生活上的新想法，跳脫朝九晚五的社會框架、拒當社畜、認識了新富族、發掘了更多生活型態的可能性。在這篇文章裡，我將會分享我原先既有的一些想法、這本書所提出的內容，最後是我之後可能會做的一些改變！ 每當發現自己屬於多數陣營時，就是你停下來三思的時候 - 馬克.吐溫過去的想法FIREFIRE(Financial Independence Retire Early)[1]，財務自由、提早退休，是我工作之後的幾年一直抱持著的想法，提早規劃退休，儘早儲蓄、投資，打造自己的被動收入，等到被動收入可以支付你的生活支出的時候，蹦！自由了～可以不必為了討生活而工作，擁有自由去做任何你想要做的事，這些都沒錯，也很棒，那問題在哪裡呢？提早退休想要每天醒來不用面對老闆工作上要求嗎？等退休; 想要冬天住在滑雪小屋，每天滑雪，夏天住在海島別墅，每天躺在海灘做日光浴衝浪嗎？等退休; 想要找份對社會有貢獻、有意義的工作嗎？等退休; 想要重拾荒廢已久或培養新的興趣嗎？等退休;為了提早退休，於是在現在做了許多犧牲，我不能休太長的假，因為要賺錢，也怕被炒魷魚，我不能花大錢享受奢華的體驗，因為要存起來，時間久了以後，就有夠多的被動收入可以資助我們想做的事。當我們每天的生活的目標都是為了提早退休，就會變得只追逐金錢，而且有了藉口不去思考更重要的問題: 我想要成為怎樣的人? 我想要做什麼? 因為這些問題都可以用一些簡單的理由來搪塞過去，也就是等退休再說、等有時間再說、等錢夠多了再說…想要的生活終於!熬了十幾年、二十幾年，退休的這天到來了(40幾歲退休還不賴吧？)，突然間擁有了許多的時間，你卻不知道要做什麼，或者是終於去做了你想做很久的事，結果卻發現沒有你想像中的那麼美好。除去了所有不喜歡的事之後，迎來的不會是一個美好人生，而會是一片空白，因為你不知道你想要追求的目標是什麼，有什麼夢想或是事物想要去體驗，過去的人生都在賺錢拼退休…本書摘要本書介紹了一群次文化人士: 新富族，以自由及機動性作為新貨幣，自己決定何時工作、何時追逐夢想、在哪裡生活的一群人。作者提出四個步驟DEAL(Definition、Elimination、Automation、Liberation)，引導大家重新設計生活型態，並且自己親身實踐，可以在書中看到許多作者的經驗及故事。D - 定義人生什麼是新富族(New Rich)，首先先來看看新富族跟延後人生族(工作 -&amp;gt; 儲蓄 -&amp;gt; 退休)的差別在哪吧!所以，誰是新富族？ 重新安排個人行事曆的員工，他談出一份遠距的工作契約，用十分之一的時間達成百分之九十的產出，因而得以自由地去各地滑雪，每月還能有兩週帶家人出門旅遊。 刪去獲利最少的客戶與計畫的老闆，他將所有業務外包，在世界各地旅遊，蒐集罕見的歷史文件，同時在網站上遠距工作，展示他的繪圖設計。 選擇孤注一擲，拿出全部身家的學生，建立網路影片租借服務，從一小群HDTV愛好著的利基市場，每月賺得五千美元的收入。這項每週兩小時的兼差，讓他能夠全職為動物全力奔走。可以看出新富族他們都有以下的共同點:有目標、夢想知道自己想成為怎樣的人，想要做的事，而不是每天埋首於追求金錢、事業、名聲、家庭、生活的的各種瑣事、而忽略了重要的問題，每天致力於除去不想做的事，渴望自由，卻不知道有了時間之後要幹嘛。如果不知道自己想做什麼怎麼辦呢？那更不能繼續埋首工作，要開始思考，並且行動跟實驗，這邊我推薦另一本書《做自己的生命設計師: 史丹佛最夯的生涯規劃課》，瘋狂地發想所有可能的選項，並打造原型去實驗，不知道自己喜歡做什麼時，唯有去做做看才會知道是否喜歡。有錢又有閒你可能會說我哪有那個錢和時間去做這些事！沒錯，目標就是要變得有錢又有閒，後面的EAL就是方法論，教你如何擁有更多的自由時間，以及金錢來資助你過上夢想中的生活。 E(Elimination)，教你去除掉所以不必要花費的時間，維持大部分的產出但同時多出許多時間。 A(Automation)，打造自動創造收入的資產，重點目標是不要花費你的時間，自動的進帳。 L(Liberation)，逍遙自由的機動性，能讓你的財富自動倍增！E - 排除旁騖八十/二十法則八十/二十法則，80%果來自20%的因，在許多地方都能用上這個法則，比如說全世界的資產分配、公司的大部分的利潤來自與少部分的客戶或產品、個人工作的時間與產出，本書作者很喜歡這個法則，並在他其他的書裡也反覆提到，重點就是要找到那最重要的20%的事情，去掉80%的時間與精力，達到足夠滿足的結果。不必要、不重要的工作作者在書中的例子是，他削減了95幾%的客戶及難搞的客戶，不做他們生意，把精力留給帶來大部分利潤的客戶，那些即使你不用聯絡也會持續買單的客戶，結果就是，工作的時間可能只剩下原先的10%，快樂程度高上許多，利潤卻只少掉一點。接著再研究在研究五大客戶的特徵，在下週延攬到三個相似的買家，四周下來，作者營收翻倍，每週工時從80小時降到15小時！不必要的資訊大家每天花在閱讀新聞、滑臉書、PTT的時間有多少呢？這些資訊真的都有必要去知道嗎？現代人吃進太多不具營養價值的空卡路里，資訊也是一樣，多數資訊不僅耗時，而且跟你的目標無關。作者建議，每次要閱讀資訊時，問自己，對我而言，這項資訊有立即、重要的用途嗎? 單單是有關還不夠，還必須是立即且重要的，如果資訊無法用在要事上，或是等你要用的時候也已經忘記了，那就等於無用的資訊。帕金森定律我們有多少的時間完成一項任務，我們就會花多少的時間完成，這就是帕金森定律。每天朝九晚五工作的社會文化，讓我們必須每天在辦公室待上八個小時，就算工作不需要那麼久的時間來完成，我們還是會被迫創造各種活動來填滿時間，如果我們有15小時，就會填滿15小時; 如果我們有8小時，就會填滿8小時; 如果你急事，2個小時後要離開辦公室，那你就會神奇地在2個小時內完成工作。世界上的每個人真的都需要八個小時來完成工作嗎？！這只是重量不重質的社會遺毒，應該要關注產出，而不是在辦公室坐滿八小時，所以員工的下一步就是談出一份遠距工作的契約，好脫離辦公室的框架，變得更有效率，這部分會在後面L的章節更多地討論。A - 自動進帳要想過上奢華生活，或是放手追逐夢想的一個重要要素就是: 收入，在這一階段，就是要打造出可以自動帶來收入的事業，從尋找Idea、找出利基市場、測試廣告效益，最後則是脫身及自動化。因為這部分的內容我自己也沒有實踐，細節就不多在這裡分享了，有興趣的讀者推薦你去書裡看看～簡單分享一個點就是，你可能會覺得所有事情都自己來做比較省錢，自己當客服回覆客戶問題，自己處理訂單、出貨，但以工程師的話來說，這樣就有兩個問題，一個是單點失敗，另一個是無法擴展。 單點失敗: 一但你不能工作了，整個事業就將無法運作，所以你只能一直一直不停地工作 無法擴展: 當客戶越來越多時，總有一天你將會無法自行處理所有的業務L - 逍遙自在如果你每天只在辦公室工作1小時，我想大部分的老闆都會不高興，為了能夠自由地掌握自己的時間、去到任何你想去的地方，想辦法談出一份遠距工作契約將會是第一步。比如當你有辦法做到達到相同產出，但只花1/4的時間時，如果你還待在辦公室，人們就會要求你繼續工作到八小時，以達成4倍的產出，或者你就必須裝忙，來填滿這八小時，這就是社會框架下的辦公室文化。所以作者在這一章節中，教你如何一步一步地得到一份遠距的工作，跟著書中人物的故事，策略性地、有方法地達成遠距工作的目標。Summary看完之後，非常興奮！立馬先查了一下東南亞各地的生活成本，結果發現去峇里島住一個月，大部分根本比住在台北便宜，在曼谷住上五星級的飯店，擁有頂樓無邊際泳池及健身房，跟在台北租個鳥籠的價格也相去不遠，那我幹嘛要住在台北呢XD以上只是利用機動性達成最簡單的地理套利，想要體驗奢華的生活，沒有一定要成為億萬富翁，賺錢不是目的，過上你想要過的生活才是。重要的是我們要如何利多出來的時間，如果你想滑雪，何不直接住在北海道或阿爾卑斯山;如果想學潛水，直接去到個海島國家; 如果你不想旅遊，就去做你任何想做的工作; 如果你不知道要幹嘛，就趕快多多去體驗這個世界～祝大家都有錢有閒，去實現自己的夢想，讓這世界變得更加美好，掰掰～👋參考資料 Playing with FIRE(Financial Independence Retire Early): How Far Would You Go for Financial Freedom?" }, { "title": "[讀書筆記] 為什麼要睡覺? :睡出健康與學習力、夢出創意的新科學", "url": "/posts/book-note-why-we-sleep/", "categories": "讀書筆記", "tags": "books, psychology, health, sleep", "date": "2021-10-02 23:00:00 +0800", "snippet": "如果有一個產品，只要你使用它，就可以擁有更好記憶力、學習能力、注意力提升、脾氣會變好，不易怒、遠離肥胖及糖尿病及心血管疾病、抵抗力變好不易感冒、不易罹癌、變帥變漂亮、更有吸引力～請問你願意花多少錢購買這產品呢？讓我現在告訴你，免錢！你每天都有機會享受到這些好處，需要做的就只是好好地睡覺～～😴大綱在《為什麼要睡覺》裡，首先解釋睡覺的生理機制，我們的身體是透過怎樣的設計，讓我們感到疲憊想睡，越理解它，才能越知道如何不去破壞它，搞到自己失眠。接著說明在各個方面睡覺帶來的好處，及沒有睡覺的壞處。 睡覺的機制: 身體怎麼知道要睡覺了? 睡覺的過程: 睡著時大腦在幹嘛？ 記憶 注意力 情緒 心血管系統 肥胖 美容覺 免疫力 創造力 如何睡得更好睡眠的生理機制或許我們都聽過或經歷過去旅行有時差睡不著、聽過或使用褪黑激素、喝杯咖啡或茶來驅逐睡意，這些跟睡眠有關的身理機制是什麼，是這本書一開始時要討論的。近日節律也就是常聽到的生理時鐘，我們的身體會有一個近乎24小時的節奏，讓你每天會醒來、想睡，還控制其他節律模式，包括飲食時間、情緒、代謝、核心溫度等等等…而這個身理時鐘在哪裡呢？就是在我們腦中的是視力交叉上核，他每天都會利用大自然之中最穩定的訊號源: 陽光來調校，並透過褪黑激素，來告訴我們的大腦及身體: 天黑了！該睡覺囉～但每個人的週期也可能會偏移，所以有人會是晨型人，而有人卻是夜貓子，因為如此一來有在演化上的優勢，就可以錯開大家睡覺的時間，有人守夜，避免睡覺時被偷襲，增加生存的機會。不過現代社會的作息卻比較適合晨型人，一早要起床上學、上班，所以對於夜貓子也不要太苛刻，他們也不是故意要晚睡晚起，天生的基因讓他們如此，期許在未來的社會裡，可以有新設計的社會制度，讓大家都睡飽飽～腺苷另一種會讓我們想睡的，就是腦中的一個化學物質: 腺苷，從我們一早醒來開始，我們的大腦就會開始累積腺苷，只要我們不睡，腺苷的濃度就會越來越高，而隨著濃度越來越高的腺苷，我們的睡眠壓力就會越大，越來越想睡覺。而有一種物質，會卡住腺苷受體的位置，使我們的腦感受不到睡眠壓力，他就是咖啡因，所以在攝取咖啡因之後，我們的精神會變好，不過只要待身體將咖啡因代謝掉之後，就會開始想睡。咖啡因待謝的速度因人而異，半衰期可能3~6個小時，所以如果你晚上6點喝一杯咖啡，到了12點，有可能身體裡還有一半的咖啡因還沒代謝掉，以至於睡不著。睡覺的組成隨著科技的進步，我們可以記錄睡覺時的腦波腦部活動，得知睡眠有個1.5個小時的週期，每個週期又由非快速動眼睡眠跟快速動眼睡眠組成，越接近天亮的週期裡，快速動眼睡眠的比重會越多。如果你讓自己晚睡或早起，這兩種睡眠少掉的比重就不一樣，我們需要這兩種睡眠，缺一不可，他們各有不同的功能。非快速動眼睡眠此時的大腦，各個腦區協調一致，發出同步且緩慢的腦波，所以需要跨腦區協作的功能跟非快速動眼睡眠息息相關，比如說記憶要將短期記憶轉為長期記憶，需要負責短期記憶跟長期記憶的腦區的溝通;又比如本能的衝動跟理性的控制，也是需要我們的本能腦與掌握高級認知的額葉做溝通，所以如果沒睡好，可能記憶力會變差，情緒容易波動，這些會在下面的章節中詳細說明。快速動眼睡眠此時的腦波看起來就像醒著一樣，掌管情緒及記憶的腦區特別興奮，作夢也是發生在此一階段，在腦內上演各種小劇場，並且偏好把各種不相關的記憶拿來組合，所以跟創造力息息相關。記憶 在學習前的睡眠有助於形成新記憶，學習後的睡眠也能幫助鞏固記憶。我們的睡眠分為短期記憶(工作記憶)及長期記憶，由不同腦區負責，分別為海馬迴及皮質，短期記憶的容量有限，將記憶從短期轉為長期的機制，也還持續在研究當中，不過睡眠一定扮演著重要的角色，能將記憶從海馬迴搬到皮質，以鞏固記憶，並且清空了海馬迴，讓你可以繼續學習新事物，而在這之中，跨腦區溝通的非快速動眼睡眠起到了相當的作用。實驗 - 睡眠之後的學習請兩組人分別記憶100組人臉跟名字的對照，記完之後，一組經歷90分鐘的午睡，另一組不能睡，之後再記100組，對於後面100組事實進行測驗，測驗結果顯示，有經過一晚睡眠的組別比起另一組，多記得了20%的事實。這個實驗針對睡眠之後的學習，指出睡眠能清出工作記憶，有利於我們記住新的記憶。實驗 - 學習之後的睡眠另一個實驗則測試學習之後的睡眠對記憶的影響，一樣先請參與者記憶一份語文資料，在這之後的八小時裡，分別測試睡與不睡，記憶流失的情況，結果發現睡覺組比起不睡組，表現好了20%-40%[1]。注意力很明顯地，睡不飽會無法集中注意力，這點似乎毋庸置疑，每個或多或少都有親身體會過，專注力的短暫喪失，看書看一看，不知道前幾秒鐘讀了哪些東西，恍神發呆頭突然點了一下，如果你在開車，這短短的一兩秒鐘就足以喪命，接著來看看睡眠不足對注意力的影響到底有多大，利用實驗將結果量化，讓我們知道多少程度的睡眠剝奪，對我們人身安全有多大的影響！實驗 - 注意力喪失在實驗室中，用來測量注意力的方法如下: 讓受試者一看到電腦裡亮起的燈，就必須馬上按按鈕，並記錄反應時間，雖然不同程度的睡眠剝奪都有造成反應時間變長，但這裡我們更關心的是完全失去反應的失神，也就是可能出車禍的那個瞬間的次數。實驗結果為，經過一整天連續24小時不睡覺，失神的次數多了400%，如果繼續不睡覺，這個次數可以繼續上升。而每晚只睡4小時且連續6天的受試者，表現跟一整天不睡的人一樣，失神的次數多達了400%，如果連續到11天，則表現跟持續48小時不睡一樣。接下來最令人擔心的是每晚睡6小時的受試者，這也許跟許多人平常的睡眠時間差不多了，在經過10晚的只睡6小時後，失神的次數的表現跟連續24小時沒睡一樣！多了400%，情緒 睡眠不足時，腦中的情緒中心反應會更強烈沒睡飽，情緒會暴躁可能不是沒有原因的，可以看看我們的大腦，在睡眠缺乏時會如何反應。杏仁核，負責威脅偵測、啟動我們身體戰或逃反應的中心，是對於我們生存至關重要的本能機制，當我們遇到危險時，心跳會加速、血壓升高、緊張、集中注意力已準備戰鬥或逃跑，以下一個實驗，就是檢視缺乏睡眠時的杏仁核。實驗 - 情緒反應讓受試者分別觀看不同情緒梯度的照片，從情緒中立的照片比如說一張卓子、一顆蘋果，到有負面威脅感照片，像是著火的房子，張著獠牙的蛇等等…一組受試者是有睡飽的，另一組則沒睡，可以觀測到沒睡覺的受試者，在看到帶有情緒的圖片時，杏仁核的反應多了60%!心血管系統 缺肥睡眠將導至心跳加速、血壓升高、提高冠狀動脈粥狀硬化的機率睡眠不足對於心血管的影響的根本原因，就是它導致了交感神經過於興奮，在許多睡眠缺乏的時候裡，都發現了交感神經的興奮，交感神經是個激動的系統，必要時會使心跳加快、呼吸急促、與增加肌肉張力等功能，使人焦慮繃緊，進入備戰狀態，長時間處於這個狀態就像是車子引擎一直以高速運轉一樣，活塞、油封、排檔等各個部件也會開始損壞。而夜晚睡覺時，又是生長激素分泌最旺盛的時候，生長激素能對身體進行修復，當然也包括我們的血管，睡眠不足對血管造成傷害又減少修復的機會，以致心血管疾病發生的機率的上升。實驗 - 日光節約時間全球性的一場大實驗，約15億人參與，每年從冬令時間轉為夏令時間的那天，少掉了一個小時的睡眠時間，結果隔天帶來心臟病發作尖峰😱肥胖 沒睡飽會更餓、想吃更多、更傾向於吃垃圾食物、且身體捨不得消耗掉脂肪作為能量來源我們的身體有兩種控制食慾的激素，瘦素，及飢餓素，顧名思義，瘦素濃度高時，讓我們感覺飽了沒什麼食慾，飢餓素會啟動強烈的飢餓的感覺，而睡眠不足會使瘦素濃度降低，飢餓素的濃度升高，導致我們吃吃吃～除了吃更多之外，還會無法控制衝動，吃下更多的垃圾食物，睡眠缺乏時，前額葉皮質，也就是能深思熟慮、控制決定的區域，變得不活躍，而較原始的腦部構造，也就是驅動慾望的區域對食物的反應也增強了，這種不在審慎自制而是轉向原始慾望的腦部活動，使我們選擇食物時，傾向吃那些吃起來比較爽的垃圾～最後！睡眠不足時，身體會捨不得捨棄脂肪，所以消耗脂肪以作為熱量來源的比例會變少，基於以上種種原因，對於想要擁有更好的體態的人，一定要好好睡覺呀！美容覺 睡飽飽會更有吸引力!有個實驗室這樣的，讓一群18到30歲受試者分別拍兩次照片，一次是睡飽飽，另一次只睡五小時，之後請一群人來對照片評分，針對的項目有健康狀況、疲勞程度、吸引力。結果出爐～一個人經過一夜短眠之後，較不健康、比較疲倦、且明顯缺乏吸引力，美容覺得以印證！免疫力 睡得越少，愈可能感冒，且對付癌症的殺手細胞數量減少每個人可能都有過經驗，當感冒時，渾身不舒服，只想好好躺下來睡一覺，此時的免疫系統刺激你的睡眠系統，要求更多的睡眠時間，幫助加強戰力！可以知道睡眠和免疫系統之間，有非常密切的雙向關係。實驗 - 噴病毒實驗請一群受試者來到實驗中進行為期一週的實驗，首先往他們的鼻子裡噴了許多病毒，接下來的一週裡，不斷採集血液和唾液樣本，還有鼻涕，利用血液及唾液中的免疫抗體和鼻涕的量來確認他是不是得了感冒。這些人依睡眠量被分為四組，創造力TODO如何睡得更好光線現代生活充斥著各種電子產品，就算到了晚上，燈光通明，看著電視、用電腦、滑手機等等的活動，讓我們一直暴露於光照之下，干擾了我們大腦利用光線來同步近日節律。在該產生褪黑激素，叫我們身體準備睡覺的時候，卻還是很亮！大腦誤以為還沒天黑，以至於晚上難以入眠。到了晚上，減少暴露於光線之下，電腦手機可以使用夜覽模式，減少藍光，調低室內的燈光亮度。晚上的必要照明，可以使用來自水平視線以下的光，因為我們眼睛被設計用來接收光的部分，他的目標是對準著天上的。[2]溫度別在接近睡覺的時間運動，體溫過高將不利於入睡，也可以在睡前洗個熱水澡，利用充滿血液的表面皮膚散熱，降低我們的核心溫度，涼爽的室溫也比溫暖的室溫更容易入睡。心情最後心情要放鬆，腦袋別胡思亂想，不要為明天憂慮，因為明天自有明天的憂慮，或許可以把待辦事項寫下來，透過寫這個動作，清空你的腦袋。做做腹式呼吸或冥想，調整呼吸的速率，來使副交感神經作用，好好鬆一下～～最後祝大家睡得飽、睡得好、睡得呱呱叫，擁有健康的身體及聰明的腦袋，掰掰～～👋參考資料 J. Jenkins and K. Dallenbach, “Obliviscence During Sleep and Waking,” The American Journal of Psichology, Vol. 35, 1924, pp. 605-612. doi:10.2307/1414040 Youtube: Master Your Sleep &amp;amp; Be More Alert When Awake" }, { "title": "RESTful API簡介: 什麼是RESTful? 以及為何需要它?", "url": "/posts/restful-api-introduction/", "categories": "Web Development", "tags": "http, restful api, api", "date": "2021-09-27 20:00:00 +0800", "snippet": "在web開發裡，API是幾乎無所不在，而其中最常見的應該就是基於HTTP協議的RESTful API，這篇簡介跟討論到底什麼是RESTful，為何有它的出現?這是RESTful API一系列文章中的一篇，想了解更多關於RESTful API及HTTP的，可以看這篇目錄:RESTful API Design — A practical guideIntroduction首先，什麼是RESTful，可以說它是一種慣例，一個關於HTTP API如何設計的style，慣例就是並沒有任何的強制性，但當大家都遵守的慣例時，特立獨行的邊緣人可能就會被排擠，至少是難以融入大家的，有了慣例，可以不需要在每次要做事前都要溝通，大家就照著以前一般是怎麼做的做就好。所以你會希望你要使用的API的夠RESTful的，這樣你用起來才方便、好用，你也會希望你開發的API是RESTful的，這樣客戶用起來才會開心。當然你也可以不要，如此一來，客戶要用你的API時，會需要更多地去查看你的文件，他們可能就會覺得麻煩、不開心，你就少了一些賺錢的機會了。所以接下來看看RESTful API到底是長怎樣吧!Resource based首先他是resource based的，也就是每個URL對應到的是一個或多個resource、entity，是名詞，而不會是動詞，比如說下列這樣就是RESTful:/posts -&amp;gt; 代表全部的posts/posts/1 -&amp;gt; 代表某一篇post/posts/1/comments -&amp;gt; 代表某一篇post的所以留言那怎樣不是RESTful呢:/getPosts -&amp;gt; 代表全部的posts/getpostComments/1 -&amp;gt; 代表某一篇post的所以留言Actions有了名詞，那動詞呢？如果想要對資源做一些操作怎麼辦呢？比如說新增、修改、刪除。此時就是使用HTTP的method，GET、POST、PUT、DELETE，分別對應到讀取、新增、修改、刪除。看幾個例子吧!GET /posts/1 -&amp;gt; 取得某一篇文章POST /posts -&amp;gt; 新增一篇文章PUT /posts/2 -&amp;gt; 修改某一篇文章DELETE /posts/2 -&amp;gt; 刪除某一篇文章為什麼RESTful是長這樣呢？基本上RESTful就是verbs x nouns、操作對上資源，因為HTTP有URL代表資源，還有methods，這也是為何基於HTTP的RESTful API自然而然就會長成這樣的原因。但HTTP methods有限，所以通常只會有幾種操作，也就是CRUD，這也是為何常常RESTful API就是對資源進行CRUD的操作，大部分簡單的應用也許這樣就夠了，如果你的應用，無法以簡單的CRUD表示，比如說需要同時對多個資源進行操作才能完成某項任務，那可以需要重新思考如何設計URL，model你的resourse，之後會在後續的文章裡再來討論。若對於HTTP協議還不熟悉的，可以看這系列文章中，前面關於HTTP的部分。Summary大概知道了RESTful API應該是什麼樣子，還有許多細節的部分，會在後面的文章中慢慢討論，比如說URL的設計、如何model resource、documentation、versioning等等…" }, { "title": "[Golang] Common verbs of formatting string", "url": "/posts/golang-common-verbs-for-formatting-string/", "categories": "Web Development", "tags": "golang, formatting", "date": "2021-09-20 15:30:00 +0800", "snippet": "在fmt package裡Printf, Fprintf, Fscanf, Scanf，或像是log package裡的Printf, Fatalf，只要是function名字後面有f的，就能format你的input，以fmt.Printf為例:fmt.Printf(&quot;My name is %s. I am %d years old&quot;, &quot;HoMuChen&quot;, 30)//My name is HoMuChen. I am 30 years old第一個參數將會是最後輸出的字串，不過中間我們可以看到%s、%d的東西，稱之為verb，verb會被後面的參數取代掉，並且是依照你指定的格式，這篇文章將會分享一寫常用的verb。Overview以下為一個常用的verbs表格，依照要format的值的型態做分類，後面再詳細說明: category syntax description general %v value in default format   %T type   %% literal % sign boolean %t true or false interger %b binary   %o base 8   %d base 10   %x base 16   %X base 16 with upper-case letters floating %e scientific notation   %f decimal point but no exponent   %g for large exponents string %s string   %q double quoted string padding %10s width 10 string   %-10s width 10 string left padding   %10d width 10 digit   %010d width 10 digit filled with 0 floating precision %8f width 8 floating number   %8.2f width 8 with 2 digit presicion floating number   %.2f 2 digit presicion floating number General %v: 根據不同的值的型態，預設的格式 type format boolean %t string %s int %d float32,float64 %g %T: 值的型態 fmt.Printf(&quot;The type of this value is %T&quot;, &quot;I am a string&quot;)//The type of this value is stringfmt.Printf(&quot;The type of this value is %T&quot;, true)//The type of this value is bool %%: 真的想要%的時候 fmt.Printf(&quot;%v %%&quot;, 100)//100 % Boolean %t: fmt.Printf(&quot;This is %t&quot;, true) Integer %b %d %x: base 2, 10, 16 fmt.Printf(&quot;base 2: %b, base 10: %d, base 16: %x&quot;, 255, 255, 255)//base 2: 11111111, base 10: 255, base 16: ff Floating point number %e: 科學記號表示 %f: 十進位表示，預設顯示到小數點後六位。 fmt.Printf(&quot;%f&quot;, 123.123456789)//123.123457 %g: 小數點後很多位的話，用%g全部顯示出來。 fmt.Printf(&quot;%g&quot;, 123.123456789)//123.123456789 String %s: 就是字串～ %q: 以雙引號括起來的字串，就不需要再額外寫類似\\&quot;escape掉。 fmt.Printf(&quot;%q&quot;, &quot;I am a string&quot;)//&quot;I am a string&quot; Padding有時我們想要輸出的字串是一樣長度的，可以在前面加上一個數字，代表你想要長度，以下例子: %10s: 寬度為10的字串 users := []string{&quot;David&quot;, &quot;Mu&quot;, &quot;HoMuChen&quot;, &quot;Noname&quot;}for _, user := range users { fmt.Printf(&quot;User: %10s does something\\n&quot;, user)} User: David does somethingUser: Mu does somethingUser: HoMuChen does somethingUser: Noname does something %-10s: 寬度為10的字串，左邊對齊 users := []string{&quot;David&quot;, &quot;Mu&quot;, &quot;HoMuChen&quot;, &quot;Noname&quot;}for _, user := range users { fmt.Printf(&quot;User: %-10s does something\\n&quot;, user)} User: David does somethingUser: Mu does somethingUser: HoMuChen does somethingUser: Noname does something %-7d: 寬度為7的整數，左邊對齊 contentLengths := []int{70, 240, 614, 12345}for _, contentLength := range contentLengths { fmt.Printf(&quot;content length: %-7d bytes\\n&quot;, contentLength)} content length: 70 bytescontent length: 240 bytescontent length: 614 bytescontent length: 12345 bytes Floating point number precision也可以指定浮點數的總長度及小數點後要到第幾位。 %10f: 總長度為10的浮點數，小數點後預設為6位，如果需要超過長度10才能表示，還是會超過。 fmt.Printf(&quot;response time: %10f ms\\n&quot;, 25.35)fmt.Printf(&quot;response time: %10f ms\\n&quot;, 125.35)fmt.Printf(&quot;response time: %10f ms\\n&quot;, 2125.11) response time: 25.350000 msresponse time: 125.350000 msresponse time: 2125.110000 ms //長度超過9了 %.2f: 指定小數點後到第2位。 fmt.Printf(&quot;response time: %.2f ms\\n&quot;, 25.35123)// response time: 25.35 ms %10.2f: 總長度為10，且只小數點後兩位 fmt.Printf(&quot;response time: %10.2f ms\\n&quot;, 25.35)fmt.Printf(&quot;response time: %10.2f ms\\n&quot;, 125.35)fmt.Printf(&quot;response time: %10.2f ms\\n&quot;, 2125.11) response time: 25.35 msresponse time: 125.35 msresponse time: 2125.11 ms Summary在這篇文章記錄了常用的verbs，除了自己忘記可以回來看，也希望能幫助到有需要的人，掰掰～👋" }, { "title": "URL簡介: URL是什麼，由哪些部分組成?", "url": "/posts/what-is-url-and-what-is-it-composed-of/", "categories": "Web Development", "tags": "http, restful api, api, url", "date": "2021-09-13 22:00:00 +0800", "snippet": "這篇文章將會介紹什麼是URL，為何會需要它，以及它是由哪些部分組成的。什麼是URL想像你在一座大城市裡，你搭上一部計程車，想要去你朋友家、你小孩的幼兒園、或是去某某旅館，你必須告訴司機地址; 如果你想聯絡到某人的話，會使用電話號碼; 在政府眼裡每個人有身分證字號。就像如此，每個東西都有它獨特的識別方法，而且是被大家所公認的，也就是你一說，大家就知道你在說什麼，知道你所指的是哪個東西，而在網路上，這種識別方法就是URL(Uniform Resource Locator)，也就是我們在瀏覽器上面常常會輸入的網址，告訴瀏覽器說你想要前往哪個網站，瀏覽哪些資源。URL的組成以這篇文章的網址https://homuchen.com/categories為例，他代表的就是一篇部落格文章的資源，如何跟server溝通，server在哪裡，以及我想要的特定資源: https為傳輸協議，其他還有許多種，比如說ftp、rtsp、ipfs等等… homuchen.com就是host，用來說明存放資源的伺服器在哪裏，透過DNS可以得到機器的IP位置。 /categories是path，用來跟server說你要哪個資源。General URL Syntax一般的URL組成如下:&amp;lt;scheme&amp;gt;://&amp;lt;user&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/&amp;lt;path&amp;gt;;&amp;lt;params&amp;gt;?&amp;lt;query&amp;gt;#&amp;lt;frag&amp;gt; component description scheme 用來跟server溝通的通信協議 user 需要登入驗證過的user才能存取資源 password 需要登入驗證過的user才能存取資源 host 一個網域名稱或是IP位置，存放資源的server port server監聽的port，HTTP預設為80，HTTPS則為443 path server藉由path來判斷client想要的是什麼資源，什麼資源要用什麼樣的path，由server自己決定，不過RESTful API會有一個關於path設計的慣例，好讓client不需要記很多或一直看文件，關於後續的文章中會再來討論。 query 以?開始的多對key value pair，每對以&amp;amp;隔開，用來傳送更多的資訊給server，比如說搜尋的過濾條件、影片的開始秒數等等…比如說: ?q=TSMC&amp;amp;sort=time Summary一個URL，是網路上一個或多個資源的身分證，今天簡單地看了URL的組成，對於ㄧ個RESTful API的URL要如何設計，後面再會有詳細的介紹。這是RESTful API一系列文章中的一篇，想了解更多關於RESTful API及HTTP的，可以看這篇目錄:RESTful API Design — A practical guide" }, { "title": "HTTP headers 簡介: 一些常用的headers", "url": "/posts/http-headers/", "categories": "Web Development", "tags": "http, restful api, api", "date": "2021-09-05 00:00:00 +0800", "snippet": "在HTTP協議中，headers對於每個request，response提供了一些額外的資訊，基本上他們就是只是一對key value pair，由冒號(:)隔開，今天會看看HTTP協議的格式，header在其中的位置，以及介紹一些常用的header們。HTTP messagesHTTP是一個text based的傳輸協議，general的HTTP request message如下：&amp;lt;method&amp;gt; &amp;lt;URL&amp;gt; &amp;lt;version&amp;gt;&amp;lt;header&amp;gt;......&amp;lt;header&amp;gt;&amp;lt;body&amp;gt; 而HTTP response message如下：&amp;lt;version&amp;gt; &amp;lt;status code&amp;gt; &amp;lt;status message&amp;gt;&amp;lt;header&amp;gt;......&amp;lt;header&amp;gt;&amp;lt;body&amp;gt; 可以看到中間部分是由許多行的header所組成，而每一行header是一對key value pair，由冒號(:)隔開，每個key或value通常第一個字會大寫，然後用-隔開，比如說:Connection: Keep-AliveContent-Length: 10000Content-Type: text/htmlDate: Thu, 02 Sep 2021 02:52:46 GMT如果對於HTTP message format還不熟或想要有更多了解的，可以看我之前寫的文章: HTTP 簡介，以及使用telnet、nc、curl等指令來探索常用的HeadersHeaders對於每個request，response提供了一些額外的資訊，他們就只是一對key value pair，由冒號(:)隔開，你可以放任何你想放的header上去，不過就是除了你自己的之外沒人看的懂而已，今天我們只討論一般大家約定俗成的header們，以下將他們大致分成幾類: category header description General Date The time the message was created   Host The hostname and port to which the request is being sent   User-Agent The name of the application making the request Payload Content Content-Type The type of object that this body is   Content-Length The length of the body   Content-Encoding The encoding of the body   Location Where the entity is really locatied at Conditional Request ETag The entity tag associated with this entity   If-Match Get the entity if it matches the tag   If-None-Match Get the entity if it does not match the tag   Last-Modified The last date and time when this entity changed   If-Modified-Since Get the entity if it has been modified since the specified date Connection Connection To specify options about the request/response connection General Headers Date: 說明這則HTTP訊息被創建出來的時間。 Host: Request要被送去的server目標，你可能會納悶為何會需要這資訊?不是已經透由TCP/IP跟server建立了連線了嗎？這是因為 User-Agent: 說明發出request的client是什麼，可能是各種瀏覽器，或者是curl。 Payload Content不管是request還是response，body可能會帶有一些資料，關於這些資料的訊息在此一分類討論如下: Content-Type: 用來說明body裡的資料是什麼格式，常見的像是html檔案的text/html、csv檔案的application/csv、圖片可能是image/jpg、你的API可能用的是application/json等等，如果沒有Content-Type，收到資料的一方將不知道該要如何處理這些資料， 至於要用哪種type可以在這查詢MIME 類別 Content-Length: body裡的資料總共有幾個bytes。 Content-Encoding: body裡的資料是什麼ecoding。Conditional RequestsClient可能在之前已經取得過相關的資源，並且保有一份備份，如果此資源沒有更新時，可以不需要透過網路在傳輸一次，以節省時間及頻寬。相關的RFC: RFC 7232 “HTTP: Conditional Requests。 ETag: Response中，對於回傳的資料加的一個tag，有點像是以資料為輸入的hash值，讓client後續使用，會在If-Match及If-None-Match，以下說明。 If-Match: Server只有在match時，才會動作，通常在PUT操作時用於避免lost update的問題，比如說你想編輯一頁Wiki的內容，你先要求了本來的頁面，server回傳了Etag: A，當你編輯完送出時，帶上If-Match: A的header，只有當內容還是A版本時才會更新成功，如果在你編輯的時候有人已經先更新了頁面內容，則會回傳412 Precondition Failed，如此一來，避免你的更新會蓋掉別人的更新。 If-None-Match: Server只會在沒有match時，才會回傳資料，因為如果match就代表client擁有的資料的copy還是最新的，就回傳304 Not Modified。 Last-Modified: Response中使用，用來說明回傳的資料最近修改的時間，好讓client可以cache起來並搭配If-Modified_Since來更新，詳情見下面。 If-Modified-Since: Request使用此header來決定cache有沒有過期了，比如說上次拿取資源時server response了Last-Modified: Sun, 05 Sep 2021 01:40:14 GMT，這次在request相同資源時，就可以帶上If-Modified-Since: Sun, 05 Sep 2021 01:40:14 GMT，如果在2021-09-05這時間之後，資料並沒有更新，則server可以回傳304，client就能直接使用cache，而不需要再透過網路下載資料，反之，資料有更改的話，就回傳新的資料並帶上新的Last-Modified。Connection Management Connection: 每個HTTP request都需要仰賴TCP先建立一個連線，而每建立一次TCP連線都需要三向交握，至少需要花費一個RTT(Round trip time)的時間，所以當你有多個request的時候，你會希望TCP建立一次連線就好，之後可以重複使用，所以可以加上Connection: Keep-Ailve，告訴server，你希望在HTTP response回傳完之後，不要斷掉TCP連線，不過server可能會不鳥你，就會回你Coonection: Close。Summary今天簡單看了許多header的用途，還有其他好多好多的header～等遇到了再去了解吧！這是RESTful API一系列文章中的一篇，想了解更多關於RESTful API及HTTP的，可以看這篇目錄:RESTful API Design — A practical guide參考資料 HTTP headers MIME 類別 RFC 7232 “HTTP: Conditional Requests" }, { "title": "幾個我常用的vim的功能", "url": "/posts/some-vim-commands-I-often-use/", "categories": "Web Development", "tags": "vim, linux", "date": "2021-08-30 22:00:00 +0800", "snippet": "作為一個軟體工程師，我們花在文字編輯器上的時間一定佔了一定的比例，更精通熟悉我們使用的編輯器的話，開發的效率可以提升很多，今天就來分享一些我蠻常會用到的vim的功能～IntroductionVim是一個modal editor，可以切換在各個模式之間，一開始時是在normal mode，今天要介紹的功能，都是在normal mode下操作的，按i或a可以進入insert mode，按esc即可以退回normal mode。我通常比較常使用a，因為當把指標移到最後時，用a可以直接在最後面開始輸入。Navigation上下左右最基本的就是k、j、h、l分別對應到上下左右翻頁覺得上下按著這樣太慢，可以用Ctrl-U、Ctrl-D來上下翻頁行首、行末0指標會跳掉當行的最前面，$則是最後面。字的跳躍w可以跳到下一個字的開頭，e則是跳到下一個字的結尾，b則是往前跳到前一個字的開頭。() [] {} 跳躍指標找到了一對括號的其中一個，想要到另一個的話可以用%。搜尋跳躍將指標放在字上，按#，就會自動幫你搜尋，並跳到相同的字上，效果相當於用/搜尋再按n。Deletion刪除一個字母x，可以刪除指標上的那個字。刪除一行dd，刪除指標所在的那一行。刪掉指標後的所有字D，常用狀況像是複製了一行method，然後刪掉method name跟paramters再打新的。如下圖反白部分:d + {navigation key}搭配上面提到的各種navigation的方法，比如說: dw : 刪掉一個字，從指標到字的尾端，像是下圖反白的部分。 d% : 刪掉整個(…)、[…]或{…}di diw：跟dw也是刪掉一個字，但是可以刪掉整個字，效果就相當於先按b讓指標回到字首再dw。 di&quot; or di( or di[ or di{：刪掉”“內、()、[]及{}的所有字。 di( or di)即可刪掉()中function的paramter di&quot;則是刪掉雙引號中間的所有字，留下雙引號 dada的話跟上述di都ㄧ樣，只不過會將引號或括號都一併刪除。d 換成 c將上面的d都換成c，可以有一樣的功能，差別就是會直接進入insert mode，所以可以省去一個按i的時間。如cw、ciw、ci&quot;、ca(。Copy and Paste複製一行yy複製一行，p貼上y + {navigation key}y一樣可以搭配上面提到的navigation key來複製 yw，yiw: 複製一個字 yi&quot;: 複製雙引號內的字 y%: 複製成對括號內的字稍微簡單地紀錄一下及分享，希望能有幫助～～ 掰掰～👋" }, { "title": "Introduction to HTTP Response Status Codes: How to use them correctly?", "url": "/posts/http-response-status-codes-how-to-use/", "categories": "Web Development", "tags": "http, restful api, api", "date": "2021-08-22 22:00:00 +0800", "snippet": "這篇文章會介紹在HTTP協議中，Response status code的作用，有哪些codes以及該如何去使用他們？這是RESTful API一系列文章中的一篇，想了解更多關於RESTful API及HTTP的，可以看這篇目錄:RESTful API Design — A practical guideClient Server ModelHTTP是一個Client-Server的架構，客戶端發送一個request，而伺服器端接收到這個request，可能做了些事後，必須給個回應，不然客戶端會不知所措，到底你有沒有收到我的請求呢？我的請求是合理的嗎？那最後的結果是成功還是失敗，不管怎樣，總要給個回應吧。所以在HTTP Response的格式中，第一個就是Status Code，用來簡短地表示請求處理的情況，在大部分常見的簡單請求中，可能可以只看這個Status code，就知道server處理的情況是如何。如果還對HTTP response message的格式還不了解的，可以參考先前的文章: HTTP簡介Status Codes大致可以將code分為四類，分別以2、3、4及5開頭。 2開頭: 代表請求成功。 3開頭: 需要client在做其他動作，比如說去GET別的URL，或只是content沒變，從cache裡拿就好。 4開頭: client request有問題，syntax有問題或是server看不懂，少了某些參數之類的。 5開頭: server這邊出了一些問題拉～ Status codes Description 2xx Good! 3xx Redirection 4xx Client你的錯 5xx Server我出錯惹 接下來我們就來看看一些常見的status code吧！2xx 200 OK: OK就是OK! 如果你不知道用什麼，但你要表達請求成功了，那就用200吧～😂 201 Created: 當request是PUT，要求創建資源時，顧名思義，可以使用201代表資源成功被創建，可以在response body裡return整個資源，可以在header Location上，加上新創建的資源的位置。 202 Accepted: 代表你成功接受了請求，然後會asynchronously地處理。 204 No content: 沒有response body，會用到情境像是使用POST或PATCH做update時，成功的話，server沒有額外的資訊需要return給client知道。 3xx 301 Moved Permanently: 要求的資源已經搬家了～資源新的位置一般放在Location header中。 302 Redirect: 跟301一樣，會在Location中放上新的URL，跟301不同的是，301是永久性的，就是說舊的URL他之後都不會用了，希望用新網頁來取代舊的，而302是暫時的，可能這次有個活動，暫時將頁面導到另個地方，之後有別的活動，又換到新的地方，但他還是client繼續使用原本的URL。 4xx 400 Bad request: 請求的內容有誤，或是server看不懂。 401 Unauthorized: Authenticate失敗，例如帳號密碼打錯呀，Token不對呀。 403 Forbidden: User有驗證成功，但他沒有足夠的權限來做這個請求。 404 Not found: 請求的資源不存在！ 405 Method Not Allowed: 對於請求的資源，不支援所要求的method。 5xx 500 Internal Server Error: Server掛掉拉～Summary要使用適當的status code，避免溝通上的誤會，因為可能有懶惰的client看到status code就下了某些判斷，所以別特立獨行，給你的API的使用者驚喜🎉🙀" }, { "title": "[讀書筆記] 金錢心理學: 打破你對金錢的迷思，學會聰明花費 (下)", "url": "/posts/book-note-dollars-and-sense/", "categories": "讀書筆記", "tags": "books, finance, psychology", "date": "2021-08-21 23:40:00 +0800", "snippet": "繼上篇[讀書筆記] 金錢心理學: 打破你對金錢的迷思，學會聰明花費 (上)談完部分的內容之後，今天在這把剩下講完吧～大綱以下為這篇文章的大綱 定錨效應 稟賦效應 期望公平 太在意價格 總結及我如何利用以上現象來設計自己定錨效應我們首先先來看一個實驗，請一群受試者回答一個問題: 非洲國家佔聯合國國家的百分之幾?大部分人對這個答案的數字都沒什麼概念，但這實驗讓受試者在回答之前，先轉一個被設計過轉盤，這轉盤只會出現25及65這兩個數字，結果發現轉到25的那群人，回答的答案平均是;而另一組則是!沒有任何原因，我們就是會受到環境影響，會被最一開始的資訊影響，這就是定錨效應，哪怕他毫無意義，毫無邏輯。而這些資訊從哪裡來呢？除了在環境中不小心跑進來的之外，主要還有其他兩種，自己過去的經驗以及跟著大眾的腳步。自我因循問你一瓶可樂多少錢？大概30塊，為什麼定這個價呢～其實也沒有什麼理由，就是因為過去我們看到的價格就都大概是這樣，人們會相信自己也是天經地義的事，只是有時自大就是這麼來的。從眾在《影響力》一書裡，說明了許多我們人類做出決策、行為時，會受到許許多多各種因素的影響，而其中一個就是從眾，尤其是當我們對一件事物越不了解，所知的資訊越少時，就更容易跟著身邊大眾的行為一起行動，畢竟我們人是社會性的動物，一般來說，我們不希望被說成是特立獨行、不易合作、自私自利，我們會希望融入群體之中。稟賦效應我們會對於我們擁有的東西，賦予它更高的價值，這就是稟賦效應，可能是我們對它了解的更多，知道它的價值;或者我們對它投注的心力越多，就更加愛它．所以舉凡像是免費試用、體驗，拍得讓你身歷其境的廣告，都是讓你有種擁有那事物的錯覺，好像你願意掏出更多的錢．甚至是競標，當你一直是最高價的暫時得標主時，你腦中可已經有了各種拿到東西後的幻想，在最後一刻被別人出了更高價時，你可能就腦衝再給它加價下去。而從另一面來看，因為我們我們所有的事物估值較高，所以比起獲得，我們也會盡量避免失去我們已經擁有的東西，即便它們客觀上的價值是一樣的．損失趨避讓我們來玩個遊戲，擲一面硬幣，正面的話你可以獲得十萬塊，反面則需要付出十萬塊，你會想參加嗎～我想大部分的人都不會參加，因為失去十萬塊的痛苦大於得到十萬塊，使得原本從理性經濟人眼裡看來參不參加都一樣的事產生了變化，所以就會有人股票賺一點就獲利了結，而套牢很久卻都不賣，有獲利怕又還回去所以趕快賣掉，而虧損只要不賣，就不算損失，一張不賣！奇蹟自來！期望公平我們人類喜歡公平甚於自利，先來看看以下這個實驗吧～ 實驗中請來兩個人，並給他們一筆錢要他們分配(比如說100元)，其中一個人可以決定要如何分配，而另一個人可以選擇接不接受，但要是不接受的話，大家都沒錢拿～當提議方提出50:50的時候，沒有問題，很公平，但當提議方提出90:10的時候，另一個人卻會選擇拒絕，就算拿到10元比起什麼都沒有還要好，但他還是拒絕了!在《社交天性》一書裡有說到，社會獎賞跟生理獎賞對我們的大腦來說，其實沒有太大的區別！我們渴望著兩者，也有類似的神經迴路，社會性獎賞就是比如說上面提到的公平、信任、被認可、被讚美等等，而生理獎賞就像是吃飽喝足、得到十萬塊，因此我們會選擇公平而不是10塊錢，因為對我們人類來說，公平也是有某種程度的價值的。另外還有哪些地方有這種重視公平甚於實際效用的出現呢？比如說雨天雨傘漲價，讓你寧願淋雨，也不願花一個錢來獲得遮風擋雨的效用;Uber在颱風天漲價，也可能讓你不叫車！因為他們不公平！趁火打劫，剝削我們！儘管這些花費會帶來好的實際效用。太在意價格當我們對一項事物了解的越少，或者可以得到的資訊無法量測時，我們能仰賴的資訊就可能只剩下價格，所以有時會有越貴就是越好的迷思，一晚只要500的五星大飯店你敢住嗎？一隻大龍蝦只要500你敢吃嗎～我們喜歡確定可量測的事物，面對太未知或負責難以衡量的情況時，會去找個相對簡單的指標來做判斷，像是我們的人生好難好複雜，不知道要做什麼該追求什麼，所以有時就陷入賺越多錢越好的情況中，變成太過於只追逐金錢。總結看完這本書後，知道了如此多人類行為可能會不理性之處，唯有先察覺到，才有辦法做改進，又或者是不需要改進，只是可以利用這些心理因素，來讓我們花費所換得的快樂可以最大化。看完這本書之後的我，如果未來有出去旅行的機會，可能會更多地選擇將行程的花費預先的支付掉，如此一來在旅行當下，你可以不用感到付錢這個動作的痛苦，將心思好好地集中在這躺旅途的體驗上，像是購買度假村的吃到飽方案，你就不會在游完泳之後，是否要在海灘邊點個點心飲料間猶豫;也不會在晚餐時，怕太貴而不敢開瓶紅酒來喝，雖然吃到飽方案整體下來的花費可能會更多，但卻能換來更好的旅遊體驗。相反地，在平時，也許你會想體會到更多的付錢之痛，這樣你才不會多做了一些無謂的消費，所以我在每次要付錢時，不管是用現金、信用卡還是行動支付，當下就會拿起手機來記帳，除了放大了花錢的感受，也讓花錢變得更加困難一些。(我如何記帳的可以參考我先前的文章: [Google Sheet]我如何利用Google表單來記帳){:target=”_blank”}另外如果你本來想買什麼沒用的小廢物，如果忍下來的話，可以把省下來的錢記到另一個帳戶中，可能是旅行呀、買房，或其他你的夢想上，讓自己省錢的習慣有更多的動力，帶來一些立即的滿足回饋，在《原子習慣》中說到，想要改掉一個習慣，就要讓它難以去做，想要培養一個好習慣，就要讓這個習慣有獎賞。這類研究，是屬於一個叫做行為經濟學的領域，與經濟學不同的是，在經濟學裡，假設了每個參與其中的人都是理性的，像機器一樣，一定會符合自身的最大利益來做決策，然而結合了心理學，希望能有更準確，更貼近現實的模型來描述各種經濟決策。" }, { "title": "How to stream data from Blob Storage at your HTTP server using Azure and express.js", "url": "/posts/how-to-stream-data-from-blob-storage-at-http-server-using-azure-and-express/", "categories": "Web Development", "tags": "express, node.js, http, api", "date": "2021-08-13 23:30:00 +0800", "snippet": "這篇文章將會示範如何使用Node.js來下載Azure Blob Storage上的檔案，並且使用Stream的方式，將檔案儲存到本地端，或是作為一個Server(此篇使用express.js)，回傳給你的client，並且根據檔案名稱來設置正確的Content-Type．Download file from Azure取得file的Readable Streamconst { ShareServiceClient, StorageSharedKeyCredential } = require(&quot;@azure/storage-file-share&quot;);const ACCOUNT = &#39;your storage account&#39;;const ACCOUNT_KEY = &#39;your account secret&#39;;const credential = new StorageSharedKeyCredential(ACCOUNT, ACCOUNT_KEY);const serviceClient = new ShareServiceClient( `https://${ACCOUNT}.file.core.windows.net`, credential);//下載data share裡的d4ba71bf-3d38-4e69-9ba2-be4c04179e43.csvconst fileClient = serviceClient .getShareClient(&quot;data&quot;) .rootDirectoryClient.getFileClient(&quot;d4ba71bf-3d38-4e69-9ba2-be4c04179e43.csv&quot;);const downloadFileResponse = await fileClient.download();//downloadFileResponse.readableStreamBody ----&amp;gt;&amp;gt; Readable Stream在這裡拉這邊使用套件@azure/storage-file-share的幫助，連接上的你的Azure帳戶及share檔案，可以拿到該檔案的readable stream。Write to local file or socket把檔案寫入到本地的檔案使用fs.createWriteStream(path)建立一個file的Writable stream，再將Readable Stream pipe到那裡．const fs = require(&#39;fs&#39;)const filename = &quot;local.csv&quot;downloadFileResponse.readableStreamBody.pipe(fs.creatWriteStream(filname))把檔案傳到HTTP Response (express.js)express的handler裡的第二個參數response物件，也是一個writble stream，可以直接將資料pipe過去．app.get(&#39;/path&#39;, (req, res) =&amp;gt; { downloadFileResponse.readableStreamBody.pipe(res)})Content-Type使用套件mime-types，可以從想要下載的資料的檔案名中取得MIME type，從而設置到HTTP Response的Content-Type header裡．const mimeTypes = require(&#39;mime-types&#39;);const filename = &quot;test.csv&quot;;const mimetype = mimeTypes.lookup(filename);console.log(mimetype) //text/csvSummary最後將以上結合起來，完整的代碼如下:跑起來之後，就能透過GET http://localhost:3000/share/filename.csv這樣之類的網址來下載檔案囉～～延伸閱讀這篇文章中可以看到到許多Node.js Stream的實例，像是express.js的request、response object，其他還有像是process.stdin，process.stdout，想看更多使用stream的例子，可以看我寫過的其他文章: Nodejs: 如何逐行讀取檔案，或使用Unix pipe與其他process互動參考資料 Node.js documentation: Stream @azure/storage-file-share" }, { "title": "[讀書筆記] 金錢心理學: 打破你對金錢的迷思，學會聰明花費 (上)", "url": "/posts/book-note-money-psychology/", "categories": "讀書筆記", "tags": "books, finance, psychology", "date": "2021-08-07 23:30:00 +0800", "snippet": "生而為人，而不是一部機器人，我們有情緒，我們有人性而不是聖人；我們懶惰，喜歡走捷徑，有各種誤判及偏見；我們的認知有限制，腦袋的容量非常有限；我們短視近利，喜歡立即得到獎賞及滿足；我們有各式各樣的思考、認知、感覺，進而有了相對應的行為，這些就是心理學在研究的事．當這些人的天性碰上了金錢，我們是否能做出好的經濟決策呢？會不會當了許久的冤大頭而不自知，或是被誘惑引導到花了一些本來不會花的錢，該如何聰明的花費、花得剛好、花得開心，就是《金錢心理學》這本書要探討的內容．大綱以下為這篇文章的大綱，由於內容較多，部分的章節會在下一篇文章裡再談～ 基本原則: 機會成本 相對性 心理帳戶 避免痛苦 定錨效應 稟賦效應 期望公平 太在意價格 總結及我如何利用以上現象來設計自己基本原則: 機會成本一顆蘋果跟一顆橘子給你選，你要哪個？對大部分的人來說，這都不會是個非常困難的選擇，但如果是一顆蘋果50元，跟一顆橘子10元呢？感覺是不是變困難了~這是因為機會成本變複雜了的關係，在第一個情況中，如果你選擇了蘋果只需要放棄橘子，機會成本只有蘋果或橘子，但在後者，如果你選擇了蘋果，你的機會成本可能是任何50元可以買到的東西，可能是五顆橘子、一杯飲料、一個漢堡、兩本筆記本、好多枝筆、等等等無限的可能～所以當一件事涉及到了金錢的時候，就會變得更為複雜，最理想的情況是，我們在做決策時必須考慮到所有的機會成本，但這既困難又不太實際，我們不可能在得到想到所有可能的資訊之後才下決定，往往我們會被其他各種心理因素給左右，以下就一一來看吧！相對性艾賓浩斯錯覺首先我們先來看一張圖，大家會覺得兩個在中間的橘色圓形圖案，哪一個比較大呢？是否會覺得右邊的比較大呢？但其實是一樣的! 這就是艾賓浩斯錯覺，是對相對大小感知的一種視力錯覺．金錢的相對大小所以我們的大腦這種對相對大小的感知，也一樣會應用到金錢上．先來看一個情境:假如今天你想要買一雙鞋，要價2000元，然後店員跟你說，再走路五分鐘的路程之外有一家分店，只要1800，那你會去另一個店買嗎？再來，今天假設你要買的的是一台電視，要價20000，然後店員也跟你說，走路五分鐘的路程之外有一家分店，只要19800，那你會去另一個店買嗎？我想有人在第一種情況會選擇去另一家店，而買電視時卻不會，但一樣都是五分鐘路程省200，照理說兩種的選擇應該要一樣才是呀～在這裡就是對相對大小的認知偷偷溜進了我們的判斷之中，一樣的200塊，相對於2000感覺省了不少，但相對於20000，好像就沒那麼多了．另外還有許多地方，像是買車時，推銷員建議只要再加多少錢，就可以升級某某配件;或是在各種商店的收銀櫃台上的小物，相較於你全部買的東西，再多花個幾十塊買一些零食好像也沒什麼;以及在高級餐廳裡開一瓶高價的紅酒，這些可能都是商人利用了相對性而促使你做了原先你不會做的交易．誘餌我們人類喜歡比較，那也無可厚非，因為有時不能比較的話，時常無法做出決定，比如說要你對一堂線上課程出價、一顆花椰菜要多少錢、500公克的牛肉要多少錢，如果沒有其他資訊，往往不知道該怎麼定價，所以有時商人為了讓你更容易做出決定，故意給你可以比較的內容，讓你覺得好像賺到了，比如說原價1000，今天特價600！我們可以看看經濟學人雜誌是怎樣做的，訂閱的選項有三種：線上版、印刷版、線上加印刷版，定價分別為59美元、125美元、125美元，什麼？！單純印刷版跟線上加印刷版都一樣只要125美元，傻子才會只訂印刷版．沒錯！確實沒有人是傻子，雙訂閱的人數佔了84%．現在我們把傻瓜選項拿掉，只有線上版及雙訂閱，結果選擇雙訂閱的人只剩32%！加上一個無關緊要的選項，竟然讓大家選擇了更高價的選項，這是因為在比較單純印刷版及雙訂閱的時候，一樣的價錢，雙訂閱明顯優於印刷版，有東西可以比較的時候，我們人類就是比較開心，覺得賺到！心理帳戶錢就是錢，每一分錢應該都是一樣的，並不會有所不同，但我們有時卻會替錢分類，讓我們先來看看以下這兩種情境: 今天你已經買了一張一千塊的球賽門票，比賽當天，興沖沖地到了球場，卻突然發現票不見了！這時你會在現場再掏出一千塊來買票嗎? 你沒有預先買票，到了球場時發現你錢包裡的一張一千塊鈔票不見了！此時你會在現場拿一千塊來買票嗎？我想大家對於第一種情況，要再掏錢出來買票應該比較掙扎吧～明明我們損失的都一樣是價值一千塊，不管他是門票還是鈔票，但我們的感覺卻不同，後續的行為也可能跟著不同．因為我們預先幫我們的錢分類了，在第一種情況裡你買門票用的錢，可能被你歸類在娛樂帳戶上，而第二種情況的錢是沒分類的一般預算，也許你心想每個月能花在娛樂上的預算有限，用掉了沒了，所以當損失的是娛樂帳戶裡的錢，就不太能再花更多錢在此項目了．認知限制會做這樣的預算編列，並不是壞事，就像前面所說的，如果要花一筆錢時，要考慮到所有的機會成本幾乎是不太可能，我們的大腦裝不下所有選項，但一旦我們將預算分類，此時機會成本的選項就會變得少許多，可以更容易做出決定．以娛樂預算為例，當你要花錢去看一場球賽時，你可能會想是要看一場球比較值得呢？還是去看兩場電影？或者省下來之後再帶女朋友一起出去旅行？不好的心理帳戶既然心理帳戶有助於我們做決定，那不好的地方在哪兒呢？有時我們會把錢的來源，不小心也分類了，是辛苦賺來的錢、還是發票中獎、或者是出差可以報帳，住了一個比較好的飯店，然後自己多花錢吃了豪華晚餐．對於比較輕鬆得來的錢，我們就更容易不假思索地花掉，其實錢就是錢，都是一樣的~避免痛苦人類天生就會試著避開痛苦，當我被熱水燙到，就知道下次要避開，被蛇咬一次，就會十年怕草繩，跟金錢有關的痛苦，就是把錢付出去，交給別人的那個瞬間！於是乎，商人就發明了一些方法，來讓我們更少地感知到付錢的痛苦，讓付錢的時間跟享受商品及服務的時間錯開，或是讓我們在付錢時，感覺好像付的不是錢XD工具使用信用卡這類工具，可能會讓有些人不小心花了更多錢，在網站上逛逛，一鍵付款，付錢的過程太過方便無痛．時間上透過實際付錢跟享受的時間差，讓我們忘記付錢這件事，可以將付錢的時機大致分為三類，預付、後付或邊用邊付、什麼時候付錢真的會影響我們花錢的多寡嗎？有個實驗是這樣的:請一群人來實驗室待四十分鐘，然後給他們一筆錢，他們可以選擇將這筆錢花在看有趣的影片，但是比較貴，也可以看一些漫畫，這比較便宜，或是有提供一些免費乏味的學術研究給他們看，總之他們可以選擇怎麼用這筆錢，來度過這漫長的四十分鐘．而付錢的方式就是分成三種預付、後付、邊用邊付: 預先想好要哪些娛樂，提前支付 在實驗期間，使用娛樂，結束後再支付 在實驗期間，每要使用一項娛樂時，當下付費結果，預付跟後付沒有明顯差別，但是邊用邊付組則是花了最少的錢～所以可以藉由時時提醒自己付錢的痛苦，來減少不必要的花費，就像我在[Google Sheet]我如何利用Google表單來記帳這篇裡，透過記帳，讓自己就算是使用電子錢包、網購、用信用卡時都能感受到付錢之痛．續集出爐囉～[讀書筆記] 金錢心理學: 打破你對金錢的迷思，學會聰明花費 (下)" }, { "title": "[Google Sheet]我如何利用Google表單來記帳", "url": "/posts/google-sheet-how-to-do-bookkeeping/", "categories": "Google Sheet", "tags": "finance, google sheet, google form", "date": "2021-07-31 22:30:00 +0800", "snippet": "利用Google sheet及Google form來客製化自己的記帳App，表單的連結可以放到手機桌面，就像一般App一樣，每次花費的紀錄，將儲存在試算表裡，後續可以做任何你想要的統計分析．建立表單首先建立一個新的表單，接著點選工具 -&amp;gt; 建立表單，就會在新分頁裡跑出一個空白表單，接著我們就要編輯他的內容．編輯表單命名表單，隨便你要打什麼，這裡就打個”記帳”，接下來的每個問題可以是簡答、單選題、多選題這裡的第一個問題的題目就是項目，也就是我們花了什麼錢，題目的種類選簡答:第二題題目題目為金額，也是簡答，填表單時記得填上數字第三題題目題目為種類，選項就你開心怎麼分類～ 這裡的例子是食衣住行娛樂跟其他後面你想要加上任何題目都可以將表單加入主畫面完成表單後，點選右上角的傳送，就可以在你的手機瀏覽器中，打開這個網址．點選右上角表單裡面的加到主畫面，就能像是Appㄧ樣，在桌面有個小圖示囉～檢視成果每次在表單送出的資料，都會收集到Google Sheet中，如下圖:之後就能利用這些進行各種你想要的統計圖表拉，比如說每天花多少錢在哪些分類上，總共各分類的佔比為何:Summary建立好表單之後，每次要花錢的時候，就打開手機，送出一個表單就能記帳啦．在金錢心理學也有說到，我們人類天生會避免痛苦，而付錢就是一種痛苦，所以商人會有許多方法來讓我們忘記痛苦，不小心就花太多錢，比如預付、後付、信用卡、一鍵購物，讓花錢變得越方便，越無痛，來使得我們花更多．所以記帳這行為，不僅是用來追蹤我們消費狀況的一個工具，說不定也能讓我們減少不必要的花費，每次花錢時都會清楚地感受到錢噴出去的感覺，哪天更可能因為懶得拿出手機來記，就不花錢了呢～延伸閱讀 [讀書筆記] 金錢心理學: 打破你對金錢的迷思，學會聰明花費 (上) [讀書筆記] 金錢心理學: 打破你對金錢的迷思，學會聰明花費 (下)" }, { "title": "[讀書筆記] 習慣致富 人生實踐版", "url": "/posts/book-notes-effort-less-wealth/", "categories": "讀書筆記", "tags": "books, finance, habit", "date": "2021-07-24 22:30:00 +0800", "snippet": "簡介這本書的第一章到第十六章，作者講述了兩對夫婦的故事，從交往、訂婚、結婚、蜜月，講到租房、買房、小孩教育、生活中的各個面向，看他們在面對所有財務決策時，如何做不同的選擇，而這些習慣，經過了時間了累積，到最後產生了巨大的差別！透過故事，像是看小說一樣，更容易地會去感受到那些習慣的重要，那對底是哪些習慣呢～作者在本書後面的22章一一闡述: 擁有好習慣，人生是彩色的；擁有壞習慣，人生是黑白的 慎選人生伴侶 避免欲望型消費 節儉，但不小氣 避免隨意購物 成為自己的人生設計師──建構藍圖或計畫 持續投資你的儲蓄存款 謹慎投資 讓你的錢各自歸位 勿陷入「生活方式升級心理」，勿將你的生活加大升級 保持心胸開放，別讓偏見影響你的財務決定 結交有儲蓄習慣的朋友 為你心中最重要的東西儲蓄 金錢等於自由 財富自由的首要條件是身體健康 創造多元收入金流 富裕不只是金錢富裕──七種富裕類型 變有錢並非單一事件 好目標 V.S. 壞目標 好習慣帶來好運，壞習慣帶來厄運 財富消除五十八%的人生問題（與壓力） 財富遊戲計畫心得感想或許可能會覺得這些東西都是老生常談，陳腔濫調，但就像伏爾泰說過的 Common sense is not so common在我們日常生活中，是否這些習慣對富人來說是common sense，但對我們卻不是，或者是我們知道他是簡單的常識，卻沒有落實到生活當中，使他們變得平常，透過這次的閱讀，可以檢視自己有哪些是做得不好的部份．不過在這本書裡，對於每一個原則及習慣，講的篇幅有限，我覺得可以透過其他的資源來加深學習: 習慣: 習慣這兩個字就出現在書名當中，可以知道它有多重要，造就現在我們的狀態的，正是過往以來我們所有的所作所為，而我們在過去的每個當下所做的選擇、所做的行為，絕大部分並不是我們有意識的，而是無意識的習慣！ 試想從我們早上醒來，睜開眼睛第一件事是拿起手機賴在床上滑，還是整理床鋪、冥想;早餐是隨便吃吃，還是有注重均衡營養;到了工作場所，是先想好今天最重要的任務，還是開始瞎忙;下班之後是躺在沙發上看電視，還是去運動． 我們不會無時無刻都在努力地做選擇，而是讓習慣驅動著我們，而《原子習慣》這本書，說明了習慣的機制，教我們如何去培養好習慣、除去壞習慣，而不是每天依靠意志力來控制自己，而最後又筋疲力盡地失敗． 人際關係: 《人性的弱點》，經典． 睡覺: 《為什麼要睡覺》，如果有一種產品，可以讓你記憶力變好、更具創造力及生產力、降低罹癌機率、心情更好、走出傷痛、變美麗、皮膚變好、變苗條，那你願意花多錢買這產品呢～一萬？不用！五千？也不用！免錢的啦～～只要你每天晚上好好地去睡覺就有了！為什麼要睡、要如何睡？比爾蓋茲也推薦大家看看這本書． 運動: 運動對我們到底有多少好處，在《真正的快樂處方》這本書裡，針對運動對我們大腦的影響，如果你想要變得更年輕、聰明、學東西更快、壓力更小更快樂、注意力更集中、更有創造力嗎？那就運動吧！ 財務決策: 本書說我們要有儲蓄及投資的習慣，在現在金融越來越越發達的世界當中，我們有越來越多的行為牽涉到金錢，在花錢時時常有許多不理性的行為，可能是被商人誘導，要讓我們花更多的錢，或者只是我們自己懶，在《金錢心理學》裡，讓我們從很多的故事及實驗中，覺察到自己到底有沒有亂花錢的地方． 最後除了自己做，最好是身邊的朋友及伴侶都有相同的價值觀，才能一起前進，而不是處處拉扯，祝大家可以找到三觀合的另一半~ 😂延伸閱讀[讀書筆記] 為什麼要睡覺? :睡出健康與學習力、夢出創意的新科學[讀書筆記] 金錢心理學: 打破你對金錢的迷思，學會聰明花費 (上)" }, { "title": "[Google sheet]如何在試算表裡匯入新聞、rss feed", "url": "/posts/google-sheet-google-news-rss-feed/", "categories": "Google Sheet", "tags": "google sheet, finance", "date": "2021-07-18 12:00:00 +0800", "snippet": "此篇文章將分享我是如何在試算表裡查看新聞，看起來像是下面這樣:於左上角輸入公司名稱(此處是下拉選單)，即可跑出公司的相關新聞在這一篇[Google sheet]我如何製作股票損益表，自動抓取最新股價裡，我們已經建立了持有股票清單，我就想說如果同時可以同時看到每一間公司的相關新聞應該不錯，所以才會有了這篇．公式=IMPORTFEED(CONCATENATE(“https://news.google.com/atom/search?q=”, A1, “&amp;amp;hl=zh-TW&amp;amp;gl=TW&amp;amp;ceid=TW:zh-Hant&amp;amp;sort=rated”), “items”, false, 150)以上公式會使用A1儲存格的字去google news查詢，列出150項結果，以下將分別說明各個函式的用法.IMPORTFEEDIMPORTFEED爲要匯入新聞RSS Feed的函式，有四個參數，用法為: IMPORTFEED(網址, [查詢], [標題], [項數]) 網址 此處我們使用的網址為 https://news.google.com/atom/search?q=台積電&amp;amp;hl=zh-TW&amp;amp;gl=TW&amp;amp;ceid=TW:zh-Hant&amp;amp;sort=rated 改變q=後面的字，就是想要查詢的關鍵字 查詢 第二個參數，可以為下列這些: feed: 只傳回單一列資料 feed &amp;lt;type&amp;gt;: 可以指定傳回的特定屬性，可能是title、url、author、summary 舉例: IMPORTFEED(A1, “feed url”) items: 此為預設，傳回整個表格， items &amp;lt;type&amp;gt;: 一樣可以指定特定屬性， 舉例: IMPORTFEED(A1, “items title”, FALSE, 100) 標題 是否要納入標題欄，預設為FALSE 舉例: IMPORTFEED(A1, “items”, TRUE) 項數 當查詢(第二個參數)爲項目(items)時，代表要傳回的項目數 舉例: IMPORTFEED(A1, “items”, TRUE, 200) CONCATENATE就是把所有的參數串起來，例如=CONCATENATE(“123”, “456”)，就會相當於”123456”．也能使用儲存格當作參數，這裡的例子就是:=CONCATENATE(“https://news.google.com/atom/search?q=”, A1, “&amp;amp;hl=zh-TW&amp;amp;gl=TW&amp;amp;ceid=TW:zh-Hant&amp;amp;sort=rated”)，當A1為台積電時，就會相當於”https://news.google.com/atom/search?q=台積電&amp;amp;hl=zh-TW&amp;amp;gl=TW&amp;amp;ceid=TW:zh-Hant&amp;amp;sort=rated”Summary利用以上兩個公式，可能成功在試算表上看新聞囉～ 🎉，掰掰～👋" }, { "title": "[讀書筆記] 最高學以致用法: 讓學習發揮最大成果的輸出大全", "url": "/posts/book-notes-output/", "categories": "讀書筆記", "tags": "writing, books", "date": "2021-07-14 17:10:00 +0800", "snippet": "不知道大家是否有過這樣的經驗: 讀了許多本書，事後卻說不出來到底讀了什麼;看了一場電影、經歷一趟旅程，卻分享不出想法、或是說出從中有哪些收穫。大家可能也有聽過，最好的學習方法就是去教人。教學就是一種輸出，在本書《最高學以致用法》中，作者認為自我成長的關鍵就是輸出，於本書收集了80個關於說、寫、行動三個面向的輸出，每一則皆為兩到三分鐘的時間就能閱讀完的份量，讓我們在自己的日常生活中尋找幾個可以小小進步的地方!原則此書的第一部分說明一些原則: 為什麼要輸出、什麼是輸出、輸入輸出的比例多少為好、以及除了輸出之外還需要些什麼?自我成長及改變生活的關鍵想讓自己成長得更快，重點不是多讀了多少書，關鍵是更多的輸出！透過分享、書寫、實踐，讓自己的記憶更加牢固，不管讀了多少書、上了多少課，如果沒有輸出實踐，不僅僅只是忘光光沒有記住而已，你的生活並不會有任何的改變 唯一可以改變現實的就是你的行為實踐兩週內運用三次情報及知識輸入到大腦裡，如果沒有經常運用很快就會忘記 透過反覆三次的輸出，讓情報成為長期記憶，儲存在大腦裡．輸入輸出比3:7有一個實驗是這樣子的，讓一群人去背社交名人錄的資訊，並依照不同的記憶時間，測驗時間，來看看最後誰的成績最好，結果發現最後成績最高的，是花了40%時間在學習的組別，年紀越大的則是30% 輸入和輸出的黃金比例，應該是3:7輸出之外還要有反饋單純不斷地輸入輸出，雖然也會有收穫，但如果沒有反饋就難以進步，有了反饋可以更知道下一次輸入的方向 補足弱點、發揮強項: 在輸出的同時，可以知道哪部分不夠清楚，再回頭去補強輸入，複習或是尋找相關資料，另外對於自己有興趣的部分，能夠做延伸學習～ 解決為什麼們: 在輸入輸出的過程中，一定會產生很多的疑問，不要放著這些為什麼不管，解決這些為什麼! 實踐分為說、寫、行動這三大類，作者整理了80個跟輸出有關的事，以下簡單地列舉一部分:說 分享前一天的事、體驗、感受 說正面而不是負面 非語言的表達的重要: 語調、表情、姿勢、肢體、動作 委婉地表達 關於提問、讚美、斥責、道歉、感謝 如何提問 關於簡報、打電話寫 寫下來～ 而且用手寫 關於做筆記、寫摘要 列出清單 彙整想法 製作企劃 引用行為 如何採取行動、並持之以恆 笑、哭 關於睡覺、運動 如何寫感想 社群、部落格心得感想讀完這本書之後，意識到原來生活當中，有如此多的面相都是輸出，而不是原本以為的發表演說、報告、寫文章而已。但就像這本書的主題輸出，如果沒有加以實踐，就不會有收穫，這也是我會開始寫這篇文章的原因，並且開始規定自己在輸出完一本書之前，不能再繼續讀下一本😂希望這讀書筆記系列可以持之以恆下去!也希望以上的內容，能稍微幫助到想認識這本書的人！掰掰～👋後記截至目前，已經輸出了一些讀書筆記囉～ 希望能繼續保持下去！😊 成功是什麼? 5本關於自我成長的推薦書單 [讀書筆記] 習慣致富 人生實踐版 [讀書筆記] 金錢心理學: 打破你對金錢的迷思，學會聰明花費 (上) [讀書筆記] 金錢心理學: 打破你對金錢的迷思，學會聰明花費 (下) [讀書筆記] 為什麼要睡覺? :睡出健康與學習力、夢出創意的新科學 [讀書筆記] 一週工作4小時: 擺脫朝九晚五的窮忙生活，晉身「新富族」！ [讀書筆記] 用對能量，你就不會累 [讀書筆記] 原子習慣: 細微改變帶來巨大成就的實證法則 [讀書筆記] 做自己的生命設計師 掌握這3個原則，打造出最適合自己的代辦清單系統" }, { "title": "[Google sheet]我如何製作股票損益表，自動抓取最新股價", "url": "/posts/google-sheet-stock-income-statement/", "categories": "Google Sheet", "tags": "google sheet, finance", "date": "2021-07-09 16:30:00 +0800", "snippet": "此篇文章將分享我是如何製作我持有股票的未實現損益表，看起來的成果如下:主要功能 自動更新股價 根據最新股價，計算損益，並以顏色區分損或益 近一年的股價折線圖Step by Step製作表格首先填入表頭欄位，在這裡我們會有:股票代號、名稱、近一年股價、現價、漲跌、成交量、持有張數、市值、持有成本、損益、損益百分比每新增一檔股票，需要我們自己填入的有股票代號、名稱，持有張數、持有成本 股票代號: 爲後續GOOGLEFINANCE函式的參數，這裡以台北股市台積電為例爲TPE:2330 名稱: 就你自己開心如何稱這黨股票就好～ 持有張數: 就是你的持有張數… 持有成本: 每次買股票時，就將成本加上去吧取得最新股價資訊(現價、成交量)，計算市值 現價: 使用GOOGLEFINANCE函式來取得股價資訊！ 在D2儲存格中輸入公式: =GOOGLEFINANCE(A2, “price”)，之後下來套用至整個D欄 成交量: =GOOGLEFINANCE(A2, “volume”) 市值: 將持有張數及現價相乘即可～ =D2*G2 計算當日漲跌損益 漲跌: 有了現價，可以跟昨日收盤價做比較計算出今日漲跌: =D2 - GOOGLEFINANCE(A2, “closeyest”) 損益: 即為持有成本及市值相減: =H2-I2 損益百分比: 即為損益除以持有成本: =IF(ISBLANK(I2), 0, J2/I2)IF及ISBLANK的用途爲如果你尚未實有該檔股票，持有成本爲0或空白，卻又寫列入表中觀察，則損益百分比顯示為0，否則將出現錯誤． 股價折線圖公式為: =sparkline(GOOGLEFINANCE(A2, “price”,today()-365,today(),1)) GOOGLEFINACE:總共四個參數，第一為股票代號、再來是起始日期跟結束日期，此範例使用一年前today()-365到今天today()、最後爲資料的interval，1代表每天，也可以是7代表每週 sparkline:可以再一個儲存格裡畫圖的函式，詳細的用法可以看我先前寫的文章:[Google Sheet]Sparkline，在儲存格裡插入迷你圖表替漲跌及損益百分比上色最後！股市就是要紅紅綠綠才比較好看，將賺錢的部分標上紅色，虧錢的弄上綠色吧！首先點選漲跌那一欄(E)，接著點選工具欄格式 -&amp;gt; 條件格式設定將格式規則設為大於0，格式設定樣式改為字體紅色，綠色及損益率的部分也是一樣！如此一來就大功告成囉🎉" }, { "title": "[Google sheet]如何建立下拉選單，以及從既有資料中自動建立選項", "url": "/posts/google-sheet-create-a-drop-down-list-from-existed-data/", "categories": "Google Sheet", "tags": "google sheet", "date": "2021-06-26 20:00:00 +0800", "snippet": "為什麼要用下拉式選單 新增資料更為快速，無需重複填寫 避免誤植，或統一資料的格式及規則 對既有資料鐘進行選擇及後續操作如何建立下拉式選單自行輸入清單選項 首先選擇一個或多個你想要建立選單的儲存格 點選 資料 -&amp;gt; 資料驗證 在條件選項中，選取項目清單 輸入你想要的選項，選項間以逗號隔開 就大功告成拉從既有資料來建立選項有時你想要建立一個選單，其中的選項是來自某一大筆資料中的某一個欄位，你不想一筆一筆手動Key，而且你也不想每次資料有變動時，就要重新去更新一次資料驗證，此時就可以這麼做，以以下的資料為例: 重複自行輸入清單選項中的第一及第二部 在條件選項中，選取範圍內的清單 輸入或選取一個範圍，以這裡的例子為例，我們建立一個國家的下拉選項，填入F2:F，代表country那一欄，不包含標頭country本身 大功告成~Summary建立一個下拉選單，選項可以自行輸入，也可以從既有資料的範圍中建立，如此一來當資料有變動時，下拉選單的選項就可以自動更新，而不需要自己再重新輸入新的選項!" }, { "title": "RESTful API Design — A practical guide", "url": "/posts/http-restful-api-design-practical-guide/", "categories": "Web Development", "tags": "api, http, restful api", "date": "2021-04-13 20:00:00 +0800", "snippet": "此篇文章將作為接下來一系列關於Restful API design的目錄．Part 1: 將介紹什麼是API，何時需要他，以及怎樣才會是一個好的API．Part 2: 在許多種API中，此系列只專注於HTTP RESTful API，為了更好地學習他，必須先了解HTTP Protocol，知道其中各個組成HTTP Message的每一個部分．Part 3: 介紹何為RESTful API，為什麼他會長這樣，以及其他許多當你在設計API時會遇到情況，例如: Documentation、Pagination、Rate Limiting、Monitoring．Part 4: 陸續想到一些相關的議題，再放上來！Outline Introduction 1.1 What is an API? 1.2 What is a good API? HTTP Basics 2.1 A HTTP Overview 2.2 HTTP Methods 2.3 HTTP Response status codes 2.4 HTTP URI 2.5 HTTP Headers 2.6 [Practices] A HTTP client — curl RESTful API and some Practical Guidelines 3.1 What is a RESTful API? 3.2 Identifying Resources 3.3 API first principle and an introduction to OpenAPI 3.4 [Practices] How do I manage a large OpenAPI spec file? 3.5 Pagination 3.6 Rate Limiting 3.7 Monitoring Advanced Topics 4.1 Connection management 4.2 Resource Modeling: Fine-grained or Coarse-grained? 4.3 Versioning and Compatibility 4.4 How to Response to a Health Check? " }, { "title": "What are HTTP Methods？Which to use and How to use them correctly?", "url": "/posts/http-methods-which-to-use-and-how-to-use-them-correctly/", "categories": "Web Development", "tags": "restful api, api, http", "date": "2021-04-04 20:00:00 +0800", "snippet": "這篇文章主要討論幾個常見的HTTP methods，說明他們分別是否具有哪些特性(Safe、Idempotent)，以及他們應該要怎麼使用，比較會是符合大家的期待．當然寫server的人可以不照著慣例走，不過如此一來，使用這個API的user可能會很不高興，而這個user可以是公司的客戶，可能是公司內部的其他團隊，也可能是未來的自己！Outline HTTP Request message格式 常見的methods，以及其特性 分別介紹各個method的用法HTTP Request message一個general的HTTP request message如下：&amp;lt;method&amp;gt; &amp;lt;URL&amp;gt; &amp;lt;version&amp;gt;&amp;lt;header&amp;gt;......&amp;lt;header&amp;gt;&amp;lt;body&amp;gt; 第一個字就是method，接著為URL跟version，換行後為許多個header，每個header以換行隔開，最後再隔一行之後是body．對於HTTP message還不熟的，可以看我之前寫的文章：[Networking] HTTP 簡介，以及使用telnet、nc、curl等指令來探索URL代表著資源，而method是你想要對資源進行的操作，常見的method如下表：Don’t surprise your user並不是所有的server都會實作所有的method，而且每個method要做什麼事，也都是由server所決定的，但是一個好的API通常不會做怪怪的事，而是要符合使用者的期待，使其體驗良好，這裡先來解釋一下safe及Idempotent這兩個特性是什麼吧．Safe如果一個request是safe的，指的是他不會導致server去做一些額外的動作，沒有side effect，例如說改變state、刷你信用卡，這樣的request基本上就是read-only的．這樣的特性，使得API的user可以大膽放心地去呼叫，實驗你的API，而不必擔心會引發什麼無法挽回的後果，GET、HEAD、OPTIONS都是具有safe特性的method．Idempotent一個Idempotent的操作，指的是這樣的操作執行一次跟執行很多次的結果是一樣的．例如數學上的乘以1，乘以0，一個是數字乘以1或乘以0不管多少次，結果都是原本的數字或者是0．那有Idempotent的特性，可以帶來什麼好處呢？就是user可以放心的retry，當user不確定剛剛的operation、request有沒有成功時(可能送出後網路突然斷掉、server做完之後再回應之前掛掉、等等…)，就再做一次！而HTTP method中，除了POST，其他method都預期應該是Idempotent的，Update好幾次，Delete好幾次，應該都跟只做一次的結果一致．HTTP Methods看完了共同的特性之後，接著來看看給個method預期是怎麼使用，以及server如何回應各種情況．GET最常見的method之一，顧名思義就是用來向server索取一些資源． 有資源，server就回應200以及資源 沒有資源，404HEAD跟GET都一樣，但server並不回傳資源本身，而是只回應headers．&amp;lt;Response&amp;gt;HTTP/1.1 200 OKContent-Type: plain/htmlContent-Length: 614OPTIONS用來詢問server對特定的資源，有支援哪些操作． 將結果置於header Allow裡，如下： &amp;lt;Response&amp;gt;HTTP/1.1 200 OKAllow: GET, POST, PUT, OPTIONSContent-Length: 0 PUTReplace the entire resource，對應到CRUD裡的update，就是叫server將我request body裡的資料存起來，如果資源本來不存在就create，在的話就replace． 200 OK，成功 204 No Content，成功但畫面不需要更新，也就是沒有新的資料產生，client不必取的新的資料，例如說client在更新表單按下save時． 201 Created，如果是create的話，並且在header Location放上資源的URI &amp;lt;Response&amp;gt;HTTP/1.1 201 CreatedLocation: https://api.example.com/users/123 PATCHUpdate parts of the resource，跟PUT一樣是update，不過是partial update或者說是merge．比如說原本有個homuchen的user是長這樣：{ &quot;name&quot;: &quot;HoMuChen&quot;, &quot;age&quot;: 30}當你PATCH時，想要將age更新為31&amp;lt;Request&amp;gt;PATCH /users/homuchen HTTP/1.1Content-Type: application/jsonContent-Length: 11{&quot;age&quot;: 31}結果為{ &quot;name&quot;: &quot;HoMuChen&quot;, &quot;age&quot;: 31}如果是用PUT，則會整個replace掉，name就不見了{ &quot;age&quot;: 31}POST一般來說是指把資料傳給server去做處理，當使用其他的method，語意無法符合時，就會使用POST，常見的有用於Create resources、Search query、Asynchronous tasks． 200 OK 201 Created 202 Accepted，server已接受請求，但還需要時間去完成任務． Search Query: Ex. Elasticsearch Query DSLDELETE顧名思義，用來刪除資源． 200 OK． 207，bulk delete． 404 Not Found，要刪除的資源不存在． 410 Gone，資源已被刪除．SummaryHTTP做為網路世界中眾多通訊協定中的一個，只有當我們更加了解他，service provider才能提供更好用、另client user的學習曲線低，用起來很開心的服務．今天簡單地討論了各個HTTP Method的用法，每個method有他的語意，只有當server照著大家的預期去做時，才不會造成大家的困擾．除了Method之外，還有Response code、Header等其他HTTP的組成需要去了解，最後整個API符合RESTful的style是這一系列文章的目標．這是RESTful API一系列文章中的一篇，想了解更多關於RESTful API及HTTP的，可以看這篇目錄:RESTful API Design — A practical guide感謝您的閱讀~期待下次見！" }, { "title": "A Linux HTTP client tool — curl的介紹及用法", "url": "/posts/linux-http-client-tool-curl-usage/", "categories": "Networking", "tags": "http, linux, curl", "date": "2021-03-24 20:00:00 +0800", "snippet": "做為一個HTTP client，想要對server發出請求，有許多做法，可能是寫一個python script 或使用其他任何語言，也可以是使用postman這樣的工具，或者是直接在command line上或shell script中使用curl指令．當你想要快速地測試一下某個API，或是explore別人的HTTP service時，直接使用curl是還蠻方便的！甚至直接用shell script來寫爬蟲了！Outline HTTP Request message Curl 的許多參數及用法 如何知道自己curl有沒有寫對 其他常見搭配的用法及使用情境HTTP Request message作為一個HTTP client，要送出一個request，我們先必須知道送出去的message到底會有哪些東西組成．Request lineHTTP message的第一行，由method、URL、version所組成，例如：GET /index.html HTTP/1.1Header lines第二行開始，每一行是為一個header，field及value由冒號隔開，例如Host: www.google.comConnection: CloseAccept-Language: enbodyHeader結束空一行之後是為body，method是GET的就沒有body，例如你的表單POST的一些資料就會放在body，可能長這樣：name=HoMu&amp;amp;phone=0912345678&amp;amp;email=homu@email.com更多關於HTTP message的說明，可以看我之前寫過的文章：[Networking] HTTP 簡介，以及使用telnet、nc、curl等指令來探索Curl所以我們要如何使用curl指令來產生HTTP message呢？！基本URL是必須的，什麼參數都沒有，就產生一個GET messagecurl www.google.com-X設定你想要的method，例如你想要POST，如：curl -X POST api.host.com/v1/users-H加上headers，用冒號隔開field及value，如果想要多個header就多打幾次-H，如：curl -X POST \\ -H &#39;Content-Type: application/json&#39; \\ -H &#39;X-Whatever-Field: value&#39; \\ api.host.com/v1/users-d加上body，比如你想POST JSON string的data給你的API：curl -X POST -H &#39;Content-Type: application/json&#39; localhost:3000/api -d &#39;{&quot;name&quot;: &quot;HoMu&quot;, &quot;age&quot;: 30}&#39;如果你data很多，想在一個檔案裡頭，也可以使用指定檔案路徑的方式，可以為絕對路徑，也可以是相對的，路徑前必須加上@，例如：-d @./data.jsoncurl -X POST -H &#39;Content-Type: application/json&#39; localhost:3000/api -d @FILEPATH-i按下Enter後，你得到會是server傳回來的body，如果你想要看response的header的話，要加上-i-F上傳檔案利用nc指令看看自己到了傳了什麼你可能寫了curl指令，不太確定用法，想知道到底curl形成出來的message是不是自己想要的格式，這時可以使用nc指令，在本機端起一個tcp server，在curl這個server，就可以看到HTTP的message囉．nc監聽在port 3000nc -l 3000curl port 3000curl localhost:3000其他常見使用情況redirect當curl回來的資料是html時，直接在terminal上噴出一堆字也是很難看，這時長搭配redirect io，把回傳回來的html string寫到檔案裡，就可以用瀏覽器打開來了．curl www.google.com &amp;gt; gg.htmljq如果content-type是json的話，可以使用jq command幫你parse，不然一堆json string噴在螢幕上，也是眼花．curl api.host.com/users | jqSummary今天簡單看了一下HTTP message的格式，以及如何用curl來做出自己想要的HTTP Request，並且知道自己到底有沒有寫對．這是RESTful API一系列文章中的一篇，想了解更多關於RESTful API及HTTP的，可以看這篇目錄:RESTful API Design — A practical guide感謝您的閱讀~期待下次見！參考資料 https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages jq - https://stedolan.github.io/jq/" }, { "title": "HTTP 簡介，以及使用telnet、nc、curl等指令來探索", "url": "/posts/http-introduction-telnet-nc-curl/", "categories": "Networking", "tags": "http, linux, curl", "date": "2021-03-24 20:00:00 +0800", "snippet": "在網路的世界裡，HTTP扮演著一個重要角色，當你打開Instagram看著無以計數的照片、打開Youtube看看影片、在google上搜尋著你想要知道的答案、瀏覽著別人的網站文章，這些都是HTTP負責把上述的這些照片、影片、文字、等檔案資源從別處的伺服器搬到你的裝置裡，可能是你的手機、平板或是電腦．HTTP在OSI模型中，是屬於應用層(Application layer)裡的一個通訊協定，透過傳輸層(Transport layer)的TCP來傳輸資料．關於application layer在整個分層架構中扮演什麼樣的角色，可以參考我之前寫的文章: [Networking]Application Layer Overview，什麼是Socket?Client server protocolHTTP是這樣的，想要發起通訊請求的一方作為client(例如你的瀏覽器)，而server則隨時等候，回應client的請求，client首先會建立一個TCP socket，至於TCP連線是怎麼建立，以及資料如何透過TCP connection在client及server之間傳送，則是另外一回事，並不是HTTP需要考慮的事．Client送出一個請求，例如我要看youtube! 而youtube的server收到這個請求，則回應給他youtube的介面，以及一些影片的清單．HTTP既然作為client及server之間的語言，他必須有個規範大家才聽得懂，不然有人講中文，有人說英文這樣是無法溝通的．以下就來看看HTTP所傳送的資料到底是長怎樣．HTTP messageHTTP message分成兩種，請求(request)及回應(response)，他基本上就是人類可以讀懂的文字．Request message以下一個範例，當你在網址上輸入www.google.com時，你的瀏覽送出去的HTTP message可能會是這樣:GET / HTTP/1.1Host: www.google.comConnection: CloseUser-agent: Mozilla/5.0Accept-language: en第一行為request line，由三個部分組成，method、URL、version，分別以空格隔開．常見的method有GET 、POST 、PUT 、DELETE 、HEAD等等，GET非常地常見，通常代表著你想要取得的某些資源，而你想取的資源則用URL表示，最後HTTP/1.1就是版本．點我看更多關於method的介紹．第二行開始為header lines，field跟value以冒號(:)隔開，上面例子中有Host、Connection、User-agent、Accept-language四個header，還有許許多多的header各自有各自的意義，Host代表server，Connection: Close是叫server回傳完資料後就把TCP connection close掉，關於persistent connections的部分，之後會再寫一篇文章來詳細探討．Request body如果client需要傳送額外的資料給server，就要把資料放在body的部分，是在header lines之後空一行，比如說我要通過一個API新增一個userPOST /users HTTP/1.1HOST: api.domain.comContent-Type: application/jsonConnection: Keep-alive{&quot;name&quot;: &quot;HoMuChen&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;}Response message以下為一個範例:HTTP/1.1 200 OKServer: nginx/1.14.0 (Ubuntu)Date: Wed, 17 Mar 2021 14:34:29 GMTContent-Type: text/htmlContent-Length: 614Last-Modified: Wed, 17 Mar 2021 10:27:32 GMT&amp;lt;!doctype html&amp;gt;&amp;lt;html lang=&quot;en&quot;&amp;gt;........Status Line第一行為status line，由三個部分組成，version、status code、phrase，分別以空格隔開．Status code 跟 phrase拜表著回應的結果，常見的有： 200 OK：成功 301 Moved Permanently: 資源不在此URL，通常搭配著Location的response header，告訴我們要去哪裡取得資源． 400 Bad Request: Request有錯，我server看不懂拉． 404 Not Found: 資源不存在． 500 Internal Server Error: Server出事了…詳細的status code的介紹，可以看我另一篇文章:Introduction to HTTP Response Status Codes: How to use them correctly?Header Lines第二行開始一樣是header lines，我覺得比較重要的是Content-Type，此header就是說明了放在最後body裡的資料是什麼格式，讓client可以去處理．常見的像是text/html、application/json、image/jpeg、application/pdf等等．Body結束header lines之後，空一行，後面就是response body的部分，放著的就是request想要的資料，上面例子中就是html document，也可能是一張圖片的binary data，或是一個Restful API的json資料．Get your hands dirtytext最後就來使用一些linux command line tool來驗證上面講的對不對吧！telnet www.google.com 80使用telnet指令，如此一來就跟google建立了一個TCP連線，接下來輸入並且按下EnterGET / HTTP/1.1Host: www.google.com就可以看到google把網頁吐回來拉～～nc、curl除了telnet之後，也可以用nc作為建立tcp連線的指令，這裡我們用nc來建立一個server，-l 監聽在本機的port 3000上nc -l 3000之後在另一個shell，利用curl作為HTTP client，發送HTTP到port 3000curl localhost:3000nc的terminal上就會出現這些資訊拉～～也就是curl傳送過來的資料，再來試試看上面開創一個新的user的API call吧curl -XPOST \\ -H &#39;Content-Type: application&#39; \\ -H &#39;Connection: Keep-alive&#39; \\ api.domain.com/users \\ -d &#39;{&quot;name&quot;: &quot;HoMuChen&quot;, &quot;age&quot;: 30, &quot;gender&quot;: &quot;male&quot;}&#39;nc server就會收到下面的資料拉！SummaryHTTP作為網路中最常用的client server 通訊協定，簡單地介紹了HTTP message的格式，他是human readable的text format，熟悉他到底傳來傳去到底在傳什麼，可以幫助我們開發網頁應用時更有底氣。也可以學習使用一些linux指令，快速的explore別人的API，或是看看自己送出去的request到底有沒有對。有時也會用curl來寫些簡易的網路爬蟲，可以看看我其他的文章:104人力網站爬蟲: 如何只用shell script來抓取資料這是RESTful API一系列文章中的一篇，想了解更多關於RESTful API及HTTP的，可以看這篇目錄:RESTful API Design — A practical guide感謝您的閱讀~期待下次見！" }, { "title": "[System Design] Data model: Relational V.S. Document", "url": "/posts/system-design-data-model-relational-vs-document/", "categories": "Web Development", "tags": "data model, system design, database", "date": "2020-12-28 20:00:00 +0800", "snippet": "開發應用程式時，時常使用到資料庫，儲存資料並在之後需要時將其取出，如今有許多的資料庫產品可供選擇，提供各種不同的data model及function，在各種使用情境下有不同的表現，開發者根據你的應用程式的需求、資料之間的關係、access pattern、scalability、ACID transaction、fault-tolerance、會有各種不同的適合的選擇．接下來只單純討論資料庫提供給我們application programmer們的data model，看看是否在哪些情況比較適合用哪一種，主要是探討relational 及 document這兩種data model.One-to-many relationship讓我們先從一個簡單的例子Todo list開始，假設我們應用程式有使用者，每個使用者有多個Todo，就這麼簡單的一個one-to-many relationship．Relational DBMS如上圖， 一般使用SQL database的做法，會開兩個table，分別是users及todos，並且在todos table有個欄位user_id為foreign key指到user tableDocument database而在document database中，我們可以將整個資訊存成一個JSON document如上圖，當我們的UI需要呈現某使用者的todo的時候，資料庫只需要一個disk seek就可以拿到全部的資料，對比於relational database，必須在todos table裡找到相對應的rows，再將其與users的row合併．可以看到document database用來model one-to-many relationship的資料可說是天生的適合．Many-to-one and Many-to-many relationship現在假設我們要加入新的功能，使用者可以新增標籤，並把自己的Todo加上一個標籤．Relational database按照normalization的做法，就是再多一個tags table，user_id指向Users，而Todos再多一個foreign key指向Tags，如上圖沒什麼問題．而Document database則會向下圖這樣:資訊重複出現了好幾個地方，容易造成不一致，比如說我想把Coding改成Programming，除了在tags這個array裡面要修改之外，兩個todo裡的tag也要同時修改才行．Document database就不能做normalization嗎？當然是可以的！分別儲存三種類型的document: User、Tag、Todo，當某個user要取得他的資料時，就必須分別從三類document找出相對的document，在合併起來．那這跟relational database的join有什麼不一樣嗎？其實本質上是一樣的！只不過使用relational database時是database幫你做，而使用document database則是要在application code上面自己做，除了會有更多的network round trip time之外，relational database通常也會幫你優化．Schema flexibility另外他們倆之間常被討論到的不同，就是schema的有無，雖然說document database可以讓你隨意的放入任何的JSON document，但我們通常不會這樣做，一般來說都會把相同類型，有ㄧ樣資料格式的document放在一起，只不過資料庫本身並不會強迫每個document的schema要一模一樣．這樣的彈性，讓schema evolution也算方便，資料庫裡可以同時保有舊有的資料和新的資料 ，比如說todo想要新增一個欄位created_at，或是todo原本只能有一個tag，用一個string來表示，現在想要改成可以有多個tag，新新增的資料不在是一個string而是一個array．但如此一來application programmer在使用document database時，就不能保證拿到的資料的格式，會出現類似這樣的code:if (todo &amp;amp;&amp;amp; todo.created_at) { //...}if (todo &amp;amp;&amp;amp; Array.isArray(todo.tags)) { //...}時間久了，資料可能會越來越亂，一不注意就跑出個error:Cannot read property ‘some_field’ of undefined!該如何管理schema evolution，不讓你的應用程式crash，隨著新功能及新資料的加入能夠compatible，繼續穩定的運行就是另一門學問，有機會可以再來探討．What’s the situation preferring to schema-less approach?其實能有schema最好就有，他是你的資料的一個documentation，一個contract，讓programmer寫起程式來更有信心，不用擔心東擔心西，擔心會不會少了個欄位就讓我的process crash掉，那有什麼樣的情況會更適合使用document database嗎？ 資料來自外部，格式不是妳能控制的 有非常多種類的object，分別將每個object放到個別的table可能不太適合比如說event sourcing的架構，每種event type都有各自的資料格式，放在relation database的一個table，會有很多欄位是空的，schema定義起來也會非常麻煩．再來你的資料來源可能來自爬蟲、外部的API，格式可能改變，所以可以在拿到資料的時候就先存起來，之後讀的時候做處理，不然可能就會丟失部分的資料了．Summary如果你的資料之間的關係不複雜，基本上是one-to-many的，一個self-contained的JSON document能夠包含所有需要的資料，那麼document based的DBMS就相當適合，會有更好的performance，因為資料都在一起．Relational database更適合當你的資料之間的關係複雜，有許多many-to-one、many-to-many relationship時，幫你處理join的動作，雖說使用document database也是可以如此，但join的動作必須在application code上執行．另外document database也提供更彈性的schema，當你的應用需要面對許多不同且不確定、不是自己能控制的資料格式時，document database也許會有更好的support．Reference Designing Data-Intensive Applications Chapter 2 https://martinfowler.com/articles/schemaless/" }, { "title": "如何用create-react-app開發，整合一個或多個API backend server", "url": "/posts/create-react-app-integrate-multiple-api-backend-servers/", "categories": "Web Development", "tags": "react, create-react-app", "date": "2020-08-22 20:00:00 +0800", "snippet": "在開發single page application時，會需要透過api來取得及操作資料，本篇文章將示範如何在使用create-react-app開發時，整合一個甚至是多個backend api server！Create-react-app使用create-react-app時，簡單一個指令npm start 就可以開始開發，此時CRA會起一個webpack dev server來serve static files，通常我們會想要做類似這樣的動作: fetch(‘/todos’) 、fetch(‘/api/todos’) 來跟我們的API server通訊，此時該如何讓CRA的dev server將request proxy到我們想要的API server呢？透過package.json最簡單的方法就是在package.json中加一個proxy欄位，”proxy”: “http://localhost:5000” ，如此一來，所有的request便會被proxy到http://localhost:5000．想解決的問題這樣的做法很簡單但卻不太彈性，通常我們會希望外部的資源可以透過環境變數去控制，而不是寫死在檔案裡面，同一份codebase，透過設置不同的環境變數擁有不同的部署，可能是開發環境、測試環境、或staging、production環境 (https://12factor.net/codebase) ．另外將proxy寫在package.json中，只能將所有的ajax導到同一個server，假如您是service oriented architecture或microservices這種架構，可能會有許多的服務，例如data api、search api、authentication api、payment api等等．那該如何將不同的path，例如/api、/search、/auth，route到各自的服務呢？透過setupProxy.js首先需要安裝dependencynpm i -D http-proxy-middleware接著在src資料夾裡新增一個檔案setupProxy.js，範例如下:const { createProxyMiddleware } = require(&#39;http-proxy-middleware&#39;);const API_HOST = process.env[&#39;API_HOST&#39;];const SEARCH_HOST = process.env[&#39;SEARCH_HOST&#39;];const AUTH_HOST = process.env[&#39;AUTH_HOST&#39;];module.exports = function(app) { app.use( &#39;/api&#39;, createProxyMiddleware({ target: API_HOST, }) ); app.use( &#39;/search&#39;, createProxyMiddleware({ target: SEARCH_HOST, }) ); app.use( &#39;/auth&#39;, createProxyMiddleware({ target: AUTH_HOST, changeOrigin: false, }) );};如此一來，就能透過環境變數API_HOST、SEARCH_HOST、AUTH_HOST來指向你的服務，變且成功整合多個服務囉！" }, { "title": "[Networking]Application Layer Overview，什麼是Socket?", "url": "/posts/networking-application-layer-overview-what-is-socket/", "categories": "Networking", "tags": "linux, socket, tcp, udp", "date": "2020-05-05 20:00:00 +0800", "snippet": "Process communication上次講過了網路的分層架構之後，接下來要來關注application layer，這一層就是我們應用程式所在的地方，應用程式可能是網頁瀏覽器、電子信箱、Skype等等，每種不同的應用程式會有他們自己的通訊協定，規定應用程式之間該如何交換資料，以及資料的格式，常見的協定例如是HTTP、FTP、DNS等等．那application layer的process們之間要怎麼互相通訊呢？就是要利用transport layer所提供的服務．What is socket?Application layer的process必須使用transport layer所提供的服務來進行通訊，而這之間的介面就是socket，process只要把資料寫入socket，另一個process從socket讀出資料就好，就是這麼簡單～至於資料是如何在這之間傳遞的，底下的每一層 (transport、network、link、physical layer) 都幫你處理的好好的了，applications就只需要專心做自己的事就好！不過在通信之前，必須要知道對方在哪裡，資料才有辦法送到，一個socket就是一組ip:port pair，ip用來分別process所在的機器，而一台機器上會有許多的process，port number則用來分別是想要跟哪個程序溝通，有些服務基本上監聽在一些固定的port上，方便client來連，例如HTTP使用80、FTP用21、SSH使用22等等．另外當client要向server通訊時，作業系統會隨機指定一個port給他，如此一來server才會知道訊息要回傳到哪裡．Transport layer serviceApplication programer可以根據自己想打造的應用程式的需求，在兩種transport layer所提供的服務中選擇，一個是TCP，另一個是UDP，以下分別介紹．TCPTCP提供的是一個可靠的服務，確保資料一定會完整無缺的抵達另一端，使用TCP的application programmer不用擔心資料會到不了另一端，專心於application protocal就好．TCP有congestion control的機制，當網路變得壅塞的時候，會放慢sender的速度，這是為整個網路著想的設計，但對於application並沒有直接的幫助，可能還會使得速度變慢．UDPUDP的服務並不可靠，也就是並不保證資料一定會送達，對於一些應用來說或許是可以接受的，比如即時的通話或視訊，上一秒的聲音或畫面不見就不見了．是ok的．另外UDP也沒有flow control跟congestion control，sender想送多快就多快，所以如果有application覺得TCP做太多事了，開發起來綁手綁腳，想要看短的latency，就可以考慮使用TCP，例如google的QUIC就是基於UDP上，再重新自己實現了可靠的傳輸．Socket programming之後會寫一篇使用Node.js的net module來實際地使用一下TCP的服務，並在這之上打造自己的application protocol，待續…Application layer protocols接著也會陸續會介紹一些常用的application layer的protocol: HTTP、SMTP、DNS，待續…" }, { "title": "[Networking] 網路的架構，Layered Architecture", "url": "/posts/networking-layered-architecture/", "categories": "Networking", "tags": "layered architecture", "date": "2020-04-04 20:00:00 +0800", "snippet": "網路是個如此巨大的工程，要如何架構，才能讓全世界的人通力合作，一起打造這豐富的世界呢？答案就是Layered Artichecture ．Layered Architecture網路的最終目的，就是讓兩個執行在不同機器的程式可以互相溝通、交換資料，例如你的瀏覽器chrome跟網頁伺服器溝通，你手機的Skype跟另一個人的Skype溝通，而這中間，資料經過了重重難關、無數的機器及路由器，這麼多的機器到底是如何一起合作的呢？答案就是分層的架構，Layered Architecture，生活中很多地方都可以看到類似的架構，我們以公司內部的信件為例好了，假設現在有一間公司有ABC三間分公司，在A公司的Alice想要寄封信給B公司的Bob，Alice首先寫了信的內容，將之放入信封內，並寫上收件人: B公司的bob，之後將信封交給A公司裡的一個叫做信件部門的部門，信件部門將信封寫上B公司的地址，再將信封交給附近的郵局，而郵局則使用卡車、飛機等運輸工具將信封運到B公司附近的郵局，此郵局再送到B公司，最後B公司的信件部門收到信，將他交給Bob．分層架構將一項任務分成了許多層，每一層只專心做自己的事，並且使用下一層所提供的服務．例如上圖中，人這一層，只專心將內容寫入信中，放進信封袋裡，然後交給下一層的信件部門就好，人這一層使用了信件部門這一層提供的服務，完全無需去擔心這封信最後是如何抵達另一個人那邊去，而信件部門層則使用郵局提供的服務，郵局服務提供了公司的工司的寄送，而信件部門就只專心將信件交給公司裡的某某人．Layers in the Internet網路世界的分層如下圖，根據OSI Model應該是有七層，但就目前常用，只介紹此五層，Application layer、Transmission layer、Network layer、Link layer、Physical layer．Application layer這裡就是我們的應用程式所在地方，根據你的程式所要達成的目的，各自執行著自己的協議．例如網頁瀏覽器跟伺服器，一個說給我看某某網頁首頁，伺服器就說，好！給你！這之間資料交換的格式及方法，就是由HTTP協議所規範，只要瀏覽器跟伺服器都遵守HTTP的規範就能互相溝通．電子信箱服務使用的則是SMTP，查詢網域ip位置的是DNS，傳輸檔案的FTP等等．而所有的application都必須依賴使用下層transmission layer的服務，transmission laye會負責applications之間的通訊，application只需要相信transmission layer會將信息傳遞給另一個application，專心做自己的事就好！Transmission layerTransmission layer protocol負責傳遞信息於application之間，一台機器上可能有多個application，而transmission layer protocol則是用port number來分辨到底目標是哪個process．目前網路世界中有兩種Transmission layer protocol，分別是TCP及UDP，TCP提供的服務保證資料一定會完整無誤地抵達目的地，並且還有flow control及congestion control．而UDP則沒做這麼多事，資料可能會丟失．Network layer每台連上網路的機器都會有個地址，有就是IP位址，Network layer中的唯一一個protocol就是IP protocol，負責將資料從一個IP送到另一個IP，也就是從一台host到另一台host！這之間會經過許多的router，每個執行IP protacol的router會決定要將封包傳遞給哪下一個router來抵達目的地，但並不保證封包一定會抵達．Link layer以上兩層當web dev以來，也從來沒碰過，哈！不熟，如果有興趣的人在自己去找資料囉～Physical layer這邊就是訊息從0101的bits轉換成真正物理世界裡存在的傳播媒介的地方了，可能是電磁波四處亂射，也可以是光走在光纖裡，或是電走在電線裡．Summary為了讓兩個在不同host上的process能夠通訊，首先你要指出你想要的通訊的process在什麼地方，透過ip:port這個pair，network layer會負責將信息送到擁有這個ip的機器，但卻不保證資料不會丟失，而network layer則透過port知道要將資料傳給哪個process，並且如果是TCP的話，會保證資料完好無缺地抵達另一個process那邊 (TCP可靠的傳輸建立在不可靠的IP上，酷吧！)，最後application根據自己的邏輯，來決定資料的格式，如何及何時發送和接收．" }, { "title": "[Networking]什麼是網路？網路的組成及網路服務供應商 ISP", "url": "/posts/what-is-networking-and-isp/", "categories": "Networking", "tags": "ISP", "date": "2020-04-04 20:00:00 +0800", "snippet": "網路，可能是人類最大的工程成就之一，如今有數十億的人透過網路連接，在幾秒鐘之內就能夠互相通訊、完成某種任務，各種裝置互相連結，包括伺服器，個人桌上型電腦、平板、手機、未來還會有更多樣的things加入，例如車子、家電、各種感測器 ，等等．如此巨大的工程，大規模的全世界的共同合作，到底是如何做到的？工程架構的決定、協議的制定都值得去借鏡學習．網路的組成網路連接了世界上數十億的裝置，這些連上網路的裝置就稱為hosts, end-systems，而網路本身由communocation links及packets switches組成，links就是指電話線呀、同軸電纜、光纖、電磁波頻譜這些實際傳送資料的媒介，而資料從一個host到另一個host是被拆分成許多一個一個的packet，藉由link傳送，到達packets switches，每個switch則負責把packet從進來的link選擇一個link傳出去，最後到達目的地．那到底是誰提供這些links及switches給我們的裝置去連接上呢？就是網際網路服務供應商，Internet Service Provider，ISP．Internet Service Provider(ISP)在台灣，當我們想要使用網路時，就要去找中華電信、遠傳、台灣大哥大等等的電信商，他們就是ISP，負責建設基礎設施，設定連結，我們透過行動網路、光纖、DSL連上，網路供應商的設備就會負責傳遞資料來往於我們與目的地之間．比如A跟B都去了中華電信申請了網路服務，連接上後A及B之間就能互相通訊了，那現在C使用了遠傳的服務，AB及C該要怎麼通訊呢?如果中華電信跟遠傳之間互相連接起來就可以了．那全球有那麼多的用戶，各自使用各自的服務供應商，如果全部都必須要能夠互相通訊，就必須要全部的網路服務供應商都互相連接才行，但這要有點太不實際了，連結的數量太過龐大，成本非常高．現在假設有個全球範圍的服務供應商，各地區的供應商只要接上去就可以了，下層的服務供應商成了上層的客戶，依據流量付費，有錢賺的生意當然就有許多人進來做，許多競爭的供應商加入，彼此也可以互相連結，客戶也可以跟多個供應商合作，如此當有任一供應商服務中斷，也不會影響終端用戶．於是網路就成了階層式的架構，上下層的客戶關係，同層之間也會互相連接，各個供應商自己負責建設自己的基礎設施及設定路由，封包的傳送可能會有經濟的考量(盡量不走上層供應商，因為要錢，只在同層之間交換)、或者是政治考量(不想封包經過某某國家的設備，或是所以封包都要經過某地，以利監控、阻擋某些來源)．" }, { "title": "[Google Sheet]Sparkline，在儲存格裡插入迷你圖表", "url": "/posts/google-sheet-sparkline/", "categories": "Google Sheet", "tags": "google sheet, sparkline", "date": "2020-01-23 20:00:00 +0800", "snippet": "Sparkline用起來長怎樣我在[Google Sheet]我如何製作進度表這篇裡以及[Google sheet]我如何製作股票損益表，自動抓取最新股價大家可以看到一些儲存格裡都有迷你圖表，像是柱狀圖、線圖，這就是sparkline這個函式的功用，讓我們不需要額外插入一些圖表，就能直接在格子中畫圖．Sparkline用法sparkline(range, [options])range就是你的資料，是一個範圍，比如A1:A10、C3:L3options則是一些其他設置，可有可無，例如圖表的類型是line、bar，圖表的顏色，線條粗細等等．寫法為在一個大括號內{}，一連串的屬性及相對應的值，以分號(;)分開，例如：{“charttype”,”bar”; “color”,”blue”; “max”,1}圖表類型圖表的類型可以在options裡透過charttype屬性設置有幾種選擇line, bar, column, winloss (預設為line)charttype, line: 折線圖 color: 線的顏色 linewidth: 線的粗細charttype, bar: 堆疊長條圖 max: 設定橫軸的上限值 color1: 兩個堆疊交錯的長條圖，第一種的顏色 color2: 兩個堆疊交錯的長條圖，第二種的顏色charttype, column: 直條圖 color: 直條圖的顏色 lowcolor: 最低值的顏色 highcolor: 最高值的顏色 firstcolor: 第一欄的顏色 lastcolor: 最後一欄的顏色 ymin: 欄高的下限值 ymax: 欄高的上限值範例黑色折線圖sparkline(E1:E10)藍色且較粗的折線圖sparkline(E1:E10, {“color”,”blue”; “linewidth”, 2})堆疊長條圖sparkline(H1:H10, {“charttype”,”bar”; “max”, 50})Bar為堆疊長條圖，交替兩個顏色一個疊著一個，max50為上限值，也就是當值疊加到50時會填滿那一欄．長條圖sparkline(H1, {“charttype”,”bar”; “max”, 5})這裏我們資料只有一個值，也就是H1的1，當值等於max的5時就會填滿整格，常可以用來代表進度，例如值為百分比而max為1直條圖sparkline(H1:H10, {“charttype”,”column”})" }, { "title": "什麼是message queue? 優點及使用場景", "url": "/posts/message-queue-advantages-use-cases/", "categories": "Web Development", "tags": "message queue", "date": "2019-12-13 20:00:00 +0800", "snippet": "在大型網頁應用程式系統中，當我們的服務越來越多，服務之間就需要溝通，透過http restful api，想必大家都一定遇過，或許或多或少也聽過使用message queue，那到底它是什麼？為什麼要用它？以及跟restful api有何不同的使用場景呢？什麼是message queue?顧名思義，就是有個queue，訊息先入先出( FIFO )，基本上就是提供一個讓不同process間通訊的方式( asynchronous messaging )，會有產生訊息的producer，及消耗處理訊息的consumer．為何使用？為什麼要使用message queue呢？ 他能帶給我們哪些好處？Fault tolerance一但訊息被成功送進queue裡，在他被成功消耗掉之前，都會保存著，有時可能因為莫名原因，consumer都掛了，在consumer恢復之前，需要做的任務還留著，能夠等到恢復之後再繼續處理．Decoupling訊息的發送方和接受方都不需要知道彼此，consumer和produce可以隨便你用不同語言實作，只要message的格式事先有溝通好，知道就好．Scaling系統可能有時會突然面臨大的流量，此時queue就提供了一個buffer的功能，能夠緩衝尖峰流量，在資源固定的情況下，能夠處理更多的任務，以時間換取資源！但有時訊息可能真的太多，產生的速度快於消耗的速度，或是你無法接受太長的latency，此時consumer process就可以隨時增加多個，不會有衝突的風險．Compare to RESTful API同樣都是透過network，processes之間的通訊，他們之間最大的不同就是一個是asynchronous message passing，而HTTP request是synchronous(同步)的，也就是client發出了request，會等待在那邊，期待著response回來，所以latency就是一個重要的指標，也主要影響use cases的因素(見下段)．Use CasesLatency不重要的時候Sending emails這類工作，使用者可以接受信晚個幾秒，幾十秒甚至幾分鐘到時．或是比如Build一個你的產品的search index，資料不是由使用者寫入，他也不會知道何時資料應該要出現，就不會怪你的系統怎麼這麼慢拉．Computing heavy jobs比如說image resizing或是video encoding這類CPU intensive的工作，一來是使用者上傳完圖片影片，可能不需要等到這類都做完了你才跟他說ok，二來是你也不會想讓這類工作block住或拖垮你的web server的效能．無法控制的工作當你的工作需要協調許多資源才能完成時，往往可能一個資源overloaded，就會造成整個工作變得很慢，尤其是當資源又是外部的你無法控制時．Tools主要的Message broker分成兩類，memory based及log based，各類比較知名的分別像是RabbitMQ及Kafka，對於他們的用法及使用場及不同有興趣的，可以看我的另一篇文章:Difference bwtween rabbitmq and kafkaTutorial之前有寫過的使用Redis來當作message broker的示範:如果你連Redis都不想架！可以使用GCP的服務Pub/Sub，上GCP的網站點一點，開箱就用！" }, { "title": "快速擁有一個Asynchronous Task Queue，使用Redis and Kue.js", "url": "/posts/asynchronous-task-queue-using-redis-and-kue-js/", "categories": "Web Development", "tags": "message queue, node.js, redis", "date": "2019-10-30 20:00:00 +0800", "snippet": "這是篇教你如何在node.js環境下，快速擁有一個Task queue的tutorial，如果想了解什麼是message queue，以及為什麼跟什麼時候要使用它，可以參考我的另外一篇文章什麼是message queue? 優點及使用場景!Outline 部署Redis，使用Docker，在本地起一台Redis 介紹Kue.js部署Redis先準備一個shell script run_redis.sh ，記錄下docker指令，以便之後繼續使用，內容指令如下：#!/bin/shdocker run \\ -d \\ -p 6379:6379 \\ -v $PWD/redis_data:/data \\ --name my-redis \\ redis解釋一下這個docker指令各個參數的意義: -d 在背景執行 -p 6379:6379將容器內的port:6379映射到本機的port:6379 -v 將容器內的檔案掛載到本機，此處將容器內存放redis 資料的資料夾 /data 掛載到$PWD/reids_data，也就是當前目錄的redis_data資料夾 redis為image的名稱，可以用例如redis:latest, redis:5.0，後面加上版本號，沒加就是latest，可用的版本及latest是哪一版可以從此連結查詢https://hub.docker.com/_/redis/執行完之後執行 docker ps 就可以看到container的資訊如下介紹Kue.js安裝$ npm install kueConnectionvar kue = require(&#39;kue&#39;)var queue = kue.createQueue();預設會連接到127.0.01:6379的redis，如果想要改變，可以var queue = kue.createQueue({ redis: { port: 1234, host: &#39;10.0.50.20&#39;, auth: &#39;password&#39;, db: 3, // if provided select a non-default redis db options: { // see https://github.com/mranney/node_redis#rediscreateclient } }});Produce message連接到message broker後，就可以開始送message過去拉～queue.create(&#39;email&#39;, { title: &#39;welcome email for tj&#39;, to: &#39;tj@learnboost.com&#39;, template: &#39;welcome-email&#39;,}).save( function(err){ if( !err ) console.log( job.id );});這裡我們發送了一個message到名為email的queue裡，內容就是個JSON object.Consume message接著我們就可以在別的地方，接收發出去的訊息及處理拉queue.process(&#39;email&#39;, function(job, done){ doSomethingWithData(job.data) done();//acknowledge this message});queue.process接收兩個參數，第一個是queue的名字，這裡是以’email’為例，第二個參數是一個callback function，他有兩個參數，分別是job跟done，job.data就是我們剛剛發送出去的message，而done是一個function，當你確定這個message已經處理完的時候可以執行done()Concurrency controll上面例子中，一次只會接收一個message直到你ack這個message，如果你的工作是IO密集的話，你可能會想一次同時處理多個message，此時可以在process function中，加入第二參數:queue.process(&#39;email&#39;, 10, function(job, done){ doSomethingWithData(job.data) done();//acknowledge this message});這樣一來，這個worker process同時就可以接收處理10個message!以上是簡單地介紹如何連接到message broker，以及產生和消耗信息，完整的說明文件及更多功能用法，可以到github上看看:Automattic/kue延伸閱讀 什麼是message queue? 優點及使用場景 RabbitMQ和Kafka有何不同？何時該選用哪種產品？ " }, { "title": "[Google Sheet]我如何製作進度表", "url": "/posts/google-sheet-track-progress/", "categories": "Google Sheet", "tags": "google sheet, sparkline", "date": "2019-08-14 20:00:00 +0800", "snippet": "追蹤每項任務到目前為止的進度，或每段時間(每天、每個禮拜、或每個月)的努力情況首先先把任務跟時間輸入進去，如下圖: 時間只要輸入兩格就可以了，點住右下角的小藍點往右拉，就會補上一樣間距的時間，也就是說那兩格如果是差一天，之後每一格都會差一天，一個禮拜、一個月亦然． 代表每項任務需要完成的單位，簡單用數字量化表示，比如一堂課有10週的課程，就輸入10． 每個時段，完成某個任務多少單位，就填在這個地方． C4那格裡的公式是=sum(D4:Z4)/B4，就是簡單地將同個任務右邊的每個時段完成的單位(D4:Z4)加起來，再除以Total Unit(B4)，做完後往下拉，每個任務的progress就都有了． C4=SPARKLINE(SUM(D4:Z4)/B4,{“charttype”,”bar”;”max”,1}) ，這裡使用了SPARKLINE這個函式，將(4)所計算出來的值丟進去第一個參數，第二個參數{“charttype”,”bar”;”max”,1}代表著我們要的是柱狀圖，且最大值為1，因為進度是一個0–1的數字． 增加一列Total，將每個任務的Total unit，progress及每周的進度都加總起來，以此為例B11 = SUM(B4:B10)，然後再往右拉，應用到每一格上． 製作每時間區間進度條，只是將上述第6步驟的值視覺化: 先將日期上面的格子全部合併成一格，將D1:N1選起來，從格式 → 合併儲存格 → 全部合併 這一格 =SPARKLINE(D11:N11, {“charttype”,”column”})，ㄧ樣使用SPARKLINE函式，如果想要一條線就=SPARKLINE(D11:N11)就好，看起來就像這樣 大功告成～～🎉🎉🎉Referece [Google Sheet]Sparkline，在儲存格裡插入迷你圖表" }, { "title": "InstMap TW — 從地圖上找尋附近的台灣Instagram熱門景點", "url": "/posts/instmap-tw-popular-location-on-map/", "categories": "Web Development", "tags": "instagram, react, node.js, express, gcp", "date": "2019-03-25 20:00:00 +0800", "snippet": "到了一個地方，想知道附近有什麼好玩的景點嗎？想看看IG，Instagram上大家都去哪裡嗎？可以使用我最近做的一個玩具服務InstMap TW，找尋台灣最多人標記的地標，或是附近最近的相對熱門的地標．點選地圖旁的小人圖案，可以使用您現在的位置做搜尋，不想開定位的話，也可以手動拉動地圖改變中心點．每個地點點進去可以看到該地點的貼文，可切換成瀏覽圖片或是日期、文字、按讚數、留言數等相關資訊．使用到的技術、工具、服務大概是 Front-end react redux create-react-app Back-end web server Nginx ExpressJS Cloud service AWS DynamoDB Cloud Firestore Cloud functions Cloud Pub/Sub Cloud Schedule Compute Engine " }, { "title": "利用Docker建立PostgreSQL開發環境", "url": "/posts/docker-postgres-dev-environment/", "categories": "Web Development", "tags": "docker, postgres", "date": "2018-07-25 12:19:15 +0800", "snippet": "首先先將需要的configuration variable放到環境變數裏，在這裡就是我們的PostgreSQL database server要起在哪一個port，user，password，db等等，準備好你的 dev.env檔案如下，然後執行 . ./dev.envexport PG_PORT=5432export PG_USER=adminexport PG_PWD=secretpwd再來是一個shell script run_postgres.sh ，記錄下docker指令，以便之後繼續使用#!/bin/shdocker run \\ -d \\ -p $PG_PORT:5432 \\ -e POSTGRES_USER=&quot;$PG_USER&quot; \\ -e POSTGRES_PASSWORD=&quot;$PG_PASSWORD&quot; \\ -v &quot;$PWD/pgdata&quot;:/var/lib/postgresql/data \\ postgres解釋一下這個docker指令各個參數的意義: -d 在背景執行 -p $PG_PORT:5432 將容器內的5432port映射到本機的$PG_PORT -e 注入環境變數到容器裏，有哪些環境變數可用，可以參考官方連結https://hub.docker.com/_/postgres/ -v 將容器內的檔案掛載到本機，此處將容器內存放postgres 資料的資料夾 /var/lib/postgresql/data 掛載到$PWD/pgdata，也就是當前目錄的pgdata資料夾 postgres為image的名稱，可以用例如postgres:latest, postgres:9.6，後面加上版本號，沒加就是latest，可用的版本及latest是哪一版可以從此連結查詢https://hub.docker.com/_/postgres/執行完之後執行 docker ps 就可以看到container的資訊如下接下來要進去容器裡面create table，下下sql指令的話，就是執行docker exec -it {container id} psql -U $PG_USERPG_USER是我們的環境變數，預設的DB(此處為admin)的名字就跟PG_USER一樣，進去容器之後看到如下，就可以開始使用拉～" }, { "title": "使用Node.js + Express整合Line Notify通知服務", "url": "/posts/express-line-notify-service/", "categories": "Web Development", "tags": "express, node.js, line notify, middleware", "date": "2017-12-28 20:00:00 +0800", "snippet": "快速簡單地使用一個express的middleware完成line notify的oauth2流程，取得access_token來做後續的消息推送使用line notify可以簡單地讓網站開發者推送訊息到使用者的line裡，雖不像line bot可以跟使用者做更多的互動，但如果只是要單方面的的發送訊息，使用line notify就足矣，而且還不像line bot的push api要收費，這個不用錢～登入流程Line notify的流程大致來說是這樣的: GET https://notify-bot.line.me/oauth/authorize 帶著你的client id及redirect_uri，GET上面的url，使用者就會被導到line的登入頁面 登入成功之後，line那邊會倒回上述的redirect_uri並且query string帶著code2.POST https://notify-bot.line.me/oauth/token 將第一步得到的code，post到上述url，就可以拿到一個token POST https://notify-bot.line.me/api/notify 帶著上面步驟所取得的token及訊息，post上面的url，使用者就可以收到消息拉～ 套件使用接下來要實作以上流程覺得好麻煩喔～小的已將上述前兩個步驟寫成一個express的middleware供大家使用，說明如下： npm install express-line-notify 傳入config物件，需要clientId及clientSecret 選個endpoint來走以上oauth2流程，記得endpoint要加在callbackurl裡 const express = require(&#39;express&#39;);const lineNotify = require(&#39;express-line-notify&#39;);const config = { clientId: &#39;your-client-id&#39;, clientSecret: &#39;your-client-secret&#39;,}const app = express();app.use( &#39;/endpoint_u_want_to_use&#39;, lineNotify(config), otherMiddleware);app.listen(3000); 4.如上實作之後，便可以在otherMiddleware裡的req[‘line-notify-access-token’]拿到token拉～就可開發者要怎麼使用了 最後附上git hub repository，有較為詳盡的使用說明．HoMuChen/express-line-notify" } ]
