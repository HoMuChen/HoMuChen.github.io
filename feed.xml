<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-tw"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://homuchen.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://homuchen.com/" rel="alternate" type="text/html" hreflang="zh-tw" /><updated>2022-04-09T12:52:09+08:00</updated><id>https://homuchen.com/feed.xml</id><title type="html">HoMuChen</title><subtitle>Hi! This is HoMuchen, 陳河穆. I am a software engineer working at Largitdata now. This is where I record whatever I learned.</subtitle><entry><title type="html">如何開始開發你的API: API first principle and OpenAPI</title><link href="https://homuchen.com/posts/api-first-principle-openapi/" rel="alternate" type="text/html" title="如何開始開發你的API: API first principle and OpenAPI" /><published>2022-04-09T12:50:00+08:00</published><updated>2022-04-09T12:50:00+08:00</updated><id>https://homuchen.com/posts/api-first-principle-openapi</id><content type="html" xml:base="https://homuchen.com/posts/api-first-principle-openapi/"><![CDATA[<h1 id="api-first">API first</h1>
<p>在一頭熱開始寫code實作你的API service之前，應該首先要關注API中的<strong>I</strong>字，也就是<strong>interface</strong>，
interface是作為服務提供者及服務使用者溝通的介面，為什麼要首先定義好interface呢？有幾下幾個好處:</p>

<h2 id="更早得到回饋">更早得到回饋</h2>
<p>為什麼要寫API，總是因為有人要用嘛～有人希望我們提供某些服務，而API就是使用這些服務的入口及介面，
如果我們可以在開工之前，就先把介面設計定義好，並交給客戶，如此一來，
客戶們就可以先看看我們所提供的介面好不好用，有沒有任何的問題，想要的功能有沒有齊全，
如果有需要修改或增減的地方，就能儘早地得到回饋！在真正投入心血開發之前，導正方向～</p>

<h2 id="更穩定">更穩定</h2>
<p>由於上述的原因，我們的介面就會更穩定，更少需要變動，整個系統以更容易去維護。
介面的變動往往牽涉到多方人員，越多人依賴這個介面，一旦要改動就麻煩了，所牽涉的層面就越廣。</p>

<p>但也並不是說介面就一定不會變，在整個產品的生命週期中，一定會經歷持續改善的過程，可能要加新功能，
，或是發現有更好用的介面，只是在我們應該盡最大的努力來維持介面的穩定。</p>

<h2 id="併行開發">併行開發</h2>
<p>最後，一旦<strong>介面</strong>定義好了之後，服務提供者及使用者就可以同時針對這個介面來進行工作了，
當兩邊都完成各自的工作後，就可以接起來看看有沒有成功，
如此一來就可以避免掉使用者苦苦等著提供者完成的窘境。</p>

<p>那在完成實作之前，該要先如何描述這個介面呢？這個描述的方法或語言應該要是一個標準，
如此一來，各方單位才能看得懂，而這個標準就是<strong>OpenAPI</strong>。</p>

<h1 id="openapi">OpenAPI</h1>
<p>OpenAPI是一個描述RESTful API的標準，藉由寫下OpenAPI的spec檔案，
可以讓不管是電腦或是人類的使用者知道，你的API可以做到哪些事，提供了什麼功能及怎麼使用，
而不需要再去看source code，或者是真的打打看你的API service來得知！</p>

<p>這裡就不詳細說明OpenAPI該怎麼使用了，想了解的去官網查詢～</p>

<ul>
  <li><a href="https://swagger.io/specification/" target="_blank"><strong>OpenAPI Specification</strong></a></li>
</ul>

<p>這是RESTful API一系列文章中的一篇，想了解更多關於RESTful API及HTTP的，可以看這篇目錄:</p>

<ul>
  <li><a href="/posts/http-restful-api-design-practical-guide/" target="_blank"><strong>RESTful API Design — A practical guide</strong></a></li>
</ul>]]></content><author><name>HoMuChen</name></author><category term="Web Development" /><category term="api" /><category term="http" /><category term="restful api" /><summary type="html"><![CDATA[開發API應該要使用怎樣的流程，先定義好介面有哪些好處，以及可以使用哪些工具呢？(OpenAPI 3.0)]]></summary></entry><entry><title type="html">[讀書筆記] 遠距工作模式: 麥肯錫、IBM、英特爾、eBay都在用的職場工作術</title><link href="https://homuchen.com/posts/book-note-remote-work-go/" rel="alternate" type="text/html" title="[讀書筆記] 遠距工作模式: 麥肯錫、IBM、英特爾、eBay都在用的職場工作術" /><published>2022-04-02T22:04:00+08:00</published><updated>2022-04-02T22:04:00+08:00</updated><id>https://homuchen.com/posts/book-note-remote-work-go</id><content type="html" xml:base="https://homuchen.com/posts/book-note-remote-work-go/"><![CDATA[<p>為何要遠距工作？遠距工作有哪些好處？常見會遇到的問題有哪些？該如何解決，
不管是以<strong>雇主</strong>的角度還是以<strong>員工</strong>的角度，在這本書<a href="https://www.books.com.tw/products/0010856669/"><strong>《遠距工作模式》</strong></a>裡都有提及。</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/book-note-remote-work-1.jpg" alt="書: 遠距工作模式" /></p>

<h1 id="為何要遠距工作">為何要遠距工作</h1>
<p>遠距工作會帶來好處呢？以下從雇主或員工的角度來看待這個問題</p>

<h2 id="遠離令人分心的辦公室環境">遠離令人分心的辦公室環境</h2>
<p>在辦公室中，可能會有各種分心的來源，容易被不斷地打擾，時間被切割成許多的碎片，
對於有些需要<strong>長時間不被打斷</strong>，才能進入狀況的任務，這樣的環境並不適合。</p>

<p>當然並不是說其他的地方就沒這問題，在家可能充滿各種誘惑，冰箱裡的零食、
小孩或配偶的干擾，但你擁有了在哪裡工作的自主權，就可以更主動地來處理這個問題。</p>

<h2 id="省下通勤的時間">省下通勤的時間</h2>
<p>每天擠在電車、火車裡，或者是開車塞中公路車陣中，這樣的事情實在是很難讓人快樂起來。</p>

<p>有些人會把通勤時間拿來利用，我自己也不例外<a href="/posts/how-i-keep-reading/" target="_blank">(<strong>《原子習慣》應用: 我是如何養成閱讀習慣</strong>)</a>，
在電車裡閱讀，或是開車的時候邊聽有聲書，
不過如果可以好好地在家裡做這些事，不是更棒嗎？😄</p>

<h2 id="逃離朝九晚五">逃離朝九晚五</h2>
<p>下午得接小孩放學嗎？去參加小孩在學校裡的活動？或者你是夜貓子想要睡到中午，
晚上在火力全開最有效率的工作，做得到這些正式正式彈性上班最棒的好處之一，
<strong>重要的是工作成果，而非準時打卡</strong>。</p>

<h2 id="不用擠在都會區">不用擠在都會區</h2>
<p>大公司的總部集中在都會區，為了取得好的工作機會，必須來到都市，
但卻可能犧牲了自由、美妙的鄉間土地與新鮮的空氣，房子那麼貴！
交通也擁擠，我們真的願意付出那些金錢代價，換一間鳥籠住嗎？</p>

<p>但都市確實有便利的生活及刺激的娛樂，這之間的取捨就看個人喜好了，
不過遠距工作提供了另一種可能的選擇。</p>

<h2 id="真正的奢華">真正的奢華</h2>
<p>我有個夢想，等到退休之後之後我要幹嘛幹嘛，為何要等到退休呢？！
常常就是因為要上班的關係～</p>

<p>我想要去到某個雪國，好好地滑雪滑上一個月，精進我的技能，如果是受限於要在某地上班的話，
一年可以出國滑個十天好像就很了不起了。不一定要是滑雪，你可能有各種夢想，可能是衝浪、
環遊世界、帶小孩去參加各種活動，或者只是多待在家裡陪伴家人，<strong>人生並不需要畫分出拼命工作與退休養老的界線！</strong></p>

<p>在<a href="https://www.books.com.tw/products/0010621037" target="_blankA"><strong>《一週工作四小時》</strong></a>這本書裡，
作者稱這類擁有時間及機動性的族群為<strong>新富族</strong>，擁有決定何時工作及在哪裡工作的自由，就能使你的財富倍增！</p>

<p>延伸閱讀:</p>

<ul>
  <li><a href="/posts/book-note-the-four-hour-work-week/" target="_blank"><strong>[讀書筆記] 一週工作4小時: 擺脫朝九晚五的窮忙生活，晉身「新富族」！</strong></a></li>
  <li><a href="/posts/double-your-money-without-any-extra-work/" target="_blank"><strong>如何不用做額外的工作，就使你的收入倍增</strong></a></li>
</ul>

<h2 id="世界人才庫">世界人才庫</h2>
<p>當你公司的工作模式不在需要進辦公室時，來自全球的人才都可以為你所用。</p>

<p>除了找到人才外，把人才留住也是至關重要的問題，如果不是遠端工作，
那有些離職原因可能就是跟工作本身無關的，例如結婚了、受夠這裡的天氣了、
想多陪陪家人，或單純想換個新環境？一但遠端工作，好人才就不必離職，也能做他想做的事！</p>

<h2 id="省錢">省錢</h2>
<p>省錢並不是遠距工作的主要目標，但如果可以省錢，又何嘗不是件好事呢？
在提升了大家的生活品質、還能爭取來自世界各地的人才的同時，
提高生產力減少人力及不需要辦公室，都能額外帶來省錢的好處。</p>

<h2 id="成果導向">成果導向</h2>
<p>在辦公室上班蠻容易會有這樣的問題:</p>

<p><strong>準時到公司又晚離開 + 好相處的好人 = 好員工？</strong></p>

<p>但其實有可能他根本沒有太多工作的產出，僅憑著他有出現在辦公室又很聽話，就覺得他工作的效率棒棒。
一旦實施遠距工作，擁有了在何時何地工作的自由，付出的代價就是需要追蹤任務及回報進度，
而公開的工作成果使得有沒有產出就一目瞭然，無所遁形了，雇主也可以更客觀的評量員工的績效，
而不只是憑感覺。</p>

<h1 id="藉口及問題">藉口及問題</h1>
<h2 id="我怎麼知道員工有沒有在工作">我怎麼知道員工有沒有在工作?</h2>
<p>其實如果身為雇主你有這樣的質疑，那你應該一開始就不應該聘請這位員工，如果他真的會偷懶，
不管是在辦公室還是在遠處，都一樣會偷懶～</p>

<p>而且遠端工作，更容易是成果導向的，避免掉員工其實只是待在辦公室裝忙給你看的這種狀況！</p>

<h2 id="家裡充滿誘惑">家裡充滿誘惑</h2>
<p>電視機就在那裡，遊樂器也在那邊，冰箱裡有好吃的冰淇淋，還有一堆待洗衣物，
家裡有各式各樣的事物可能吸引你，你說要如何在家工作呢？</p>

<p>答案很簡單，因為你有工作得做，而你是個負責任的人。
另外對抗誘惑最好的方法就是有趣且有成就感的工作，如果使命感不明確，工作太枯燥無味，
我想你的問題是該換一份工作，而不是在哪裡工作。</p>

<p>當然有時環境就是會有影響，後面內容就有建議可以將工作與私人的空間做出明確的區隔。</p>

<h2 id="我現在就要答案">我現在就要答案</h2>
<p>如果在辦公室裡，很容易就去打擾別人，其實很多問題可以自己找到答案，
或者是先將問題釐清想清楚一點，但如果同事就在你旁邊，隨口就去問他好像沒什麼大不了的，
所以容易就會打斷同事專心工作的時間。</p>

<p>並不是每個問題都需要立即獲得解答，可以依照事件的緊急程度來決定溝通的管道，
不急的問題使用Email，稍微急一點的可以使用些即時通訊的軟體，很急的話就能直接打電話給遠距工作的同事，</p>

<p>讓同事自己決定何時回覆的你的訊息，避免在需要一段長時間專心工作的時候被打斷，導致效率降低。</p>

<h1 id="一些具體的作法">一些具體的作法</h1>
<h2 id="出去社交">出去社交</h2>
<p>許多人對於遠距工作的恐懼在於覺得太過孤僻，跟同事跟人都沒有相處互動，
但就算在家裡，你也可以跟配偶、子女、家人或是鄰居有高品質的互動，
不過工作跟私人時間要區分好就是了。</p>

<p>另外沒人說你一定要一直宅著在家裡工作呀～
你可以去咖啡廳、共享工作空間、去公園跟路人打籃球，或者是做志工，
遠距工作不表示你非得被綁在家裡的書桌前。</p>

<h2 id="設立明確界限">設立明確界限</h2>
<p>原先朝九晚五的好處就是上下班容易切分清楚，中間的通勤也能作為緩衝，
使得你知道離開辦公室到家裡就可以好好地放鬆，週末的時間，基本上也不會被公事給打擾，</p>

<p>而在家工作，你一早醒來在床上打開筆電，回覆電子信箱，接著做早餐然後邊吃邊工作，
用完晚餐後，你又覺得好像得跟誰誰誰聯絡一下，可能不小心就從早上七點工作到晚上九點，
所以就算是遠距工作，上下班的時間也必須清楚，一來可以讓自己工作時更容易進入狀態及下班時就不要工作，
二來也是可以讓你的共事者知道何時是找得到你的時間。</p>

<p>而在空間上，在家也要區分出一個區塊是特地用來工作的，要工作就要到那邊去，
離開那裡你就是卸載，另外人體工學的基本需求也要好好滿足，
有張合適的工作桌、椅子螢幕等等設備，自己的健康自己要顧呀！</p>

<h1 id="結論">結論</h1>
<p>以上從這本書裡，就我比較有感覺的幾個點在這邊跟大家分享，書中還有許多其他的面向及觀點，
有興趣的朋友可以去找來看看唷～</p>

<p>未來我自己也可能會朝向這方向來調整我的工作模式，想嘗試看看<strong>數位遊牧</strong>的生活型態，
有後續動作及消息，再上來更新！掰掰～👋</p>]]></content><author><name>HoMuChen</name></author><category term="讀書筆記" /><category term="books" /><category term="life style" /><category term="remote work" /><summary type="html"><![CDATA[為何要遠距工作？遠距工作有哪些好處？常見會遇到的問題有哪些？該如何解決， 不管是以雇主的角度還是以員工的角度，在這本書《遠距工作模式》裡都有提及。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://storage.googleapis.com/homuchen.com/images/book-note-remote-work-1.jpg" /><media:content medium="image" url="https://storage.googleapis.com/homuchen.com/images/book-note-remote-work-1.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">如何在Mac OS中使用command line來將文字複製到剪貼簿</title><link href="https://homuchen.com/posts/mac-os-copy-to-clipboard-using-command-line/" rel="alternate" type="text/html" title="如何在Mac OS中使用command line來將文字複製到剪貼簿" /><published>2022-03-28T20:40:00+08:00</published><updated>2022-03-28T20:40:00+08:00</updated><id>https://homuchen.com/posts/mac-os-copy-to-clipboard-using-command-line</id><content type="html" xml:base="https://homuchen.com/posts/mac-os-copy-to-clipboard-using-command-line/"><![CDATA[<p>在Mac OS裡，該如何使用command line的指令來將你想要的資料複製到剪貼簿呢？
那就是可以透過<strong>pbcopy</strong>及<strong>pbpaste</strong>指令，也下為一些例子。</p>

<h1 id="複製">複製</h1>
<ul>
  <li>複製<code class="language-plaintext highlighter-rouge">123</code>
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">echo </span>123 | pbcopy
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>將<code class="language-plaintext highlighter-rouge">words.txt</code>檔案中的文字，複製到剪貼簿
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">cat </span>words.txt | pbcopy
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <p>或是</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>pbcopy &lt; words.txt
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<h1 id="貼上">貼上</h1>
<ul>
  <li>輸出至stdout
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>pbpaste
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>輸出到檔案裡
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>pbpaste <span class="o">&gt;</span> some.txt
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<p>雖然也可以用滑鼠把想複製的字選起來再按command + C，但有時候就是不想碰到滑鼠！我想這就是工程師的浪漫吧😎</p>]]></content><author><name>HoMuChen</name></author><category term="Web Development" /><category term="command line" /><summary type="html"><![CDATA[在Mac OS裡，該如何使用command line的指令來將你想要的資料複製到剪貼簿呢？ 那就是可以透過pbcopy及pbpaste指令，也下為一些例子。]]></summary></entry><entry><title type="html">[讀書筆記] 做自己的生命設計師</title><link href="https://homuchen.com/posts/book-note-designing-your-life/" rel="alternate" type="text/html" title="[讀書筆記] 做自己的生命設計師" /><published>2022-03-23T22:30:00+08:00</published><updated>2022-03-25T11:14:00+08:00</updated><id>https://homuchen.com/posts/book-note-designing-your-life</id><content type="html" xml:base="https://homuchen.com/posts/book-note-designing-your-life/"><![CDATA[<p>我的生活該要怎麼度過呢？找不到喜歡感到熱情的事怎麼辦？對未來的職涯感到迷茫，
想要一份我喜歡的、我所熱愛的、最好是有意義，可以改變的世界的工作，該怎麼去進行呢？</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/self-improvement-books-4.jpg" alt="書: 做自己的生命設計師" /></p>

<p><strong>《做自己的生命設計師》</strong>這本書，就是來試著回答上述這些問題，
作者在史丹佛大學開設設計人生的課程，將設計思考的工具及心法，應用到你自己的人生當中，
讓我們開始學習如何做自己的生命設計師吧！</p>

<h1 id="設計思考是什麼">設計思考是什麼</h1>
<p>設計就是要來解決問題，首先先來看看問題有哪些種類吧！</p>

<h2 id="重力問題">重力問題</h2>
<p>我最近碰上了一個問題，每每我在騎腳踏車爬坡的時候，那個重力！對就是那個重力！
都會死死地把我往下拉，害我要花好大力氣才能登頂，該怎麼辦呢～</p>

<p>聽到這樣的問題，大家可能會覺得這人腦子有洞，怎麼會拘泥於這種問題呢？但事實上，
這種情況在現實生活中，卻可能是可見的，我們可以看看以下幾個例子：</p>

<ul>
  <li>在我的文化中，以詩人作為職業賺不了錢，我該怎麼辦呢？</li>
  <li>我想回學校讀書當醫生，但那要再花我5-7年的時間，等到可以開始當醫生時，我都40歲了，怎麼辦？</li>
</ul>

<p>以上稱為重力問題，因為是無法行動的問題，無法行動的問題就不是問題，
是一個context、一個場景，一個人生的現實面，我們無法或者是非常難去改變它，
必須接受它！並且別在這種問題上耗費太多的時間，大家可以思考一下，
自己有沒有被某種程度的重力問題所困住了呢？</p>

<h2 id="工程問題-vs-設計問題">工程問題 vs. 設計問題</h2>
<p><strong>工程問題</strong>是一個封閉的問題，有明確的目標，比如說如何使一座橋樑可以承重1000輛車子，
如何讓筆電螢幕轉軸可以轉10000萬不會壞。</p>

<p>而<strong>設計問題</strong>更加開放，事先對於解法別沒有任何的想像跟預設，例如如何使Mac筆電不用搭配滑鼠使用，
如何設計一台車，超級美，大家看了會想擁有</p>

<p>遊戲也有這樣類似的分類概念，封閉遊戲及開放遊戲，封閉的遊戲像是圍棋、籃球比賽、各種競技運動等等，
都是在一定的規則下，追求一個明確的目標；而開放遊戲像是Minecraft、伴家家酒等等，想怎麼玩就怎麼玩，
沒有一定對錯輸贏。</p>

<p>人生這個遊戲，就是一個開放式的遊戲，並沒有一個明確的目標，所以各種人生的結果都沒有對錯，也沒有好壞，
只怕你沒有去活出來！設計思考所針對的問題，就是這種開放問題。</p>

<h2 id="設計思考的心態">設計思考的心態</h2>
<ul>
  <li>
    <p><strong>好奇心:</strong> 像個寶寶一樣，帶著好齊心看世界，生活變成一種探索，充滿了各種可能性。</p>
  </li>
  <li>
    <p><strong>行動導向:</strong> 如果想知道自己想做什麼，坐在椅子上想破頭也沒用，去做就對了！多方嘗試，
打造原型，試著找出可以解決問題的方案。</p>
  </li>
  <li>
    <p><strong>重擬問題:</strong> 確認自己在解決的問題，是真的該解決的問題</p>
  </li>
  <li>
    <p><strong>一切都是過程:</strong> 別執著於目標，專注過程，隨機應變，可以放掉一開始的點子，
也可以放掉還不錯的點子，別害怕失敗，有時搞砸了，反而會發明出意想不到的驚人設計。</p>
  </li>
  <li>
    <p><strong>通力合作:</strong> 幾乎所以偉大的創作及產品，都是集眾人之力打造出來的</p>
  </li>
</ul>

<h1 id="設計人生的步驟">設計人生的步驟</h1>
<p>知道了我們該專注的問題種類、人生的本質，以及設計思考該擁有的心態之後，
接下來來看看具體一點的步驟可以怎麼做吧！</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/book-note-design-life-2.jpg" alt="設計人生的四個步驟" /></p>

<h1 id="衡量現況">衡量現況</h1>
<p>在我們朝向任何目標方現前進之前，首先我們得要知道自己在哪？
作者將人生分成四個面向，分別是<strong>健康</strong>、<strong>工作</strong>、<strong>娛樂</strong>、<strong>愛</strong>，
我們可以用幾句話描述這幾個領域的狀態並評分，為每個方面評分，
0-10分的話會給幾分，一張圖即能看出哪些方面OK，哪些不OK。</p>

<p>以下是作者自己在工作的方面的描述:</p>

<p>我在史丹佛大學任教，另外還從事私人顧問工作。我主持做自己的生命設計師工作坊，
並擔任社會則任新創公司VOZ的董事，我覺得工作方面的分數為9分!</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/book-note-design-life-3.jpg" alt="健康/工作/娛樂/愛的儀表板" /></p>

<p>一張圖可以提供判斷，只有自己知道，目前哪些地方OK與不OK，
在做完後面的練習、打造原型跟實驗的過程，會不斷地回頭評估衡量，
問自己幾個問題: 自己滿意目前四個領域的指標嗎？哪些地方需要採取行動？
找到了棘手問題嗎？它是不是重力問題？，總結來說，這個練習的目的就是要回答一個問題:</p>

<p><strong>最近過得如何？</strong></p>

<h1 id="確定方向">確定方向</h1>
<p>在茫茫人生的旅途中，知道了自己在哪裡之後，接下來就是要知道前進的方向了。
你有辦法回答: 最近有什麼目標？我在做什麼？一切有什麼目的？意義是什麼？
這類的問題嗎？</p>

<p>如果不行的話，那該要怎麼做，才能讓自己的人生方向稍微清楚一些呢？</p>

<h2 id="工作觀">工作觀</h2>
<p>首先要回答你的工作觀是什麼？不是你想做什麼樣的工作，而是你<strong>為什麼</strong>要工作？
如果不知道怎麼下手，可以從以下幾個問題切入：</p>
<ul>
  <li>什麼是好工作?</li>
  <li>工作跟個人、他人、社會有什麼關聯？</li>
  <li>工作跟金錢的關係是什麼？</li>
  <li>經歷、成長跟成就感跟工作的關聯呢？</li>
</ul>

<p>就算答案只是為了討生活、賺錢，這樣也沒有錯，在遠古時代，我們的祖先務農種田、打獵採集，
就也只是為了填飽肚子，可以生存下去而已。只不過在現在的時代裡，工作越來越多樣多元，
也佔據了我們人生中大部分的時間，如果他是一件你覺得好玩的事，或者是有意義的事！
那不是更棒嗎～</p>

<h2 id="人生觀">人生觀</h2>
<p>人生觀就是問: 人生的意義跟目的是什麼？真是個大哉問，
或許我們可以把問題簡化為哪些價值觀對你來說重要的，
體驗、成長、滿足、名利、個人成就、與家人、社區、世界的關係等等等…</p>

<p>大家可以google: list of values，就能看到洋洋灑灑的一堆，Loyalty、Spirituality、
Humility、Compassion、Honesty、Kindness、Integrity、Selflessness…</p>

<p>從中挑選一些你覺得重要的，作為你的人生信條，而這些價值觀也不是固定不變的，
或許在你經歷你的人生過程中，每個階段所重視的會不一樣，也隨著經驗越多，
會越來越清楚自己真正想要追求的是什麼？</p>

<h2 id="所做所為跟人生觀有無一致">所做所為跟人生觀有無一致</h2>
<p>常常工作觀、人生觀與所作所為的不一致，就是造成我們不快樂的原因，
比如說你是位非常重視環保、永續環境發展的人，結果你卻在一家塑化企業上班！</p>

<p>清楚了工作觀及人生觀之後，算是稍微比較知道人生該往哪個方向前進了，
不過也就是大概的方向而已，具體的路有千千百百條，該走哪條路呢？讓我們繼續探索下去吧！</p>

<h1 id="發想點子">發想點子</h1>
<p>該如何想出一些生活上或工作上可以嘗試的點子呢～</p>

<h2 id="從現在及過去生活中找">從現在及過去生活中找</h2>
<ul>
  <li><strong>記錄生活</strong>: 留心觀察生活中的每個事件
從中找出進入<strong>心流</strong>的時候，心流是什麼呢？就是一種全心投入的狀態，
注意不到周遭的事，以及會忘記時間的流逝<a href="#1">[1]</a></li>
  <li>觀察<strong>過去的經驗</strong>: 如果現在的生活真的沒什麼是你喜歡的，那可以回想過去的經驗中，
哪段時光是你覺得最棒的</li>
</ul>

<h2 id="卡住了怎麼辦">卡住了怎麼辦</h2>
<p>有可能你覺得你的人生就很無趣，無法現在或過去找出可能喜歡的事，
那就來瘋狂亂想吧～首先不要批判自己想到的任何點子，扼殺創意，先得出大量的點子再說！</p>

<blockquote>
  <p>必須先想出可能會喜歡什麼，才能知道真正會喜歡什麼</p>
</blockquote>

<h2 id="心智圖發想">心智圖發想</h2>
<p>利用心智圖，以一個詞彙為中心，想出三四個與之有關的詞彙，再對每個新詞彙重複進行一樣的動作，
得到三四層的字詞聯想，給自己一個時間限制快速做完，避免大腦的審查機制，以下是G先生做的練習:</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/book-note-design-life-4.jpg" alt="心智圖" /></p>

<p>最後，從最外層的字詞中挑選幾個組合起來，組成兩個可能的點子，從下面心智圖中，
或許G先生可以兼職帶領探索營隊，服務喜愛戶外活動的孩子？那不如在海灘上辦個<strong>海盜營隊</strong>。
或是調職到有海灘的分店！</p>

<h1 id="打造原型">打造原型</h1>
<p>有了方向跟計畫之後，接下來就是要要去實行了，那該怎麼去做呢？並不是一頭熱，
拋頭顱灑熱血，一股作氣地All-in下去，如果這樣做的話，會有什麼缺點呢?</p>

<p>比如說你想開咖啡廳，就直接租下店面、裝潢、買下設備、雇人、宣傳然後開始營業，
這樣可能會非常危險。能不能盈利生存下次是一回事，說不定做了幾個月之後你會發現，
其實你喜歡的是好喝的咖啡本身，或者是美美的咖啡廳裝潢，
但對於經營一間咖啡廳所要做的其他瑣事都感到非常厭煩，或許專心於製作咖啡當個咖啡師更適合，
或者是根本是想當室內設計師🤔</p>

<h2 id="原型prototyping">原型(prototyping)</h2>
<p>那該怎麼做呢？就是要打造原型，原型是什麼呢？原型是一個小型的、實驗性質的產品，
用來驗證想法或釐清需求，而在人生的道路上，原型就可以驗證自己的點子可不可行，
釐清到底是不是自己想要的需求，fail fast and fail forward。</p>

<h2 id="有哪些方法">有哪些方法？</h2>
<p>產品的原型，就是用小小的成本來打造，而人生想法的原型該要怎麼去進行呢？有以下幾種方法可以參考:</p>
<ul>
  <li>
    <p><strong>原型訪談</strong>:
在真正要做一件事之後，可以先跟已經在做那件的事的人聊聊，通過其他人的經驗及視角，
或許會得到一些新的想法，並且更加清楚現實的情況是不是跟自己幻想的一樣，
免得是自己腦補太多😂</p>
  </li>
  <li>
    <p><strong>原型體驗</strong>:
除了對話，再來就是身體力行，或許可以請朋友帶你體驗她上班一天的生活，
或著是無償提供自己的勞力一週，參與某些專案，或者是去實習三個月。</p>

    <p>在一開始開咖啡廳的例子中，可能可以先去咖啡廳打工看看，做做看各個面向的工作，
來確認自己是否真的喜歡那件事情。</p>
  </li>
  <li>
    <p><strong>腦力激盪</strong>:
有時有了長期計畫，卻想不出點子方法或原型來試試，可以腦力激盪來想想。找一群人3-6個，
如果可以是一起做奧德賽計畫的夥伴更好</p>
  </li>
</ul>

<h1 id="結論">結論</h1>
<p>好的人生不是用想的想出來的，也不是找出來的，並不會有個工作或是人生在那邊等著你去找到他，
找到之後，就像童話故事書裡的王子公主，在一起之後就從此幸福美滿。</p>

<p>也不用執著於《靈魂急轉彎》裡的Spark，覺得人生一定有那個一個使命，最適合你的事物在那等著你，
你一定要先知道那是什麼，才有辦法過人生。</p>

<p>人生有無限種可能，沒有任何一種好過另外一種，首先知道自己的工作觀及人生觀，決定了方向，
接著發想出各種可能、做出計畫，最後也是最重要的一步，就是真正地去做他！
在做的過程中，邊做邊修正，更加地了解自己。期許大家都能活出豐盛的人生～～🎉</p>

<h1 id="參考資料">參考資料</h1>
<ol>
  <li><a href="https://www.books.com.tw/products/0010816703" target="_blank" name="1">《心流: 高手都在研究的最優體驗心理學》</a></li>
</ol>]]></content><author><name>HoMuChen</name></author><category term="讀書筆記" /><category term="books" /><category term="life style" /><summary type="html"><![CDATA[我的生活該要怎麼度過呢？找不到喜歡感到熱情的事怎麼辦？對未來的職涯感到迷茫， 想要一份我喜歡的、我所熱愛的、最好是有意義，可以改變的世界的工作，該怎麼去進行呢？]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://storage.googleapis.com/homuchen.com/images/book-note-design-life-2.jpg" /><media:content medium="image" url="https://storage.googleapis.com/homuchen.com/images/book-note-design-life-2.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">成功是什麼? 5本關於自我成長的推薦書單</title><link href="https://homuchen.com/posts/self-improvement-books/" rel="alternate" type="text/html" title="成功是什麼? 5本關於自我成長的推薦書單" /><published>2022-03-22T22:30:00+08:00</published><updated>2022-03-22T22:30:00+08:00</updated><id>https://homuchen.com/posts/self-improvement-books</id><content type="html" xml:base="https://homuchen.com/posts/self-improvement-books/"><![CDATA[<p>人生該怎麼過? 成功是什麼? 我覺得就是從你現在的位置出發，到達你想要的生活，這樣就成功了。所以怎樣才算是成功，
對每個人而言都不一樣，因為每個人的目標不同，重視的核心價值觀也不同。</p>

<h1 id="邁向成功的公式">邁向成功的公式</h1>
<p>找到你目標，然後走到底，這樣就成功了，那要怎麼走到底呢?</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/self-improvement-books-0.jpg" alt="邁向成功的公式及書單" /></p>

<p>有了目標以後，每天你做出選擇，相對應地有一些行為，
但是最好將其變為習慣，否則將難以持之以恆，因為我們的意志力是有限的。
然後為了取得進步，不能每次都做一樣的事，必須踏出舒適圈才會有所改變，
並且知道有些成果是需要些時間才能顯現。</p>

<p>而在這過程中間有許多的曲折及困難，比如說做了幾天就半途而廢，找一堆理由藉口，
或是做了一陣子卻看不到成果就放棄了，也可能是一開始有進步，
但到了某個階段卻停滯不前了，不知道該如何更進一步，
不然就是你覺得好累，沒有力氣能量繼續，又或者是你根本不知道你的目標是什麼? 
該往哪裡前進? 也沒有動力前進。</p>

<p>在上述每個環節中卡關的，在這裡推薦相對應的書</p>
<ul>
  <li>
    <p>不想半途而廢: <a href="#原子習慣"><strong>原子習慣</strong></a></p>
  </li>
  <li>
    <p>著急看到成果: <a href="#複利效應"><strong>複利效應</strong></a></p>
  </li>
  <li>
    <p>停滯不前: <a href="#刻意練習"><strong>刻意練習</strong></a></p>
  </li>
  <li>
    <p>沒有力氣、覺得無趣: <a href="#一週工作四小時"><strong>一週工作四小時</strong></a></p>
  </li>
  <li>
    <p>找不到人生目標: <a href="#做自己的生命設計師"><strong>做自己的生命設計師</strong></a></p>
  </li>
</ul>

<h1 id="原子習慣"><a href="https://www.books.com.tw/products/0010822522" target="_blank"><strong>《原子習慣》</strong></a></h1>
<p>選擇很重要，但其實人生並沒有那麼多重大的選擇時刻，影響你這個人最多的，是組成你每天生活的習慣。</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/self-improvement-books-1.jpg" alt="書: 原子習慣" /></p>

<p>習慣佔據你人生的八、九成，試想一下每天醒來，躺在床上滑一下手機，
走去浴室刷牙洗臉，要不要吃早餐，早餐要吃什麼，通勤去上班的路上在做什麼，
工作時如何面對同事，面對事情是如何處理，下班了之後要做什麼，要去運動嗎?
還是回家躺在沙發上耍廢，該準時就寢嗎？還是東摸摸西摸摸又到了半夜了，
跟人聊天會抱怨最近發生的負面的事嗎？</p>

<p>上述說的這些事，你都不需要在當下耗費心思去做選擇，而是不假思索地反應出來，
但他們就是你現在會成為怎樣的人的根本原因，所以我們要致力於培養好的習慣、去除壞的習慣。</p>

<p>你可能也想這麼做，但就是時常失敗，這本書將系統化地分析習慣的基本原理及組成，簡單的說就是:</p>

<blockquote>
  <p><strong>提示 -&gt; 渴望 -&gt; 回應 -&gt; 獎賞</strong></p>
</blockquote>

<p>並且從各個面向提出可行動的方案及建議，幫助你過關斬將，培養新的習慣。</p>

<p>延伸閱讀:</p>
<ul>
  <li><a href="/posts/book-note-atomic-habits/" target="_blank"><strong>[讀書筆記] 原子習慣: 細微改變帶來巨大成就的實證法則</strong></a></li>
</ul>

<h2 id="你可以期待獲得什麼">你可以期待獲得什麼?</h2>
<ul>
  <li>了解習慣對人生的重要</li>
  <li>系統化地分析習慣是如何形成的</li>
  <li>該要如何養成好習慣</li>
  <li>該要如何去除壞習慣</li>
</ul>

<h1 id="複利效應"><a href="https://www.books.com.tw/products/0010814286" target="_blank"><strong>《複利效應》</strong></a></h1>
<p>每天微小的改變並不亦察覺，經過時間的累積卻會產生巨大的影響。</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/self-improvement-books-2.jpg" alt="書: 複利效應" /></p>

<p>或許大家都聽過複利效應，應該通常是在財務儲蓄領域上，但這概念可以應用在生活的各個面向上，
我們每天做的事，影響可能很小，多吃一片洋芋片、多抽一根菸、晚上熬夜少睡一個小時，造成的影響幾乎無法察覺，
但經過時間的累積，改變就會很巨大，這跟上面的原子習慣是相呼應的。</p>

<h2 id="你可以期待獲得什麼-1">你可以期待獲得什麼?</h2>
<ul>
  <li>了解複利效應是什麼? 並且適用於人生各個方面</li>
  <li>認清世上沒有魔法，唯有努力才有回報</li>
  <li>努力的方向要對，如何加速看到成果</li>
</ul>

<h1 id="刻意練習"><a href="https://www.books.com.tw/products/0010752714" target="_blank"><strong>《刻意練習》</strong></a></h1>
<blockquote>
  <p>透過刻意練習，善用大腦和身體的適應力，每個人都能改善技能，甚至創造出你本來以為自己沒有的能力，達到顛峰表現。</p>
</blockquote>

<p><img src="https://storage.googleapis.com/homuchen.com/images/self-improvement-books-3.jpg" alt="書: 刻意練習" /></p>

<p>如何在某個領域邁向頂尖、擁有高手級的表現，只要一直一直不斷地做、不斷地練習就好了嗎？</p>

<p>其實光是這樣是不夠的，比如說你已經會開車，然後你每天開了好幾個小時的車，但你卻不會因此變成舒馬赫，
辛苦的媽媽每天煮三餐，但卻不會因此成為超級大廚。那該要如何<strong>刻意練習</strong>來持續取得進步呢？</p>

<p>這邊簡單地說就是針對你想進步的目標，進行<strong>突破目前極限</strong>的練習，目標必須<strong>明確</strong>，
而且可以<strong>量測</strong>或獲得<strong>回饋</strong>，知道自己確實有在進步並進行修正。</p>

<h2 id="你可以期待獲得什麼-2">你可以期待獲得什麼?</h2>
<ul>
  <li>知道大腦是具可塑性的，如何學習及改變</li>
  <li>持續取得進步的要素的什麼？ 並不是一萬個小時就好</li>
</ul>

<h1 id="一週工作四小時"><a href="https://www.books.com.tw/products/0010621037" target="_blank"><strong>《一週工作四小時》</strong></a></h1>
<p>誰說一週要工作四十小時，朝九晚五地待在辦公室，打破社會框架，有錢有閒地實現自己的夢想</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/four-hour-work-week-0.jpg" alt="書: 一週工作四小時" /></p>

<p>人們總說等我賺夠了錢我就要怎樣怎樣，等我退休了我就要去做什麼，那何不現在就開始呢？！</p>

<p>追求夢想、做自己的興趣及想做的事，不用等到退休，作者提出<strong>迷你退休</strong>的概念，
將大把退休時光平均分散在一生當中，不要盲目地工作、追逐金錢，只將目標放在提早退休上，
而是開始漸漸地擺脫不想做的工作，擁抱自由及機動性，開始重拾各種興趣、嘗試你的夢想，
否則等到退休那天，你可能也會茫茫然不知道要幹嘛，因為一直以來，從沒有停下來好好思考過。</p>

<p>延伸閱讀:</p>
<ul>
  <li><a href="/posts/book-note-the-four-hour-work-week/" target="_blank"><strong>[讀書筆記] 一週工作4小時: 擺脫朝九晚五的窮忙生活，晉身「新富族」！</strong></a></li>
  <li><a href="/posts/book-note-the-power-of-full-engagement/" target="_blank"><strong>[讀書筆記] 用對能量，你就不會累</strong></a></li>
</ul>

<h2 id="你可以期待獲得什麼-3">你可以期待獲得什麼?</h2>
<ul>
  <li>認識新富族: 不再朝九晚五待在辦公室工作，擁抱自由及機動性的族群</li>
  <li>除去大部分非必要且會花費你時間的事，擁抱更多的自由</li>
  <li>打造自動進帳的事業</li>
  <li>看看作者的有趣的經歷及如何達成上述目標</li>
</ul>

<h1 id="做自己的生命設計師"><a href="https://www.books.com.tw/products/0010733134" target="_blank"><strong>《做自己的生命設計師》</strong></a></h1>
<p>透過打造原型、進行實驗，發想繼而嘗試人生各種可能，才能找到熱情</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/self-improvement-books-4.jpg" alt="書: 做自己的生命設計師" /></p>

<p>不知道自己的人生要做什麼嗎？第一步就是要去想，隨意的發想，如果你連想都沒想過的話一件事，
你不可能會在你的人生中去做那件事，甚至去喜歡他，所以第一步就是發揮想像力，無所限制地記錄下所以可能會喜歡的想法。</p>

<p>接著要針對那些想法，打造原型去實驗，什麼是原型呢？在產品設計的領域裡，
就是用來驗證設計的產品是否適切，有無欠考量或未發現的盲點，必要時在正式生產前加以更正。</p>

<p>而在人生領域中，就是去稍微體驗你想做的事，而不用100%一下子就All in，比如說你喜歡喝咖啡，想開間咖啡廳，
那你不應該是馬上辭職，準備個幾百萬就開始要開店，而是可以先透過蒐集資訊、訪談好幾位咖啡店店長、去打工、
或是做一下咖啡廳裡各個職位的工作，來測試自己有沒有盲點，到底是不是真的喜歡這件事。</p>

<h2 id="你可以期待獲得什麼-4">你可以期待獲得什麼?</h2>
<ul>
  <li>人生迷惘怎麼辦</li>
  <li>該如何去發想，找出可能會喜歡的事</li>
  <li>該如何打造原型，去測試自己的新的人生</li>
</ul>

<p>延伸閱讀:</p>
<ul>
  <li><a href="/posts/book-note-designing-your-life/" target="_blank"><strong>[讀書筆記] 做自己的生命設計師</strong></a></li>
</ul>

<h1 id="summary">Summary</h1>
<p>感謝你看到這邊～ 希望這些內容能帶給你一點啟發，我也是閱讀這些書過後，學習到了許多及產生很多新的想法，
但更重要的是將其實踐在生活當中，首先先透過書寫分享，讓自己複習一遍，
之後有更多親身實驗的結果，會在跟大家分享! 掰掰～👋</p>]]></content><author><name>HoMuChen</name></author><category term="讀書筆記" /><category term="books" /><category term="self improvement" /><summary type="html"><![CDATA[人生感到迷惘嗎？找不到目標，或是無法堅持培養好習慣嗎？該如何在各方面取得實際進步? 這篇文章將推薦五本自我成長的書單，期望能幫助大家過上想過的生活。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://storage.googleapis.com/homuchen.com/images/self-improvement-books-0.jpg" /><media:content medium="image" url="https://storage.googleapis.com/homuchen.com/images/self-improvement-books-0.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">[Golang] 4種發起HTTP請求的方式</title><link href="https://homuchen.com/posts/golang-how-to-make-http-requests/" rel="alternate" type="text/html" title="[Golang] 4種發起HTTP請求的方式" /><published>2022-03-18T11:00:00+08:00</published><updated>2022-03-18T11:00:00+08:00</updated><id>https://homuchen.com/posts/golang-how-to-make-http-requests</id><content type="html" xml:base="https://homuchen.com/posts/golang-how-to-make-http-requests/"><![CDATA[<p>這篇文章將介紹如何使用golang作為http client，來發起http request，將介紹以下4種做法:</p>
<ul>
  <li>http.Get</li>
  <li>http.Post</li>
  <li>http.PostForm</li>
  <li>http.NewRequest</li>
</ul>

<p>一個HTTP Request message不外乎就是<strong>method</strong>、<strong>url</strong>、<strong>headers</strong>跟<strong>body</strong>，如果對於HTTP message還不熟悉的，
可以看我之前寫過的文章:</p>

<p><a href="/posts/http-introduction-telnet-nc-curl" target="_blank"><strong>HTTP 簡介，以及使用telnet、nc、curl等指令來探索</strong></a></p>

<h1 id="httpget">http.Get</h1>
<p><code class="language-plaintext highlighter-rouge">func Get(url string) (resp *Response, err error)</code></p>

<p>參數為一個url，沒有headers，也沒有body，就是這麼簡單，如果想要客制化自己的header，就必須使用後面的<code class="language-plaintext highlighter-rouge">http.NewRequest</code>。</p>

<h1 id="httppost">http.Post</h1>
<p><code class="language-plaintext highlighter-rouge">func Post(url, contentType string, body io.Reader) (resp *Response, err error)</code></p>

<p>參數為url, contentType及body，headers的部分，除了Content-Type之外的，也無法自己自訂，而body是一個io.Reader，
以下是一個<code class="language-plaintext highlighter-rouge">Content-Type</code>為<code class="language-plaintext highlighter-rouge">appplication/json</code>的例子:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="n">jsonString</span> <span class="o">:=</span> <span class="s">`{"email": "test@homuchen.com", "name": "homuchen"}`</span>
<span class="n">http</span><span class="o">.</span><span class="n">Post</span><span class="p">(</span><span class="s">"http://localhost:5000/api/users"</span><span class="p">,</span> <span class="s">"application/json"</span><span class="p">,</span> <span class="n">bytes</span><span class="o">.</span><span class="n">NewReader</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="n">jsonString</span><span class="p">)))</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>伺服器端將會收到以下的HTTP message:</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre>POST /api/users HTTP/1.1
Host: localhost:5000
User-Agent: Go-http-client/1.1
Content-Length: 27
Content-Type: application/json
Accept-Encoding: gzip

{"email": "test@gmail.com"}
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="httppostform">http.PostForm</h1>
<p><code class="language-plaintext highlighter-rouge">func PostForm(url string, data url.Values) (resp *Response, err error)</code></p>

<p>Header <code class="language-plaintext highlighter-rouge">Content-Type</code>會被自動設為<code class="language-plaintext highlighter-rouge">application/x-www-form-urlencoded</code>，body是使用<code class="language-plaintext highlighter-rouge">url.Values</code>來傳遞，
以下為一個範例:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="c">//直接使用字串</span>
<span class="n">qs</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">url</span><span class="o">.</span><span class="n">ParseQuery</span><span class="p">(</span><span class="s">"email=test@homuchen.com&amp;name=homuchen"</span><span class="p">)</span>
<span class="n">http</span><span class="o">.</span><span class="n">PostForm</span><span class="p">(</span><span class="s">"http://localhost:5000/api/users"</span><span class="p">,</span> <span class="n">qs</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="c">//使用map</span>
<span class="n">v</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][]</span><span class="kt">string</span><span class="p">)</span>
<span class="n">v</span><span class="p">[</span><span class="s">"email"</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"test@homuchen.com"</span><span class="p">}</span>
<span class="n">v</span><span class="p">[</span><span class="s">"name"</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"homuchen"</span><span class="p">}</span>

<span class="n">qs</span> <span class="o">:=</span> <span class="n">url</span><span class="o">.</span><span class="n">Values</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
<span class="n">http</span><span class="o">.</span><span class="n">PostForm</span><span class="p">(</span><span class="s">"http://localhost:5000/api/users"</span><span class="p">,</span> <span class="n">qs</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>以上兩個Reqeust，都會產上下列一樣的HTTP message:</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre>POST /api/users HTTP/1.1
Host: localhost:5000
User-Agent: Go-http-client/1.1
Content-Length: 39
Content-Type: application/x-www-form-urlencoded
Accept-Encoding: gzip

email=test%40homuchen.com&amp;name=homuchen
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="httpnewrequest">http.NewRequest</h1>
<p><code class="language-plaintext highlighter-rouge">func NewRequest(method, url string, body io.Reader) (*Request, error)</code></p>

<p>如果想要客制自己的headers就必須使用<code class="language-plaintext highlighter-rouge">NewRequest</code>拉，方法如下:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="n">req</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">http</span><span class="o">.</span><span class="n">NewRequest</span><span class="p">(</span><span class="s">"GET"</span><span class="p">,</span> <span class="s">"http://localhost:5000"</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
<span class="n">req</span><span class="o">.</span><span class="n">Header</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="s">"Content-Type"</span><span class="p">,</span> <span class="s">"application/json"</span><span class="p">)</span>
<span class="n">req</span><span class="o">.</span><span class="n">Header</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="s">"Accept-Language"</span><span class="p">,</span> <span class="s">"en-us"</span><span class="p">)</span>
<span class="n">req</span><span class="o">.</span><span class="n">Header</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="s">"X-Some-Custom-Header"</span><span class="p">,</span> <span class="s">"foo bar"</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>最後要發起HTTP請求，則要使用<code class="language-plaintext highlighter-rouge">http.Client</code>的<code class="language-plaintext highlighter-rouge">Do</code>method，以下使用<code class="language-plaintext highlighter-rouge">http.DefaultClient</code>作為<code class="language-plaintext highlighter-rouge">http.Client</code>，
至於要如何使用自己的http.Client就不在此多說拉～</p>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="n">jsonString</span> <span class="o">:=</span> <span class="s">`{"email": "test@homuchen.com", "name": "homuchen"}`</span>
<span class="n">req</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">http</span><span class="o">.</span><span class="n">NewRequest</span><span class="p">(</span><span class="s">"GET"</span><span class="p">,</span> <span class="s">"http://localhost:5000/api/users"</span><span class="p">,</span> <span class="n">bytes</span><span class="o">.</span><span class="n">NewReader</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="n">jsonString</span><span class="p">)))</span>
<span class="n">req</span><span class="o">.</span><span class="n">Header</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="s">"Content-Type"</span><span class="p">,</span> <span class="s">"application/json"</span><span class="p">)</span>

<span class="n">res</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">http</span><span class="o">.</span><span class="n">DefaultClient</span><span class="o">.</span><span class="n">Do</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>如此一來就會發送出一個跟前面例子一樣的HTTP Request</p>

<h1 id="summary">Summary</h1>
<p>今天介紹了四種發起HTTP Request的方法，前面三種的彈性比較低但比較方便，有固定的method及content-type，無法隨意更改及加減。</p>

<p>而其實<code class="language-plaintext highlighter-rouge">http.Get</code>就是<code class="language-plaintext highlighter-rouge">http.Client</code>的<code class="language-plaintext highlighter-rouge">Get</code>method，<code class="language-plaintext highlighter-rouge">http.Post</code>為<code class="language-plaintext highlighter-rouge">http.Client</code>的<code class="language-plaintext highlighter-rouge">Post</code>method，
<code class="language-plaintext highlighter-rouge">http.PostForm</code>是<code class="language-plaintext highlighter-rouge">http.Client</code>的<code class="language-plaintext highlighter-rouge">PostForm</code>method。</p>

<p>最後如果想要加上自己更多的header，就要使用<code class="language-plaintext highlighter-rouge">http.NewRequest</code>，這邊簡單地記錄下使用golang作為http client最基礎的用法，
希望有幫助到任何人，掰掰～👋</p>]]></content><author><name>HoMuChen</name></author><category term="Web Development" /><category term="golang" /><category term="http" /><summary type="html"><![CDATA[這篇文章將介紹如何使用golang作為http client，來發起http request，將介紹以下4種做法: http.Get http.Post http.PostForm http.NewRequest]]></summary></entry><entry><title type="html">動機: 到底是什麼在驅動、引導我們的行為？</title><link href="https://homuchen.com/posts/motivation-what-motivates-us/" rel="alternate" type="text/html" title="動機: 到底是什麼在驅動、引導我們的行為？" /><published>2022-03-13T23:05:00+08:00</published><updated>2022-03-13T23:05:00+08:00</updated><id>https://homuchen.com/posts/motivation-what-motivates-us</id><content type="html" xml:base="https://homuchen.com/posts/motivation-what-motivates-us/"><![CDATA[<p>我們每天都有許多的行為，不論是認真學習新技能、努力工作、躺在沙發耍廢看劇吃著垃圾食物、
出門跟朋友去露營、做志工等等等…
背後都有一股力量在驅動著我們，那股力量就是<strong>獎賞</strong>及<strong>懲罰</strong>，
我們會為了追求某些獎賞或是避免某些懲罰而去做出某些行為。</p>

<p>但有些實驗卻發現，有時就算是沒有任何獎賞或是懲罰，我們也會想做某些事，甚至有時有了獎賞，
反而還會減少我們的動力！</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/motivation-00.jpg" alt="動機的分類" /></p>

<p>今天將從以下幾個面向，來分析驅動著我們行為的那股力量，看看獎賞懲罰系統有哪些組成，
除此之外還有哪些力量在驅動著我們，最後從腦神經科學的角度來看這一切：</p>
<ul>
  <li>獎賞及懲罰: 生理面</li>
  <li>獎賞及懲罰: 社會面</li>
  <li>獎賞之外的動機</li>
  <li>有獎賞反而表現更差</li>
  <li>什麼時候外部的動機是有用的？</li>
  <li>內部動機: 自主性、專精及意義</li>
</ul>

<h1 id="生理面的獎賞">生理面的獎賞</h1>
<p>首先是生理的、本能的、為了生存的，也是最顯而易見的一種動機。
我們餓了就會去找東西吃；口渴了就會去喝水；為了生存下去，食物、水、空氣、陽光、性等等等都是必須的。
我們的身體被打造成一但基本需求無法滿足，我們就會產生強烈的渴望去做這些事情。</p>

<p>但這就是全部的我們嗎？絕對不是！沒有人會說驅動我們所有行為的都是這類動機，這樣我們跟動物有什麼不一樣呢？</p>

<h1 id="社會面的獎賞及懲罰">社會面的獎賞及懲罰</h1>
<p>而獎賞及懲罰的另外一面是社會性的，我們努力讀書是為了考高分，或是得到父母的稱讚、
會為了獲得一份好工作而努力，因為期待有著更多的收入，這類動機不單純是為了生存的，我們不做這些也不會死，
可以軟爛地茶來張口、飯來伸手、不求上進地在原本職務上完成本分就好。</p>

<p>為什麼我們會想賺更多錢，除了提供更好的生活品質之外(生理的)，賺更多錢也可能代表者更有能力，
社會地位較高，大家對你的評價會是有能力的，可靠的，這些就是社會性的獎賞。</p>

<p>另外我們還會避免社會處罰，比如說不想被大家說閒話，所以我們表現的行為得符合社會期待、
合乎社會規範，因此必須抑制上述所說的第一種動機，不能因為我們餓了，我就去吃別人的食物；
不能因為我想做愛，就隨便在路上強暴別人。做這樣的行為在法律上、社會上是會有處罰的，
因為這種為了在社會裡生存的動機，規範了我們的行為。</p>

<h1 id="獎賞之外的動機">獎賞之外的動機</h1>
<p>在過去幾百年來，我們都是在這樣的想法下生活，但我們想要激勵自己或是別人去做某些行為時，
我們的做法通常都是威脅利誘，但這就是全部了嗎？</p>

<h2 id="猴子解謎遊戲">猴子解謎遊戲</h2>
<p>讓我們來看看幾個實驗，在很久很久以前，有個人在猴子做了身上做了個實驗，
把他們跟一個解謎遊戲放在一起，沒有任何訓練跟獎賞，
結果發現猴子就是會自己去玩、去解決那個問題(將下圖的裝置從左圖變成右圖)，
並且變得越來越熟練</p>

<p>這就引出了一個問題，即使沒有生存上的需要，也沒有外部的獎賞及處罰，
還是有一個驅力在驅動著猴子的行為，那這股力量這到底是什麼呢?</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/motivation-01.jpg" alt="給猴子的解謎遊戲" /></p>

<p>有時我們就是會在沒有外部獎勵的時候去做一些事情，純粹就是為了好玩、樂趣、好奇、挑戰、成就及滿足。</p>

<h1 id="有獎賞反而表現更差">有獎賞反而表現更差</h1>
<p>常常我們希望提供獎勵、誘因來鼓勵一些行為，但有時卻會識得其反！提供了獎勵之後，
反而讓人之後更不會去從事某些行為。</p>

<p>讓我們來看看以下這一個實驗:</p>

<p>首先實驗人員先去幼兒園觀察一群孩子，看看他們自由的下課時間都會做些什麼，結果發現有一群小孩都會畫畫，
他們就把那一群小孩挑出來，作為實驗對象。</p>

<p>實驗如此進行，將他們分為3組，第一組告訴他們畫畫的話，就給你們獎勵唷～～ 於是他們開始畫，畫完之後給獎勵；第二組則是放他們自己去玩，
結束後，如果有畫畫的就一樣給獎勵；第三組則是什麼事都沒干預。因為他們原本就就都愛畫畫，所以就都有畫，拿到相對應的獎勵後就放他們回去，
然後繼續觀察他們的行為。</p>

<p>結果發現！第一組的小孩畫的變少了！！而第二及第三組都沒有變，所以差別是什麼呢？
並不是有無獎勵與否，而是有沒有如果怎樣就給你什麼的這種獎勵，
當小孩為了得到獎勵才去畫畫時，這樣的外部獎勵反而削弱了原本純粹的動機…</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/motivation-02.jpg" alt="小孩畫畫獎勵實驗" /></p>

<h1 id="內部動機有哪些">內部動機有哪些</h1>
<p>所以除了外部的誘因獎賞之外，我們可能純粹為了好玩、樂趣、好奇、挑戰、
成就及滿足等等的內部的動機去做一些事情，這裡將簡單地把內部動機做一個分類，
分成三類，分別為: <strong>自主性</strong>、<strong>熟練</strong>及 <strong>意義</strong>。</p>

<h2 id="自主性autonomy">自主性(Autonomy)</h2>
<p>不知道大家有沒有這樣的經驗，自己本來會去做好的事，一旦媽媽碎念叫你去做那一件事，
你就反而肚爛不想做了😂</p>

<p>我們人就是不喜歡被操控被命令，相較於被命令的行動，我們對於基於我們自主意志而採取的行動更有動力去做，
當員工不在被監督，可以用自己的喜歡的方式，在自己喜歡的時間、地點工作時，會更具有生產力。</p>

<p>Google的20%時間，就是給員工20%的工作時間，讓他們自己自己決定要做怎樣的project，
結果是許多的產品及服務都是在這些時間裡誕生出來的，像是Adsense、Gmail、Google News等等…</p>

<h2 id="熟練matery">熟練(Matery)</h2>
<p>有時玩遊戲，贏了也不會得到什麼獎勵，但我們就是會想要破關，不斷地一直去練習他熟練他，
或許我們天生就是喜歡去精進一些能力。</p>

<p>有份論文，調查訪談了幾百位開源軟體的程式開發人員，到底是什麼因素，
使得他們願意無償地為這些專案付出時間及勞力，結果發現，在有薪及無薪的開發人員中，
他們為什麼投入開源專案開發的原因，有顯著差異的部分就是<strong>為了增進寫程式的技能</strong><a href="#1">[1]</a>。</p>

<h2 id="意義meaningpurpose">意義(Meaning、Purpose)</h2>
<p>意義對每個人來說都是不一樣的，找到一份比你自身更大的事物，歸屬於此並擁有使命感，能帶來很大的動力。</p>

<p>有人可能致力於地球環境保育、永續能源，有人可能關心下一代的教育、或者是老人家的照顧需求、
性別平權、勞工權益等等的議題，而加入各式各樣的機構，與目標理念一致的人一起努力奮鬥是很棒的一件事。</p>

<p>但大部分的人，可能不知道自己的使命，甚至是說人生的意義，這也沒關係！我自己也是還不知道這部分的答案，
或許我們還在探索的階段，現在能做的，可能就像是<a href="https://www.books.com.tw/products/0010733134"><strong>《做自己的生命設計師</strong>》</a>說的，
首先先幻想！接著挑幾個想法來打造原型實驗看看，唯有試過做過之後，才能對於自己想要的人生有更清楚的描繪及方向。</p>

<h1 id="總結">總結</h1>
<p>外部的獎賞及處罰，確實會驅動我們的行為，但我們並不全然是這樣的行動的，甚至有些時候，
還會反過來損害我們的動機，以上是來自<a href="https://www.books.com.tw/products/0010476180"><strong>《動機，單純的力量》</strong></a>一書的部分簡單摘要。</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/motivation-03.jpg" alt="動機，單純的力量" /></p>

<h1 id="參考資料">參考資料</h1>
<ol>
  <li><a href="https://ocw.mit.edu/courses/sloan-school-of-management/15-352-managing-innovation-emerging-trends-spring-2005/readings/lakhaniwolf.pdf" target="_blank" name="1">Why Hackers Do What They Do: Understanding Motivation and Effort in Free/Open Source Software Projects</a></li>
</ol>]]></content><author><name>HoMuChen</name></author><category term="讀書筆記" /><category term="self improvement" /><category term="psychology" /><category term="books" /><summary type="html"><![CDATA[有哪些力量驅動著我們每天的行為，做事情的動力到底來自何處，是獎賞或是處罰嗎？ 利誘小孩子來引導他們做我們希望他做的行為是對的嗎?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://storage.googleapis.com/homuchen.com/images/motivation-00.jpg" /><media:content medium="image" url="https://storage.googleapis.com/homuchen.com/images/motivation-00.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">[讀書筆記] 更快樂：哈佛最受歡迎的一堂課</title><link href="https://homuchen.com/posts/book-note-happier/" rel="alternate" type="text/html" title="[讀書筆記] 更快樂：哈佛最受歡迎的一堂課" /><published>2022-02-09T21:19:00+08:00</published><updated>2022-02-09T21:19:00+08:00</updated><id>https://homuchen.com/posts/book-note-happier</id><content type="html" xml:base="https://homuchen.com/posts/book-note-happier/"><![CDATA[<p>作者於2002年在哈佛大學開始講授 <strong>正向心理學</strong>，這門課主要探討的問題就是: <strong>如何幫助自己和別人活得更快樂？</strong></p>

<p>第一年只有8人選修，6人退選，第二年學生多達380人，第三度開課時，有855名學生註冊，成為哈佛選修人數最多的科目。</p>

<p>該如何解釋哈佛大學的學生對正向心理學的需求日益殷切的現象？大家對快樂學越來越感興趣？
是現代人越來越憂鬱嗎？(雖然事實上是如此<a href="#1">[1]</a>)還是新的教育方式或生活型態的影響？</p>

<p>其實『快樂學』並不是現代的產物，從柏拉圖、亞里斯多德、各種宗教及哲學體系、到現在許多市面上的自助書籍，
無不想探討快樂的問題，而正向心理學，泛指 <strong>『研究人類最佳心理運作狀態的學問』</strong>，作為學術象牙塔及社會大眾間的橋樑，
結合了嚴謹的學術研究及有趣的自助運動。</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/happier-01.jpg" alt="book: Happier" /></p>

<h1 id="你快樂嗎">你快樂嗎?</h1>
<p>當我告訴我朋友我正在看正向心理學的相關書籍時，他們就會問我: 你不快樂嗎？😂，好像擔心我會不會跑去自殺似的，
然而我快樂嗎？這個問題其實我也回答不出來，不知道該要如何去定義及量測快樂，也就無法回答出我到底快不快樂的這個問題。</p>

<p>那我們該要如何學習快樂呢？如果無法得知我們到底快不快樂，怎們知道我們的學習有沒有成果呢？</p>

<p>作者對這問題的回答是這樣的: 與其問「你快樂嗎?」這樣的是非題，不如問該「怎麼做可以變得<strong>更</strong>快樂？」，</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/happier-03.jpg" alt="ask the right question: How to become happier?" /></p>

<p>你快樂嗎？是個是非題，答案要不是快樂就是不快樂，這意味著快樂只是某段旅程的終點，
一旦抵達了這個定點，旅程就結束了。</p>

<p>然後這個定點並不存在，我們永遠都可以活的更快樂，沒人可以時時刻刻都幸福無比，所以與其問你快樂嗎？
不如問怎麼做才能活得更快樂？追求快樂是個持續進行的過程，今天的我比五年前的我快樂，但願五年後的我比今天的我快樂。</p>

<h1 id="未來還是現在">未來還是現在?</h1>
<p>我該做一份人人欣羨，薪水很高但我不喜歡的工作，還是應該做自己喜歡但薪水不高的工作呢？
是要先忍耐個幾年，有了穩定的經濟基礎後再去追求夢想，還是要毅然決然地踏上追夢的旅程？</p>

<p>著名的米歇爾棉花糖實驗<a href="#2">[2]</a>，顯示了能夠延遲享樂的小孩，未來的成就比較高，但這說明我們該延遲享樂嗎？
或者是應該要推遲到什麼時候呢？</p>

<h2 id="四種生活類型">四種生活類型</h2>
<p>作者在這裡提供了一個模型來描述四種生活類型:</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/happier-04.jpg" alt="四種關於現在與未來的生活類型" /></p>

<p>橫軸為現在，越右邊代表對現在越有好處，縱軸為未來，越上面代表你所做的選擇是對未來有好處的，反之亦然，
接下來我們就一個一個象限來看看吧，也可以想想自己是否在人生的某個時期，這樣地生活著。</p>

<h2 id="拼命三郎">拼命三郎</h2>
<p>坐落在左上角的區塊，這一種生活型態做的事都是為了未來的利益，而延遲了立即的享樂，我們把它稱為拼命三郎型。</p>

<p>好好讀書～等考到好大學就輕鬆囉；等上了大學，還要好好顧好成績，參加活動好好實習，才能進到好公司擁有好工作；
等工作之後，繼續埋頭苦幹，期待著升遷加薪，好好存錢，等到退休或是提早退休之後就爽了！</p>

<p>這種生活型態的人總是在追求著未來的目標，而不是當下的體驗，以為達到目標之後就會開心快樂。的確沒錯，
當我們考上好大學放榜的那一瞬間，被錄取升職加薪的那一刻的確很爽，但這樣的快樂卻只能持續一陣子，
緊接著我們又為著下一個目標繼續打拼。</p>

<p>社會獎勵結果，而不在乎過程，家長老師總說著要考高分，升學找到好工作，卻不太強調學習本身的樂趣；
大家都想要找一份薪水高，大家稱羨的工作，而不是去做自己喜愛的事，就如美國哲學家愛默生所說的:</p>

<blockquote>
  <p><strong>「我們一直想著未來要過什麼樣的生活，但是到頭來，卻像沒有真正活過一樣。」</strong></p>
</blockquote>

<h2 id="享樂主義">享樂主義</h2>
<p>跟拼命三郎相反，總是追求當下立即的享樂，而不顧未來長遠的利益。
不停地吃下垃圾食物，不想工作一直窩在被窩裡看劇都是這一類的生活類型，
以為幸福的人生就是一連串的享樂經驗，但真的是如此嗎?</p>

<p>有項心理實驗是以下這樣:</p>

<p>他們付費給一些大學生，對他們的要求是什麼都不能做。他們的基本需求得以滿足，
但是被禁止做任何工作。幾個小時之後，這些大學生就開始感到沮喪，儘管參與研究的收入非常可觀，
但他們寧可放棄參與實驗而選擇其他壓力大、收入沒那麼多的工作。</p>

<h2 id="虛無主義">虛無主義</h2>
<p>這一區塊最慘，放棄追尋快樂，覺得人生也沒有意義，賽利格曼的習得性無助(learned helplessness)<a href="#3">[3]</a>
描述了這一類覺得做什麼努力都徒勞無功的人。</p>

<p>一開始我覺得怎麼會有人是落在這個區塊，再怎樣，至少也可以當個及時行樂的人吧，但仔細想想，我也有過短暫時刻變成這類的人，
也就是在一直的享樂耍廢過後，連要做什麼來耍廢都不知道了！劇看到不知道要看什麼；遊戲打到很生氣，隊友都是雷包；
覺得日子空虛，不知道到底要幹什麼😂</p>

<h2 id="快樂開朗型">快樂開朗型</h2>
<p>所以到底該立即享樂，還是為了未來的利益忍耐打拼呢？</p>
<blockquote>
  <p><strong>PTT鄉民: 「小孩子才做選擇，我全都要！」</strong></p>
</blockquote>

<p>拼命三郎以為達到未來的目標就能快樂，而享樂主義以為只有享樂的過程才是重要的，
其實應該是要<strong>懂的享受追求目標的過程</strong>(後面會講到關於設定目標的重要)。</p>

<p>但有時總有些活動無法同時兼顧現在及未來的利益，像是為了考試K書、儲蓄、加班趕工，
這時可以穿插一下偶爾享樂的活動是有幫助的，能讓我們添加活力，冥想、休息、散步、發呆、
悠閒地躺在海邊、看劇、玩遊戲等等，如果無法找到能夠兼顧現在及未來利益的活動，
不妨就將兩種活動穿插進行。</p>

<p>延伸閱讀:</p>

<p><a href="/posts/book-note-the-power-of-full-engagement" target="_blank"><strong>[讀書筆記] 用對能量，你就不會累</strong></a></p>

<h1 id="快樂是什麼">快樂是什麼？</h1>
<p>每個人在人生的不同時期，或是不同的事情上，都或多或少會有上面四種的生活型態，
而作者認為的快樂就是<strong>要有樂趣，也要有意義</strong>，要兼顧現在以及未來，
也就是坐落在快樂開朗型的生活型態。</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/happier-05.jpg" alt="快樂是什麼: 有樂趣，也有意義" /></p>

<p><strong>樂趣</strong>是指我們目前感受的正面情緒，是現在的好處； <strong>意義</strong>則伴隨使命感而來，代表所作所為對將來的好處。</p>

<h2 id="何謂樂趣">何謂樂趣?</h2>
<p>正向情緒，也就是我們的感覺，愉悅、高興、極樂、狂喜、滿足、溫暖、舒服等等等…，追求正向情緒是我們的本能天性，
應該沒有人懷疑為什麼我們會想追求正向情緒吧？</p>

<h2 id="何謂意義">何謂意義?</h2>
<p>意義是你的歸屬感、使命感，這個東西帶給你超越他本身的價值。
每個人會從不同的事物裡尋找意義，可能是開創事業、環保愛地球、養兒育女、寫程式🤔等等，
重點是要符合自己的價值觀及特殊嗜好，而不是順從他人或是社會的期望。</p>

<p>只懂的尋找樂趣，無法得到快樂；一昧地尋求意義，也無法得到快樂。假如為某個行動找到了意義，
但這項行動卻無法提供立即的滿足，那也無法持之以恆。</p>

<h1 id="目標">目標</h1>
<h2 id="目標與快樂的關係">目標與快樂的關係</h2>
<p>目標的作用，可以讓你活在當下，不會擔憂未來，也不後悔過去，提供你一個指引，
知道現在走的每一步都是朝著正確的方向前進，如此一來可以更加地享受過程。</p>

<p>有了目標，但我們的心思卻不是應該要一直看著目標，如果一昧地看著目標會很辛苦，
我們的快樂在於享受過程，朝著目標一步一步前進的過程，而不是達到目標時的快樂。
當然在達成目標時一定會很快樂、狂喜，但這種感覺沒辦法持續，回想一下你考上大學，成功被好公司錄取的那天，
快樂的感覺持續了多久呢？幾天還是幾個月，不論如何，他應該沒有持續到現在吧！</p>

<p>因為人就是一個會習慣的動物，不管是快樂還是痛苦，有個研究是中樂透的人跟腳被截肢的人，在一段時間過後，
他們快樂的水平都回到了事發之前的水準，這樣的現象稱為<strong>享樂跑步機</strong>(Hedonic treadmill)也稱為<strong>享樂適應性</strong>。</p>

<h1 id="結論">結論</h1>
<p>該要如何才能變得更快樂？這是一個普世的問題，不論你是任何種族、來自任何國家、成長於何種文化、及環境、
處於何種階層，都會希望生活過得更幸福圓滿。</p>

<p>這本書有一句話我覺得是貫穿整本書的重點，就是: <strong>要有樂趣，也要有意義</strong>，無盡的享樂會感到空虛，久了也會不快樂，
而只有追尋意義、成就，容易成為拼命三郎那樣，只看著未來的目標，忘了去享受當下。</p>

<p>要找到個人的意義，需要有充分地對自己了解及認知，知道自己所重視的價值觀及長處，能夠活出言行一致、發揮長處的生活，
當你的生活充斥著各種與你價值觀相矛盾的事時，必定是不會快樂的。</p>

<p>這本書後面的章節，還有討論在教育、職場及感情上的應用，不過基本的原則就是上述的這些，有興趣的人可以再去看看唷～</p>

<h1 id="參考資料">參考資料</h1>
<ol>
  <li><a href="https://data.gov.tw/dataset/146577" target="_blank" name="1">台灣憂鬱用藥數據</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Stanford_marshmallow_experiment#Original_Stanford_experiment" target="_blank" name="2">米歇爾-棉花糖實驗</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Learned_helplessness" target="_blank" name="3">賽利格曼-習得性無助</a></li>
</ol>]]></content><author><name>HoMuChen</name></author><category term="讀書筆記" /><category term="books" /><category term="life style" /><category term="self improvement" /><category term="psychology" /><summary type="html"><![CDATA[作者於2002年在哈佛大學開始講授 正向心理學，這門課主要探討的問題就是: 如何幫助自己和別人活得更快樂？]]></summary></entry><entry><title type="html">《原子習慣》應用: 我是如何養成閱讀習慣</title><link href="https://homuchen.com/posts/how-i-keep-reading/" rel="alternate" type="text/html" title="《原子習慣》應用: 我是如何養成閱讀習慣" /><published>2021-12-09T21:03:00+08:00</published><updated>2021-12-09T21:03:00+08:00</updated><id>https://homuchen.com/posts/how-i-keep-reading</id><content type="html" xml:base="https://homuchen.com/posts/how-i-keep-reading/"><![CDATA[<p>出社會以前，完全沒有在看課外讀物的我，是如何養成現在每天都會閱讀的習慣，
雖然閱讀的時間不多，大約每天30-60分鐘，但跟以前的我相比，已經是巨大的進步了～</p>

<p>這篇文章將依據<a href="https://www.books.com.tw/products/0010822522" target="_blank"><strong>《原子習慣》</strong></a>所提出的框架，
<strong>提示 -&gt; 渴望 -&gt; 回應 -&gt; 獎賞</strong>，來分析我閱讀習慣的各個面向，算是原子習慣的應用案例～
如果沒看過這本書的也可以看看我之前寫的文章:</p>

<p><a href="/posts/book-note-atomic-habits/" target="_blank"><strong>[讀書筆記] 原子習慣: 細微改變帶來巨大成就的實證法則</strong></a></p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/reading-habit-0.jpg" alt="閱讀習慣" /></p>

<h1 id="提示">提示</h1>
<p>環境中的提示對你有淺移默化的影響，你無法輕易地待在一個滿是垃圾食物的環境，然後一直靠意志力不去吃零食，
另外也可以觀察目前的生活上，選擇一些已有的習慣作為提示，將想要培養的習斷堆疊在後面。</p>

<p>以下分享我如何利用<strong>環境</strong>及<strong>習慣堆疊</strong>來達成閱讀的習慣:</p>
<ul>
  <li><strong>環境</strong>: 因為我每天通勤都需要搭捷運，所以我就選擇了這個環境來讀書，因為在捷運上，
除了滑手機就沒有其他提示及誘惑使你分心。</li>
  <li><strong>習慣堆疊</strong>: 上捷運站好就位，接著下一步就是拿出書來看，最後讓這個動作不假思索。</li>
</ul>

<h1 id="渴望">渴望</h1>
<p>提示出現之後，你會產生渴望，比如說晚上下班回到家裡，會有想要明亮燈光的渴望;
一到了Friday night會有想要放鬆的渴望，那我上捷運會有想要看書的渴望嗎？ 沒有…</p>

<p>但是上捷運會有想要打發這幾十分鐘無聊時間的渴望，所以大部分人的回應都是滑手機，
那該怎麼辦呢？ 其實沒有渴望就是沒有，也沒關係，再從其他面向著手就好，或者是你自己可以做<strong>渴望綑綁</strong>，
也就是做完想要培養的習慣之後，可以做其他你本來就想要做的事，比如說看完15分鐘書後，才可以滑手機。</p>

<p>另外我有想到另一個渴望就是耍帥，捷運上不乏許多正妹，可以看看書，展現一下自己知性上進的一面XD
有個IG帳號<a href="https://www.instagram.com/hotdudesreading/" target="_blank">hotdudesreading</a>專門收集在車上看書的帥哥們，
大概也是一樣的概念😄</p>

<h1 id="回應">回應</h1>
<p>有了渴望之後，接著就是回應，也就是你如何採取行動去回應滿足你的渴望，要養成一個新習慣，
最好是讓它非常<strong>容易去執行</strong>。</p>

<p>我在捷運上看書的情形，就是每次只要看15分鐘！ 就是15分鐘! 不多不少，因為車到站了就要下車了。</p>

<p>比起一開始一頭熱，狂看1小時，結果持續不到幾週，持續每天都看15分鐘還要來得更好，
無需費力的進行了幾年之後，累積的成果也是很可觀，<strong>重複勝於時間，次數勝於質量</strong>。</p>

<h1 id="獎賞">獎賞</h1>
<p>做完一個習慣後，如果我們得到了獎賞便會增強這個習慣，而且越<strong>立即</strong>的獎賞越好。</p>

<p>我們可以看到許多壞習慣之所以那麼容易養成，就是因為獎賞來的立即，比如說抽煙、垃圾食物
在你吸了、吃了一口之後，尼古丁、高糖、高鹽的獎賞就馬上來了，
而會影響健康的後果可能在好幾年後才顯現。</p>

<p>如果沒有立即的獎賞怎麼辦? 那就自己創造! 我用的方法就是<strong>紀錄</strong>，紀錄本身也是一種獎賞，
因為每次的勝利在紀錄上可以記上一筆時，會帶來成就感，而且你也會不想讓一連串的紀錄中斷。</p>

<p>我使用的紀錄APP是種樹APP
<a href="https://apps.apple.com/tw/app/forest-%E5%B0%88%E6%B3%A8%E6%A3%AE%E6%9E%97/id866450515" target="_blank"><strong>Forest 專注森林</strong></a>，
有點像是蕃茄鐘工作法的概念，在種樹期間不能使用其他APP，而且還會幫你種真的樹唷。</p>

<h1 id="總結">總結</h1>
<p>今天簡單地分享我是如何應用上<a href="https://www.books.com.tw/products/0010822522" target="_blank"><strong>《原子習慣》</strong></a>所提出的框架，
來培養閱讀習慣，雖然每天讀的時間不多，但持之以恆才是更重要的。感謝您的閱讀，掰掰～👋</p>

<h1 id="延伸閱讀">延伸閱讀</h1>
<ul>
  <li><a href="/posts/book-note-atomic-habits/" target="_blank"><strong>[讀書筆記] 原子習慣: 細微改變帶來巨大成就的實證法則</strong></a></li>
  <li><a href="/posts/lazy-breakfast/" target="_blank"><strong>懶人早餐: 15分鐘，高纖高蛋白低碳水</strong></a></li>
</ul>]]></content><author><name>HoMuChen</name></author><category term="生活" /><category term="self improvement" /><category term="life style" /><category term="books" /><summary type="html"><![CDATA[都知道閱讀有許多的好處，但該要該如何培養呢? 這篇文章將分享我是如何從不看書，改變成現在每天都有閱讀的習慣， 利用原子習慣所提出的框架，應用到自己的生活之中。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://storage.googleapis.com/homuchen.com/images/reading-habit-0.jpg" /><media:content medium="image" url="https://storage.googleapis.com/homuchen.com/images/reading-habit-0.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">[System Design] 淺談Database Replication，有何優缺點、做法及何處可見?</title><link href="https://homuchen.com/posts/what-and-why-database-replication-advantage-and-disadvantage/" rel="alternate" type="text/html" title="[System Design] 淺談Database Replication，有何優缺點、做法及何處可見?" /><published>2021-11-28T17:00:00+08:00</published><updated>2021-11-28T17:00:00+08:00</updated><id>https://homuchen.com/posts/what-and-why-database-replication-advantage-and-disadvantage</id><content type="html" xml:base="https://homuchen.com/posts/what-and-why-database-replication-advantage-and-disadvantage/"><![CDATA[<h1 id="什麼是database-replication">什麼是database replication?</h1>
<p>顧名思義就是將一份資料，複製成多份，並把它放到不同的機器上，
好像也沒什麼好說的🤪，接著會看看為什麼要做複製，它會帶來什麼好處及壞處，
再看看要如何做到replication，最後看看在RDBMS、NoSQL或是你自己的系統，是怎麼應用這些概念的。</p>

<h1 id="為何要replication">為何要replication</h1>
<h2 id="資料備份">資料備份</h2>
<p>把一份資料變成多份放到不同的地方，最明顯的好處就是<strong>備份</strong>，當你的機器壞掉，如果硬碟沒壞，
其實重啟之後資料還是在那邊，但就怕你的機器整組壞光光，或是就是硬碟爆了無法再使用，
此時如果資料有複製道別台機器上，就不用怕會有資料的丟失。</p>

<h2 id="讀取效能">讀取效能</h2>
<p>資料都在同一台機器時，所有的讀取查詢都必須經由這台機器來完成，一台機器總有他的瓶頸，
一台不行，那你有試過兩台嗎？三台四台五台嗎～</p>

<p>對於讀取效能的增進，主要有兩個方向，分別是吞吐量(throughput)及延遲時間(latency)。</p>

<ul>
  <li>
    <p><strong>read throughput:</strong>
複製了N份，我就有N台機器可以供我查詢拉，平均分散所有的查詢請求到N台機器上，
預期最多就可以有N倍的throughput。</p>
  </li>
  <li>
    <p><strong>read latency:</strong>
另外也可以把一些機器放到離user近一點的地方，減少網路封包來回的時間，降低latency，</p>
  </li>
</ul>

<h1 id="replication帶來的缺點">Replication帶來的缺點</h1>
<h2 id="儲存空間">儲存空間</h2>
<p>想當然爾，複製了幾份的資料就需要多幾份的磁碟的空間，不過現在硬碟越來越便宜的時代，
應該不是個大問題。</p>

<h2 id="資料的不一致">資料的不一致</h2>
<p>不一致的主要來源就是兩種: <strong>replication</strong>和<strong>concurrent write</strong>，
試想一下資料如果只有單一來源，那要跟誰不一致呢？反之，因為有了replica，
每份複製要如何保持同步及一致就會是個問題? 會造成什麼consistency的問題，
後面會在陸續討論。</p>

<h1 id="how">How</h1>
<p>接下來，我們來看看要如何複製。假設你今天有一份檔案，不會再修改，
那就直接將檔案複製一份放到另一台機器上供使用者去讀取，那不就做完了嗎～</p>

<p>沒錯！就是這個簡單，所以問題是什麼呢？ 問題就在於我們會不斷地修改檔案，
資料庫會不斷地接收使用者的insert、update，這時要如何保持多處資料的同步一致呢?</p>

<h1 id="master-slave">Master Slave</h1>
<p>首先，我們先定義幾個名詞，master為可以接受資料寫入修改的節點，
而slave就是存放複製的檔案的地方，只負責被讀取，並不會從slave中寫入資料。</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/database-replication-1.jpg" alt="master slave repilcation" target="_blank" /></p>

<p>資料要從master被複製到slave，最簡單的可能就像是直接<code class="language-plaintext highlighter-rouge">cp</code>，<code class="language-plaintext highlighter-rouge">scp</code>，
或是你寫備份script，每天固定時間將DB裡的資料寫到另一台DB。</p>

<p>另外現在許多資料庫都有提供<strong>change data capture</strong>的功能: 每當一有資料寫入時，
就會通知你，這有點像是是在application level的trigger，
像是MangoDB的Change Streams或是AWS Dynamo的Streams。</p>

<p>而RDBMS也有類似的功能，像是postgreSQL的WAL、MySQL的Binlog，
如果是cluster的，內部可能也是利用上述的機制來做複製及備份。</p>

<h1 id="replication-lag">Replication lag</h1>
<p>資料要從發生寫入的地方，複製到另一個地方，這中間的時間差就是<strong>replication lag</strong>，
可能是每天將整個資料庫的檔案做一次備份到別台機器，那lag最長就是一天;
如果是在每筆資料寫入的時候，就立即透過網路寫入同一筆資料到另一備份中(透過剛剛說的change data capture)，
那lag可能就是幾毫秒。</p>

<h2 id="lag造成不一致">Lag造成不一致</h2>
<p>如上所述，資料寫入後、在replication lag這段時間內，多份的複製間並還沒有同步，
也就是說他們是不一樣的！不一樣就是不一致！就會有些問題。
這裡舉兩個例子inconsistency的例子，
就是會無法達成<strong>read your write consistency</strong>及<strong>monotonic read consistency</strong>，</p>

<ul>
  <li>
    <p><strong>read your write</strong>: 寫入一筆資料後在讀取，卻讀不到你剛剛些入的資料，而是取得舊的資料。
<img src="https://storage.googleapis.com/homuchen.com/images/database-replication-2.jpg" alt="not read your write consistency" target="_blank" />
如上圖，當你寫入一筆c=3的資料後，資料尚未從master複製到slave，但你馬上從slave讀取，就讀取不到。</p>
  </li>
  <li>
    <p><strong>monotonic read</strong>: 連續的讀取，讀到最新的資料後，接著又讀到舊的資料，經歷了時間上的倒退。
<img src="https://storage.googleapis.com/homuchen.com/images/database-replication-3.jpg" alt="not monotinic read consistency" target="_blank" />
如上圖，當你讀取c的值時，首先讀到3的值，接著再讀一次反而不見了。</p>
  </li>
</ul>

<p>因為你不知道你是從master還是slave中讀取資料，如果master剛剛接受的新的更新寫入還沒複製到slave，
則slave上的資料就是舊的，從slave讀取就會導致讀不到你剛剛寫入的資料。</p>

<h2 id="解決方法">解決方法</h2>
<ol>
  <li>只從master讀取: 但這好像就失去了複製到slave的好處了，read throughput沒有增加，只剩下備份的好處。</li>
  <li>當讀自己寫的資料時，從master讀取: 如此一來可以保證有read your write consistency，
但你要額外判斷query是不是要取得自己的資料。</li>
</ol>

<h1 id="為何要知道這些呢">為何要知道這些呢?</h1>
<h2 id="知道nosql的用法">知道NoSQL的用法</h2>
<p>比如說MongoDB的write有各種設定<a href="#1">[1]</a>，w option可以設為<code class="language-plaintext highlighter-rouge">0</code>、<code class="language-plaintext highlighter-rouge">1</code>或<code class="language-plaintext highlighter-rouge">majority</code>，
你知道他們的區別及取捨嗎?其核心的概念就是今天所討論的replication所造成的
consistency及durability的問題，之後有機會再單獨寫一篇講MongoDB的write concern(TODO)。</p>

<h2 id="自己的系統也會有replication">自己的系統也會有replication</h2>
<p>隨著系統越來越複雜，你可能也會使用到多個資料產品，比如說你有個主要的資料庫，
使用者流量越來越大已不堪負荷，可能需要做讀寫分離，
另外還有像是用elasticsearch等搜尋引擎，用redis作為cache，
這些都是一份資料可能同時需要存在許多地方，廣義上來說，也都是replicaton，
以下我們看看cache及讀寫分離這兩個例子。</p>

<h3 id="cache">Cache</h3>
<p>常見的做法可能會是加一台cache database，像是redis，
這也是一種replication，因為你把資料從主要的資料庫裡複製了一份到redis上。</p>

<p>這時候你就有很多事要決定了，要用cache還是本來的資料庫作為master，
也就是說一開始寫入的地方要發生在哪裡: cache還是main database?</p>

<p>還有要多久將兩份資料同步，也就是replication lag會是多久，
可能會有lag也可以沒有，
這一切的決定就會衍伸出有<strong>cache aside</strong>、<strong>read through</strong>、<strong>write through</strong>、<strong>write back</strong>
等等等的架構設計，有機會再單獨寫一篇講Cache的設計～ (TODO)。</p>

<h3 id="讀寫分離">讀寫分離</h3>
<p>當你的RDBMS資料庫無法再負荷的了大量的寫入或查詢時，或許你有聽過讀寫分離，
就是所有寫入的操作只能在某一台資料庫發生，也就是今天所說的master，
而其他的查詢都透過slave，其實我也沒有實際做過，但核心的概念就是今天所講的replication。</p>

<h2 id="其他">其他</h2>
<h3 id="cdndns">CDN、DNS</h3>
<p>廣義上CDN及DNS都有replication的概念，將檔案或DNS record複製到鄰近user的機器上，
DNS甚至複製到了user的本地機器裡，可以看到他們為了支持更好的read performance，
不管是latency還是throughput，而採用了這樣的架構設計，換來的是inconsistency的問題，
就像是DNS record的更新，通常要花上幾分鐘甚至是幾天才有辦法同步。</p>

<h1 id="summary">Summary</h1>
<p>今天看了replication是什麼，會帶來哪些好處(resilient、read performace)，
以及會面對怎樣的問題(inconsistency)，並且知道了一些會用到這些概念的地方，
不管是他內部就幫你做好的(NoSQL)，還是你自己的系統架構，或者是一些已經存在的別的系統(CDN、DNS)。</p>

<p>透過更了解replication的概念，對於我們如何使用別人的產品或是自己系統設計上的取捨都有更清楚深刻的見解，
感謝你的閱讀，有任何問題或是想法都歡迎留言唷～ 掰掰👋</p>

<h1 id="參考資料">參考資料</h1>

<ol>
  <li><a href="https://docs.mongodb.com/manual/reference/write-concern/" target="_blank" id="1"><strong>MongoDB Write Concern</strong></a></li>
</ol>]]></content><author><name>HoMuChen</name></author><category term="Web Development" /><category term="system design" /><category term="database" /><summary type="html"><![CDATA[database replication是什麼?有什麼好處及缺點，方法又有哪些呢? 可以在許多系統中看到replication的應用， 像是各種NoSQL、自己系統的(讀寫分離、cache、search engine)、CDN、DNS等等...]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://storage.googleapis.com/homuchen.com/images/database-replication-1.jpg" /><media:content medium="image" url="https://storage.googleapis.com/homuchen.com/images/database-replication-1.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>