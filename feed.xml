<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-tw"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://homuchen.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://homuchen.com/" rel="alternate" type="text/html" hreflang="zh-tw" /><updated>2022-06-26T00:01:59+08:00</updated><id>https://homuchen.com/feed.xml</id><title type="html">HoMuChen</title><subtitle>Hi! This is HoMuchen, 陳河穆. I am a software engineer working at Largitdata now. This is where I record whatever I learned.</subtitle><entry><title type="html">淺談各種資料庫cache策略: cache aside、read through、write through、write back</title><link href="https://homuchen.com/posts/databse-chache-strategies/" rel="alternate" type="text/html" title="淺談各種資料庫cache策略: cache aside、read through、write through、write back" /><published>2022-06-25T23:54:00+08:00</published><updated>2022-06-25T23:54:00+08:00</updated><id>https://homuchen.com/posts/databse-chache-strategies</id><content type="html" xml:base="https://homuchen.com/posts/databse-chache-strategies/"><![CDATA[<p>資料庫的快取策略那麼多種: <strong>cache aside</strong>、<strong>read through</strong>、<strong>write through</strong>、<strong>write back</strong>，
常常哪個是哪個也分不清楚、記不起來，今天將分享這些策略背後的內功心法，
讓大家不用在為了記不起這些招式的名稱而傷腦筋。</p>

<h1 id="什麼是資料庫快取database-cache">什麼是資料庫快取(database cache)?</h1>
<p>快取是一種策略，用來增進你的應用程式及資料庫的效能，
作法是將常使用的資料放在具有更快存取速度的的記憶體中(in memory)，
而達成這樣的目的的策略又有好多種:</p>

<ul>
  <li>cache aside</li>
  <li>read through</li>
  <li>write through</li>
  <li>write back</li>
</ul>

<p>有沒有系統性的方法可以歸納這些策略，各自的優缺點即適用的情況又是為何？
讓我們接著看下去！</p>

<h1 id="replication">Replication</h1>
<p>其中最核心的關鍵就是: <strong>cahce就是一種replication</strong>，因為資料一部分放在資料庫中，
而另一個放在快取，這樣就是一種replication，在分散式系統中，要做replication就只要問兩個問題:</p>

<ol>
  <li>誰是Master？誰是Slave？</li>
  <li>複製的過程是同步的還是非同步的？</li>
</ol>

<p>之前有寫過一篇關於replication的文章: 
<a href="/posts/what-and-why-database-replication-advantage-and-disadvantage/" target="_blank"><strong>[System Design] 淺談Database Replication，有何優缺點、做法及何處可見?</strong></a>，有興趣的朋友可以再去看看～</p>

<h2 id="master-or-slave">Master or Slave</h2>
<p>首先，我們先定義幾個名詞，master就是接受資料寫入修改的最一開始的節點，
而slave就是將master的改變複製一份過來存放的地方。</p>

<p>換句話説，資料要寫入，就是寫到master，然後會在複製一份到slave。</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/database-replication-1.jpg" alt="master slave repilcation" target="_blank" /></p>

<h2 id="synchronous-or-asynchronous-replication">Synchronous or Asynchronous replication</h2>
<p>從master複製到slave間的過程，會有一個時間差，
同步及非同步的複製差別在於有沒有等到資料確定被複製到了slave才會回傳寫入成功。</p>

<ul>
  <li>synchronous: 當資料寫入到master時，唯有等到他確定被複製到了slave，才會ack成功。</li>
  <li>asynchronous: 資料一寫入到master，不等它被複製到了slave，就ack成功。</li>
</ul>

<p><img src="https://storage.googleapis.com/homuchen.com/images/database-cache-1.jpg" alt="Synchronous or Asynchronous replication" target="_blank" /></p>

<h1 id="各種cache策略">各種cache策略</h1>
<p>知道了Replication之後，要怎麼將這些觀念應用在cache上呢？就是將以下兩種情況排列組合！就會得到四種快取策略拉～</p>

<ol>
  <li>資料庫作為master vs. 快取作為master</li>
  <li>asynchronous vs. asynchronous replication</li>
</ol>

<p><img src="https://storage.googleapis.com/homuchen.com/images/database-cache-0.jpg" alt="Cache strategies" target="_blank" /></p>

<p>基本上，使用資料庫作為master，可以<strong>保證資料不會丟失</strong>；
若使用快取作為master，則是<strong>適合write heavy並且可以容許資料丟失</strong>的應用。
而<strong>同步跟不同步則決定了資料是否會有不一致</strong>的現象。
接著就讓我們分別更加仔細地看他們個別的作法及優缺點吧。</p>

<h2 id="cache-aside">cache aside</h2>
<ul>
  <li>
    <p>寫入: 資料寫入時就是寫到主要的資料庫中。</p>
  </li>
  <li>
    <p>讀取: 應用程式讀取資料時，會先檢查是否有在快取中了，有的話就回傳，沒有的話就去資料庫中讀取，並存放一份在快取中，
因為這個複製的動作是當這筆有被讀取到時才會進行，所以為非同步的複製。</p>
  </li>
  <li>
    <p>優點: 資料直接寫入到資料庫中，就保證不會丟失，最容易實現，因為寫入時的動作跟沒有快取時是一模一樣的。</p>
  </li>
  <li>
    <p>缺點: 第一次讀取時一定會cache miss，而非同步的複製就可能造成資料間的不一致。</p>
  </li>
</ul>

<h2 id="read-through">read through</h2>
<ul>
  <li>
    <p>寫入: 資料寫入時就是寫到主要的資料庫中。</p>
  </li>
  <li>
    <p>讀取: 跟cache aside非常相似，唯一差別在於應用程式只直接從緩存去拿資料，不需要同時知道緩存及資料庫的存在，
而由快取本身決定要去哪裡拿資料。</p>
  </li>
  <li>
    <p>優點: 應用程式的程式碼會更加簡潔。</p>
  </li>
  <li>
    <p>缺點: 同cache aside。</p>
  </li>
</ul>

<h2 id="write-through">write through</h2>
<ul>
  <li>
    <p>寫入: 寫入時直接寫入緩存及資料庫，必須等到兩者都寫入成功才成功。</p>
  </li>
  <li>
    <p>讀取: 直接讀取緩存，通常搭配read through，如此一來，應用程式都將只需面對緩存就好。</p>
  </li>
  <li>
    <p>優點: 不會有cache miss。</p>
  </li>
  <li>
    <p>缺點: 寫入資料要等到快取及資料庫都寫入成功後才算成功，所以會增加寫入延遲。</p>
  </li>
</ul>

<h2 id="write-backwrite-behind">write back、write behind</h2>
<ul>
  <li>
    <p>寫入: 寫入時直接寫入緩存，在以非同步的方式寫入到資料庫，這麼做可能有幾個原因，
你的應用有大量write而資料庫負荷不了，可能在緩存那邊做一個batch insert。</p>
  </li>
  <li>
    <p>讀取: 直接讀取緩存。</p>
  </li>
  <li>
    <p>優點: 不會有cache miss、適用於write heavy的應用、減少對資料庫的負荷。</p>
  </li>
  <li>
    <p>缺點: 資料有可能會丟失，當資料還未被成功從緩存複製到資料庫時，如果緩存這時掛掉，那些資料就不見了。</p>
  </li>
</ul>

<h1 id="結論">結論</h1>
<p>今天從另一個角度來看看各種緩存策略，寫入到資料庫的，不會有資料丟失的問題，
同步及異步的複製則決定了資料的一致性，write heavy的應用可以考慮第一時間寫入緩存。</p>

<p>策略沒有絕對的對錯，根據你的使用場景(write to read ratio、persistency、consistency)，選擇最適合的方案。
希望今天的分享對你有一丁點兒的幫助，祝大家事業成功、生活美滿！掰掰～👋</p>]]></content><author><name>HoMuChen</name></author><category term="Web Development" /><category term="system design" /><category term="database" /><summary type="html"><![CDATA[資料庫的快取策略那麼多種: cache aside、read through、write through、write back， 常常哪個是哪個也分不清楚、記不起來，今天將分享這些策略背後的內功心法， 讓大家不用在為了記不起這些招式的名稱而傷腦筋。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://storage.googleapis.com/homuchen.com/images/database-cache-0.jpg" /><media:content medium="image" url="https://storage.googleapis.com/homuchen.com/images/database-cache-0.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">遠端工作模式對於雇主有哪些好處？</title><link href="https://homuchen.com/posts/remote-working-advantages-for-boss/" rel="alternate" type="text/html" title="遠端工作模式對於雇主有哪些好處？" /><published>2022-06-22T11:50:00+08:00</published><updated>2022-06-22T11:50:00+08:00</updated><id>https://homuchen.com/posts/remote-working-advantages-for-boss</id><content type="html" xml:base="https://homuchen.com/posts/remote-working-advantages-for-boss/"><![CDATA[<p>在上篇文章中: <a href="/posts/remote-working-advantages/"><strong>遠端工作有哪些好處？</strong></a>
以員工、接案者或自由工作者分享了遠距工作模式有哪些好處？今天換個角度！
來看看身為老闆的話，這樣的工作模式會帶來哪些好處。</p>

<h1 id="我又不是老闆為何要知道這些">我又不是老闆，為何要知道這些？</h1>
<p>知己知彼，百戰百勝，當你有一天想轉換工作模式必須跟老闆談判時，
知道這能為老闆帶來哪些好處，將能夠讓你將心比心地創造出雙贏的局面。</p>

<p>遠端工作模式不是零和遊戲，員工得到更多自由的同時，雇主也能同時獲得更多，
談判能更成功的關鍵，就是能夠為雙方都創造出價值，然後再一起來分這一杯羹，
而不是一方有收穫另一方就得失去些什麼。</p>

<h1 id="對雇主有哪些好處呢">對雇主有哪些好處呢？</h1>
<p>接著就直接來看看遠端工作可以為僱主帶來哪些好處吧～</p>

<h2 id="世界人才資料庫">世界人才資料庫</h2>
<p>當你不侷限員工要在辦公室工作時，來自全球各地的人都能為你所用，
Pool越大，可能就越容易找到合適的人。</p>

<p>以往就有來自印度、烏克蘭的人主動聯絡我們公司老闆的案例，表示希望能為我們工作，
但礙於當時沒有遠距工作模式的相關經驗及想法，最後就都沒結果。</p>

<p>如此一般，就算是當地小公司，在國際間的各個城市中沒有據點，但還是可以享受到IT強國的人才。</p>

<h2 id="降低人才流動">降低人才流動</h2>
<p>有時員工可能因為一些非工作上的因素而必須離職，比如說家有老母，必須回鄉照顧；
老婆的工作地點在別處，想要過去在同個城市生活；有環遊世界的夢想，非得離職等等。</p>

<p>一旦是遠距工作模式，以上的這些問題就都不是問題！
好的人才就不會因為一些非工作相關的理由而被迫要離開公司。</p>

<h2 id="成果導向偷懶員工一眼揪出">成果導向，偷懶員工一眼揪出</h2>
<p>見不到員工，所有的一切都只能以成果說話，有沒有偷懶就一目瞭然，雇主對於員工的績效評估也會更加客觀。</p>

<p>有時雇主可能會看到這個員工早上都第一個到，晚上最晚走，很聽話也很好相處，就認為他是一個好員工，
但實際的情況卻是，這位員工的產出並不是太特別的多，待在辦公室的時間可能很多時間在做自己的事，
並且晚下班裝忙。</p>

<p>遠距工作模式就不會被這些表面的假像給蒙蔽，有做事沒做事非常地清楚，對於績效評量可以更有依據！</p>

<h2 id="省錢">省錢</h2>
<p>省下辦公室就是省錢，就是一個很膚淺但也是最直接明顯的好處，
省下通勤時間跟相關的花費，不管是雇主還是員工都是皆大歡喜🎉</p>

<p>另外就像上面提到的全球人才資料庫，有可能找到生活在消費水準較低的區域的員工，</p>

<p>當然這不是最主要的目的，找到合適的員工才是更重要的，
但如果能兩個都要，何樂而不為呢～</p>

<h1 id="結論">結論</h1>
<p>遠距工作模式好處多多，且可能是未來的趨勢，企業若能慢慢適應將可能是一大優勢，
現在我們公司每個求職者在面試的時候，每一個都問可不可以遠端工作～
未來不能遠端工作的話，可能就會漸漸被淘汰了。</p>

<p>當然這樣的模式還是會有他的難處要去克服，需要相對應的配套跟做法來搭配，
比如溝通協作的模式，工作流程的設計等等，但如果可以成功克服習慣的話，我私心覺得是很不錯拉😂</p>

<p>祝大家在追逐自己理想的生活上一路順遂～ 最近我也是正在經歷轉變生活型態的開端，
會陸續分享數位遊牧遠端工作的心得及歷程，如果想更即時地看我遊到了哪裡，
或是不想看這麼多字，想看精簡點的圖文表達的話，也歡迎追蹤我的Instagram: <a href="https://www.instagram.com/mumu.life.lab/" target="_blank"><strong>mumu.life.lab</strong></a>。
掰掰～👋</p>]]></content><author><name>HoMuChen</name></author><category term="生活" /><category term="life style" /><category term="remote work" /><category term="digital nomad" /><summary type="html"><![CDATA[在上篇文章中: 遠端工作有哪些好處？ 以員工、接案者或自由工作者分享了遠距工作模式有哪些好處？今天換個角度！ 來看看身為老闆的話，這樣的工作模式會帶來哪些好處。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://storage.googleapis.com/homuchen.com/images/remote-work-advantages-boss-0.jpg" /><media:content medium="image" url="https://storage.googleapis.com/homuchen.com/images/remote-work-advantages-boss-0.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">房間DIY改造: 大門篇，如何用剩的乳膠漆來改造大門</title><link href="https://homuchen.com/posts/room-makeover-door/" rel="alternate" type="text/html" title="房間DIY改造: 大門篇，如何用剩的乳膠漆來改造大門" /><published>2022-06-18T22:04:00+08:00</published><updated>2022-06-18T22:04:00+08:00</updated><id>https://homuchen.com/posts/room-makeover-door</id><content type="html" xml:base="https://homuchen.com/posts/room-makeover-door/"><![CDATA[<p>想DIY重新裝潢佈置自己的房間，房門不想費功夫整個換掉，
但又跟欲改造的風格會格格不入，該怎麼辦呢？</p>

<p>這篇文章將分享有哪些方法可以改造房門，各有哪些優缺點，我最後是怎麼做的，花了多少跟多少錢，
以及最後的成果分享～(見下圖)</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/room-makeover-door-0.jpg" alt="房間DIY改造: 大門" /></p>

<h1 id="有哪些方法可以改造門">有哪些方法可以改造門</h1>
<p>常見的有兩種方式，分別為: <strong>貼皮</strong>及<strong>上漆</strong>。</p>

<h2 id="貼皮">貼皮</h2>
<p>表面平整的家具才比較適合使用貼皮，不平整的表面，壁貼將難以施工，
貼皮比起油漆，就是除了顏色之外，還可以仿造出另一種材質的感覺，
常見的像是木紋、清水模、大理石等等。</p>

<p>另外家具表面如果有小傷口、刮痕、坑洞的話，利用貼皮的方式也能使之平整唷。</p>

<p>在上一篇文章中: <a href="/posts/room-makeover-furniture/" target="_blank">房間DIY改造: 老舊家具及櫃體篇</a>，
就是使用貼皮的方式使整片的老舊系統櫃換然一新。</p>

<h2 id="油漆">油漆</h2>
<p>google家具漆，應該就可以看到市面上許多品牌都有在販售，而基本上都會有底漆加面漆。</p>

<p>害怕自己美感不佳的話，可以直接買廠商調好的顏色，
如果想要自己調顏色，可以去特力屋，跟他們說你想要漆傢俱的，根據你傢俱的材質，
他們會告訴你需不要需要額外購買底漆，而面漆的顏色就可以使用電腦調色，
好處就是可以一併跟牆壁的油漆一起買，做統一的顏色搭配調整。
而且如果你是牆壁漆剩的，更可以直接拿來利用！</p>

<h1 id="改造過程">改造過程</h1>
<p>因為這次要改造的門非常凹凸不平，所以無法延續之前貼皮的方式，而是選用<strong>Dulux 1051平光白乳膠漆</strong>，
以及<strong>立邦的護壁寶</strong>作為底漆。</p>

<h2 id="拆除把手">拆除把手</h2>
<p>首先先將把手拆卸下來，youtube有許多教學影片像是這個: 
<a href="https://www.youtube.com/watch?v=l3PKk3R_4zQ" target="_blank">換房門鎖教學示範 Replace a Door Lockset / Doorknob 喇叭鎖更換</a>，
不想拆的也無法，稍後漆的時候要小心就是了，但我覺得一起換一個新的美美的把手不是更好嗎～</p>

<h2 id="清理門面">清理門面</h2>
<p>接著把門上貼紙撕一斯，撕不下來可以用刮刀或是砂紙磨，最後濕布將粉層擦拭乾淨，等他乾就可以準備上漆囉～</p>

<h2 id="漆上底漆">漆上底漆</h2>
<p>根據你們表面的材質，可能會需要多上底漆，像是我家的門是塑膠貼皮，直接上漆的話可能會漆不上去，
特力屋的店員是告訴我買<strong>立邦的護壁寶</strong>，這原本是防水用途的。</p>

<p>而市面上賣的家具漆有的標榜什麼材質都能上，有的則是會附上底漆，今天就只分享以立邦護壁寶作為底漆，幫大家實驗看看～</p>

<p>如果不確定你家具的需不需要上底漆，可以先試試在小面積漆上面漆，等他乾了之後看會不整片剝落就知道了。</p>

<h2 id="漆上面漆">漆上面漆</h2>
<p>等底漆乾了之後，就可以開始上面漆拉，通常會上個三四層，第一次就薄薄一層刷過去，看起來會很不均勻那覺得是正常的！如下圖:</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/room-makeover-door-1.jpg" alt="房門面漆: 三道" /></p>

<p>塗刷三道之後看起來就好許多了！</p>

<h2 id="裝上把手">裝上把手</h2>
<p>就是把它裝上去😂，買來應該都會有說明書，不過在購買之前要注意尺寸跟你家房門挖的洞有沒有合唷！</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/room-makeover-door-2.jpg" alt="房門面漆: 把手" /></p>

<h1 id="結論">結論</h1>
<p>使用特力屋推薦的立邦護壁寶底漆看起來是沒問題的，第一次在上乳膠漆時上不均勻時別害怕，
等他乾燥之後再多上幾層就ok了</p>

<p>繼上次<a href="/posts/room-makeover-furniture/" target="_blank">改造完衣櫃</a>後，
這次將旁邊的大門也一併處理，貼皮的話，
我覺得表面的品質還是會比較一致一點，但礙於門面太過凹凸不平，只能用漆的，
雖然有點色差但也是沒辦法，就給大家參考參考～</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/room-makeover-door-3.jpg" alt="房間大改造: 衣櫃及房門" /></p>

<p>最後附上這次塗刷房門的購買清單及連結:</p>

<ul>
  <li><a href="https://085717.tw/product_inside02" target="_blank">得利乳膠漆 1501白</a></li>
  <li><a href="http://www.nipponpaint.com.tw/product.php?tab=product_link&amp;productId=64" target="_blank">立邦 護壁寶</a></li>
  <li><a href="https://shopee.tw/search?keyword=%E5%8A%A0%E5%AE%89%E7%89%8C%20lp1x90g" target="_blank">把手: 加安牌 lp1x90g</a></li>
</ul>]]></content><author><name>HoMuChen</name></author><category term="生活" /><category term="life style" /><category term="room makeover" /><summary type="html"><![CDATA[想DIY重新裝潢佈置自己的房間，房門不想費功夫整個換掉， 但又跟欲改造的風格會格格不入，該怎麼辦呢？]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://storage.googleapis.com/homuchen.com/images/room-makeover-door-0.jpg" /><media:content medium="image" url="https://storage.googleapis.com/homuchen.com/images/room-makeover-door-0.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">你可以在這46個國家拿到數位遊牧簽證!</title><link href="https://homuchen.com/posts/digital-nomad-visa-in-46-countries/" rel="alternate" type="text/html" title="你可以在這46個國家拿到數位遊牧簽證!" /><published>2022-06-18T00:12:00+08:00</published><updated>2022-06-18T00:12:00+08:00</updated><id>https://homuchen.com/posts/digital-nomad-visa-in-46-countries</id><content type="html" xml:base="https://homuchen.com/posts/digital-nomad-visa-in-46-countries/"><![CDATA[<p>如果你是個企業家、接案工作者、或像我一樣是個可以遠端工作的打工仔，
那麼你可能對數位遊牧(digital nomad)這樣的生活型態有興趣～</p>

<h1 id="數位遊牧">數位遊牧</h1>
<p>什麼是數位遊牧呢？就是只要有電腦跟網路，你就可以在任何你想要的地方工作！</p>

<p>你有實現環遊世界、體驗各地的文化跟認識世界各地的人的夢想嗎？
不用等到退休！現在就可以收拾你的行囊，前往你夢想中的國度！</p>

<p>延伸閱讀:</p>

<ul>
  <li><a href="/posts/book-note-the-four-hour-work-week/" target="_blank"><strong>[讀書筆記] 一週工作4小時: 擺脫朝九晚五的窮忙生活，晉身「新富族」！</strong></a></li>
  <li><a href="/posts/remote-working-advantages/" target="_blank"><strong>遠端工作有哪些好處？</strong></a></li>
  <li><a href="/posts/double-your-money-without-any-extra-work/" target="_blank"><strong>如何不用做額外的工作，就使你的收入倍增</strong></a></li>
</ul>

<h1 id="數位遊牧簽證">數位遊牧簽證</h1>
<p>但如果你只是持旅遊簽證，你在一個國家待的時間就會有限，有了數位簽證，
將可以<strong>在當地待一個月到四年不等的時間</strong>。</p>

<p>這類簽證通常需要你的工作及收入證明，以確保你不會跟當地人搶當地的工作的機會。</p>

<p>以下為國家列表:</p>

<ol>
  <li>Anguilla</li>
  <li>Antigua &amp; Barbuda</li>
  <li>Aruba</li>
  <li>Australia</li>
  <li>Barbados</li>
  <li>Belize</li>
  <li>Bermuda</li>
  <li>Brazil</li>
  <li>Cambodia</li>
  <li>Cape Verde</li>
  <li>Cayman Islands</li>
  <li>Colombia</li>
  <li>Costa Rica</li>
  <li>Croatia</li>
  <li>Curacao</li>
  <li>Cyprus</li>
  <li>Czech Republic</li>
  <li>Dominica</li>
  <li>Dubai, UAE</li>
  <li>Ecuador</li>
  <li>Estonia</li>
  <li>Georgia</li>
  <li>Germany</li>
  <li>Greece</li>
  <li>Grenada</li>
  <li>Iceland</li>
  <li>Indonesia</li>
  <li>Italy</li>
  <li>Jamaica</li>
  <li>Malta</li>
  <li>Mauritius</li>
  <li>Mexico</li>
  <li>Montenegro</li>
  <li>Montserrat</li>
  <li>Norway</li>
  <li>Panama</li>
  <li>Portugal</li>
  <li>Romania</li>
  <li>Serbia</li>
  <li>Seychelles</li>
  <li>Spain</li>
  <li>Sri Lanka</li>
  <li>St. Lucia</li>
  <li>Taiwan</li>
  <li>Thailand</li>
  <li>Vietnam</li>
</ol>

<p>如果對以上國家有興趣的，可以google 國家名 + digital nomand visa來看看申請辦法唷～</p>

<h1 id="參考資料">參考資料</h1>
<ul>
  <li><a href="https://lifehacker.com/you-can-get-a-digital-nomad-visa-in-these-46-countrie-1849058910" target="_blank">You Can Get a ‘Digital Nomad’ Visa in These 46 Countries</a></li>
  <li><a href="https://hbr.org/2022/05/how-digital-nomad-visas-can-boost-local-economies?ab=hero-subleft-2" target="_blank">How “Digital Nomad” Visas Can Boost Local Economies</a></li>
</ul>]]></content><author><name>HoMuChen</name></author><category term="生活" /><category term="remote work" /><category term="digital nomad" /><summary type="html"><![CDATA[如果你是個企業家、接案工作者、或像我一樣是個可以遠端工作的打工仔， 那麼你可能對數位遊牧(digital nomad)這樣的生活型態有興趣～]]></summary></entry><entry><title type="html">遠端工作有哪些缺點？以及該如何克服？</title><link href="https://homuchen.com/posts/remote-working-disadvantages/" rel="alternate" type="text/html" title="遠端工作有哪些缺點？以及該如何克服？" /><published>2022-06-14T23:36:00+08:00</published><updated>2022-06-14T23:36:00+08:00</updated><id>https://homuchen.com/posts/remote-working-disadvantages</id><content type="html" xml:base="https://homuchen.com/posts/remote-working-disadvantages/"><![CDATA[<p>在上一篇文章: <a href="/posts/remote-working-advantages/" target="_blank">遠端工作有哪些好處？</a>中，
提到了許多遠端工作的優點，今天將來看看有哪些缺點，並且提出相對應的解決辦法！</p>

<h1 id="遠端工作的缺點">遠端工作的缺點:</h1>
<h2 id="1-工作和生活混在一起">1. 工作和生活混在一起</h2>
<p>不用到辦公室上班，意味著你必須<strong>自己決何時何地工作</strong>，這是優點，同時也可能是個缺點！</p>

<p>早上起床準備早餐，出門通勤到辦公室，準備個咖啡開始工作，跟同事吃午餐，下午繼續工作，下班去運動，
回家吃個晚飯好好休息結束一天。每天在辦公室的生活很可能就像這樣，很規律也不用多想，什麼時間到了就做什麼事，
有生產力、社交、健康及下班後自己的時間。</p>

<p>接著我們來看看遠距工作可能的樣子: 早上起床準備早餐，邊吃早餐邊收發Email，準備個咖啡開始工作，
想到今天是NBA總決賽的日子，打開電視機看了一下比賽，遲遲才開始工作，中午吃完午飯又睡個午覺，
結果發現工作趕不完，一直到熬夜到睡前都持續工作著。</p>

<p>如此一般，如果沒有自律及自我管理的能力時，遠端工作反而可能是悲劇的開始，
<strong>不是無法脫離工作，就是無法好好開始工作</strong>～</p>

<h3 id="怎麼辦">怎麼辦？</h3>
<p>就像在<a href="https://www.books.com.tw/products/0010822522" target="_blank"><strong>《原子習慣》</strong></a>一書中講到的，
組成我們每一天大部分是習慣，而不是有意識的選擇，而自由的生活使得我們會不斷地面臨選擇!</p>

<p>我現在要開始工作了嗎？還是看一下NBA，晚上再補就好？我要在客廳用筆電工作嗎？
還是去書房？我現在要出門運動去嗎？這樣還要換衣服好懶喔…</p>

<p>解決辦法就是<strong>使生活行程習慣化</strong>，使之成為不需假以思索就會自動去執行的<strong>慣例(routine)</strong>，
替自己加上一些限制，<strong>明確地規定自己何時要在何地做什麼事</strong>，<strong>區分出工作及生活休閒的區域</strong>。</p>

<p>延伸閱讀:</p>
<ul>
  <li><a href="/posts/book-note-atomic-habits/" target="_blank"><strong>[讀書筆記] 原子習慣: 細微改變帶來巨大成就的實證法則</strong></a></li>
  <li><a href="/posts/how-i-keep-reading/" target="_blank"><strong>《原子習慣》應用: 我是如何養成閱讀習慣</strong></a></li>
</ul>

<h2 id="2-缺乏社交孤單寂寞覺得冷">2. 缺乏社交，孤單寂寞覺得冷</h2>
<p>自己一個人在家工作，沒人可以閒聊，少了茶水間的八卦，偶爾也是會感到孤單的。
雖然不會有人打擾你，造成你專注工作的中斷，不過人畢竟是社會性的動物，人與人的連結還是必須的。</p>

<h3 id="怎麼辦-1">怎麼辦？</h3>
<p>少了跟同事的社交，那你可以跟其他人社交呀～ 有了在哪裡都能工作的自由，除了家裡之外，你還有許多的選擇。</p>

<p>像是可以去咖啡廳、coworking space工作，找朋友一起工作(前提是他也可以遠端XD)，
或是在一些遠距工作者的社團揪團～</p>

<p>以我自己來說，遠距工作之後，反而跟很多許久不見的老友見面，因為我可以直接在他家工作XD，
有些則是因為地點的關係，去找不在台北的朋友也方便多了，未來出國的話，也可以找在當地工作生活的朋友們😄，
不過社交跟專心工作之間還是必須要做出取捨拉。</p>

<h2 id="3-瑣碎的工作變多">3. 瑣碎的工作變多</h2>
<p>基於雇主與員工間的信任，有些公司會制定出的相關準則，
像是要回報工作進度狀況、寫工作日誌，或者原本相較彈性的工作內容，
主管為了監督是否在家真的有在工作，而制定了完成期限。這些政策無疑地都是在增加員工們瑣碎的工作內容與壓力。</p>

<h3 id="怎麼辦-2">怎麼辦？</h3>
<p>跟老闆培養好信任的基礎是最根本的～一旦老闆相信你會把工作做好，他也就不會時時刻刻要一直關心你的進度。</p>

<p>不過如果是剛轉換工作型態，定時回報工作進度或許是不太能避免的，必須要給老闆一個期待，
讓他知道他可以期望你在哪個時間點完成哪些任務，而這也是我跟老闆說要遠端工作所用的其中一招，
之後會再寫一篇我是如何說服我老闆遠距工作的(TODO)。</p>

<p>另外有工作日誌並不一定是個壞事，當員工將完成的事記錄下來，有沒有偷懶就一目瞭然，
雇主對於員工的績效評估會更加客觀，完全以工作成果來看，而不是這個員工有沒有早到晚走，聽不聽話，好不好相處…
如果員工可以在更短的時間內做完任務，相對地就有更多的時間做自己事，也不用待在辦公室的座位上裝忙😂</p>

<h1 id="結論">結論</h1>
<p>更多的自由，並不一定會帶來更多的幸福，以前人們會追求工作與生活的平衡(work life balance)，
上班與私生活有明確的分界，要有夠多的時間可以從事自己的興趣。
但遠端工作後，工作與生活更多像是融合在了一起，能做到生活即工作，工作即是生活那是最好，
但並不是每個人都能那麼喜歡自己的工作，所以不妨替自己加上一些限制，明確界定工作的時間及地點，
或許會更有效率，以及下班後能夠真正地放鬆。</p>

<p>並不是每個人都適合遠端工作，如果你喜歡規律穩定地生活，大部分的行程活動是被安排確定好的，
那遠端工作可能不適合你。祝大家都能順利地向著自己理想的生活型態上前進！掰掰～👋</p>]]></content><author><name>HoMuChen</name></author><category term="生活" /><category term="life style" /><category term="remote work" /><category term="digital nomad" /><summary type="html"><![CDATA[在上一篇文章: 遠端工作有哪些好處？中， 提到了許多遠端工作的優點，今天將來看看有哪些缺點，並且提出相對應的解決辦法！]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://storage.googleapis.com/homuchen.com/images/remote-working-disadvantages-0.jpg" /><media:content medium="image" url="https://storage.googleapis.com/homuchen.com/images/remote-working-disadvantages-0.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">房間DIY改造: 老舊家具及櫃體篇</title><link href="https://homuchen.com/posts/room-makeover-furniture/" rel="alternate" type="text/html" title="房間DIY改造: 老舊家具及櫃體篇" /><published>2022-06-10T21:52:00+08:00</published><updated>2022-06-10T21:52:00+08:00</updated><id>https://homuchen.com/posts/room-makeover-furniture</id><content type="html" xml:base="https://homuchen.com/posts/room-makeover-furniture/"><![CDATA[<p>想DIY重新裝潢佈置自己的房間，家裏有老舊家具或櫃體還是堪用的丟掉可惜，
，又或者它是系統家具，做死的也不想費功夫整個打掉，
但又跟欲改造的風格會格格不入，該怎麼辦呢？</p>

<p>這篇文章將分享有哪些方法可以改造老舊櫃體，各有哪些優缺點，我最後是怎麼做的，花了多少跟多少錢，
以及最後的成果分享～(見下圖)</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/room-makeover-furniture-0.jpg" alt="老舊櫃體改造Before and After" loading="lazy" /></p>

<h1 id="有哪些方法可以改造家具">有哪些方法可以改造家具</h1>
<p>常見的有兩種方式，分別為: <strong>貼皮</strong>及<strong>上漆</strong>。</p>

<h2 id="貼皮">貼皮</h2>
<p>表面平整的家具才比較適合使用貼皮，不平整的表面，壁貼將難以施工，
貼皮比起油漆，就是除了顏色之外，還可以仿造出另一種材質的感覺，
常見的像是木紋、清水模、大理石等等。</p>

<p>另外家具表面如果有小傷口、刮痕、坑洞的話，利用貼皮的方式也能使之平整唷。</p>

<h2 id="家具漆">家具漆</h2>
<p>google家具漆，應該就可以看到市面上許多品牌都有在販售，而基本上就是底漆加上水凝瓷漆。</p>

<p>害怕自己美感不佳的話，可以直接買廠商調好的顏色，
如果想要自己調顏色，可以去特力屋，跟他們說你想要漆傢俱的，根據你傢俱的材質，
他們會告訴你需不要需要額外購買底漆，而面漆的顏色就可以使用電腦調色，
好處就是可以一併跟牆壁的油漆一起買，做統一的顏色搭配調整。</p>

<h1 id="施工過程">施工過程</h1>
<p>我這次選擇使用貼皮的方式來將衣櫃改造，因為櫃體表面還算很平整，
下次再用漆的方式來處理凹凸不平的門的部分，未來可以做個比較。</p>

<p>施工的過程如下:
<img src="https://storage.googleapis.com/homuchen.com/images/room-makeover-furniture-1.jpg" alt="家具貼皮施工過程" loading="lazy" /></p>

<h2 id="清理">清理</h2>
<p>第一步就是把傢俱表面清理乾淨，有灰塵的話，容易導致壁貼不黏。</p>

<h2 id="拆換把手">拆換把手</h2>
<p>把手的部分，不論你有沒有想換，都可以先拆下來，門片的背面會有螺絲，轉下來即可，
如此一來會有一個平整的表面，會比較好貼，等貼完之後再裝上去就好了。</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/room-makeover-furniture-2.jpg" alt="門片把手背後螺絲" loading="lazy" /></p>

<p>如果想更換把手的話，網路上也有需多把手可以選購，要注意的是孔距必須跟你原本的把手孔距一樣，
不然你就要自己再鑽孔了。</p>

<p>我的話因為找不到一樣孔距的，所以就乾脆買了一孔的就好，如下圖:</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/room-makeover-furniture-3.jpg" alt="門片把手改造: Before and After" loading="lazy" /></p>

<h2 id="貼">貼</h2>
<p>接著剪下一片壁貼，建議尺寸大小可以略大於實際需要的面積，就可以有比較多的緩衝可以避免貼歪。</p>

<p>記得背膠的紙一點點撕開就好，邊撕邊貼的同時，只是刮刀或是直尺等工具，將空氣擠出，確保壁貼表面的平整。</p>

<h2 id="裁切">裁切</h2>
<p>貼完之後，再將邊緣多餘的紙利用美工刀裁切整齊！</p>

<h2 id="裝上把手">裝上把手</h2>
<p>等都貼完裁完了之後，不管把手是新是舊，最後把它們裝上就好拉～</p>

<h1 id="總共時間及金錢花費">總共時間及金錢花費</h1>
<p>如同第一張圖大家所看到的，那一面牆的總面積約為350 x 380 平方公分(TODO)，
每一片門片因為左右都有凸起，所以要分三次貼，上下兩排總共8扇門，花了<strong>10幾個小時！</strong></p>

<p>而壁貼購買的是倆好壁貼的無印白衫木，123cm x 1000cm，要價<strong>新台幣3090！</strong></p>

<h1 id="總結">總結</h1>
<p>成果還算滿意～ 唯一預料之外的就是花費的時間比預期的多，等過一段時間如果有災情的話再跟大家報告😂。</p>

<p>之後也會陸續在改造牆面、地板、及新傢俱的添購擺設，
如果想更即時的看到改造過程的，也歡迎追蹤我的Instagram: <a href="https://www.instagram.com/mumu.life.lab/" target="_blank"><strong>mumu.life.lab</strong></a>。希望以上的內容對你有幫助！掰掰～👋</p>]]></content><author><name>HoMuChen</name></author><category term="生活" /><category term="life style" /><category term="room makeover" /><summary type="html"><![CDATA[想DIY重新裝潢佈置自己的房間，家裏有老舊家具或櫃體還是堪用的丟掉可惜， ，又或者它是系統家具，做死的也不想費功夫整個打掉， 但又跟欲改造的風格會格格不入，該怎麼辦呢？]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://storage.googleapis.com/homuchen.com/images/room-makeover-furniture-0.jpg" /><media:content medium="image" url="https://storage.googleapis.com/homuchen.com/images/room-makeover-furniture-0.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">遠端工作有哪些好處？</title><link href="https://homuchen.com/posts/remote-working-advantages/" rel="alternate" type="text/html" title="遠端工作有哪些好處？" /><published>2022-06-10T00:00:00+08:00</published><updated>2022-06-10T00:00:00+08:00</updated><id>https://homuchen.com/posts/remote-working-advantages</id><content type="html" xml:base="https://homuchen.com/posts/remote-working-advantages/"><![CDATA[<p>這篇文章將分享<strong>遠端工作</strong>有哪些好處，也就是我在慢慢轉變為<strong>數位遊牧</strong>生活型態的過程中，
所體會的一些點:</p>
<ul>
  <li>節省通勤時間</li>
  <li>時間彈性</li>
  <li>地點彈性</li>
  <li>專注工作、生產力提升</li>
  <li>省錢</li>
</ul>

<blockquote class="instagram-media" data-instgrm-permalink="https://www.instagram.com/p/CejOOCCJ3Zn/?utm_source=ig_embed&amp;utm_campaign=loading" data-instgrm-version="14" style=" background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);"><div style="padding:16px;"> <a href="https://www.instagram.com/p/CejOOCCJ3Zn/?utm_source=ig_embed&amp;utm_campaign=loading" style=" background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;" target="_blank"> <div style=" display: flex; flex-direction: row; align-items: center;"> <div style="background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;"></div> <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center;"> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;"></div> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;"></div></div></div><div style="padding: 19% 0;"></div> <div style="display:block; height:50px; margin:0 auto 12px; width:50px;"><svg width="50px" height="50px" viewBox="0 0 60 60" version="1.1" xmlns="https://www.w3.org/2000/svg" xmlns:xlink="https://www.w3.org/1999/xlink"><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(-511.000000, -20.000000)" fill="#000000"><g><path d="M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631"></path></g></g></g></svg></div><div style="padding-top: 8px;"> <div style=" color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;">在 Instagram 查看這則貼文</div></div><div style="padding: 12.5% 0;"></div> <div style="display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;"><div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);"></div> <div style="background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;"></div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);"></div></div><div style="margin-left: 8px;"> <div style=" background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;"></div> <div style=" width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)"></div></div><div style="margin-left: auto;"> <div style=" width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);"></div> <div style=" background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);"></div> <div style=" width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);"></div></div></div> <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center; margin-bottom: 24px;"> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 224px;"></div> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 144px;"></div></div></a><p style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;"><a href="https://www.instagram.com/p/CejOOCCJ3Zn/?utm_source=ig_embed&amp;utm_campaign=loading" style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none;" target="_blank">穆穆的生活實驗室（@mumu.life.lab）分享的貼文</a></p></div></blockquote>
<script async="" src="//www.instagram.com/embed.js"></script>

<h1 id="節省通勤時間">節省通勤時間</h1>
<p>我想這就是最顯而易見的好處了！</p>

<p>有研究指出，每增加20分鐘的通勤時間，你就會更不快樂，而不快樂程度相當於減薪19%！</p>

<p>你是想每天早上開車被塞在車陣之中、在捷運公車上跟大家面面相覷，
還是要在家悠閒地準備早餐、沖個美味的咖啡來開啟一天的工作呢？</p>

<h1 id="時間彈性">時間彈性</h1>
<p>擺脫了朝九晚五的辦公室框架，如果你事情都做完了，就不必因為主管還沒下班就不敢走，裝忙裝到時間到。</p>

<p>並且可以依照自己需求安排時間，有人可能是夜貓子，晚上工作效率較佳，
不用每天早上掙扎著起床；有人可能需要在下午四五點去接送小孩放學，
而我是喜歡在傍晚的時候就先去運動，免得太晚運動會影響睡眠。</p>

<p>也可以選擇週末工作！把平日的時間拿來旅遊，充分利用到平日的交通及住宿都比較便宜的好處！</p>

<h1 id="地點彈性">地點彈性</h1>
<p>邊旅遊邊工作不在是夢想，擺脫了辦公室的框架，你將擁有機動性來實現你的夢想，
可以在任何你想生活的地方工作！</p>

<p>想衝浪嗎？每週週末開車坐車去到宜蘭、花東，何不直接在當地住下，
隨時想衝就衝；想滑雪嗎？以往每年只能出國幾趟，一次滑個三五天，
如今就可以直接在日本、歐洲、美國、紐澳住下！季票給他買下去，暢滑整個雪季！</p>

<p>喜歡大自然的人，可以遠離喧囂、生活成本又高的都市，
擁抱鄉下新鮮的空氣；喜歡都市也好，一切由你自己決定！</p>

<h1 id="專注工作生產力提升">專注工作、生產力提升</h1>
<p>在辦公室中，就可能隨時會被打擾，同事間有意無意的閒聊，或是有一點點小事就找你問，失去了大段可以專注的時間。</p>

<p>就像在<a href="https://www.books.com.tw/products/0010906940" target="_blank"><strong>《Deep Work深度工作力》</strong></a>一書中講到的，
當某項任務被完全中斷的時候，人得花超過20分鐘才能完全回到之前的狀態，
如果你頻繁地在工作之間切換時，就會破壞深度工作的執行。</p>

<p>當然遠端工作也不是就一定不會被打擾，只不過你擁有更多控制自己工作環境的自由。</p>

<h1 id="省錢">省錢</h1>
<p>這不是主要的目的，但會省錢的話，也誰不愛呢～</p>

<p><strong>省去通勤的花費</strong>，也因為時間上及地點上的自由，可以變相地讓你用更少的錢買到一樣的價值。
比如説<strong>利用週末的時間工作，將活動放在平日進行</strong>，所有的花費包括交通、旅遊住宿、活動費用都比較便宜！</p>

<p>另外也因為地點上的自由，就不一定需要住在都市才會有好的工作機會，
可以<strong>不用在昂貴的市中心租房或買房</strong>，省下房租或是每個月要繳房貸的焦慮及壓力，
可以更多地依據自己的喜好來決定住的地方，甚至利用地理套利，到生活成本低的國家去當大爺～</p>

<p>延伸閱讀:</p>

<p><a href="/posts/double-your-money-without-any-extra-work/" target="_blank"><strong>如何不用做額外的工作，就使你的收入倍增</strong></a></p>

<h1 id="結論">結論</h1>
<p>遠端工作在時間及地點上的自由，可以帶來如此多的好處，但一體兩面地，
有時同樣的好處也會帶來一些壞處，之後有機會再跟大家分享我所感受的壞處(TODO)，
以及我是如何跟老闆談遠端工作(TODO)。</p>

<p>另外重點還是要知道你自己想要的是什麼？
有了遠端工作，退去了朝九晚五及辦公室的枷鎖，除去一切不想要的東西後，並不會得到繁榮，得到的就只是一片空白。
就像有人退休了，終於不用做每天抱怨的工作時，生活卻失去了重心。</p>

<p>祝大家在追逐自己理想的生活上一路順遂～如果想更即時地看我數位遊牧流浪去哪，
或是不想看這麼多字，想看精簡點的圖文表達的話，也歡迎追蹤我的Instagram: <a href="https://www.instagram.com/mumu.life.lab/" target="_blank"><strong>mumu.life.lab</strong></a>。
掰掰～👋</p>]]></content><author><name>HoMuChen</name></author><category term="生活" /><category term="life style" /><category term="remote work" /><category term="digital nomad" /><summary type="html"><![CDATA[這篇文章將分享遠端工作有哪些好處，也就是我在慢慢轉變為數位遊牧生活型態的過程中， 所體會的一些點: 節省通勤時間 時間彈性 地點彈性 專注工作、生產力提升 省錢]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://storage.googleapis.com/homuchen.com/images/remote-work-advantages-0.jpg" /><media:content medium="image" url="https://storage.googleapis.com/homuchen.com/images/remote-work-advantages-0.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">HTTP API: 該如何管理一份很大的OpenAPI document？</title><link href="https://homuchen.com/posts/how-to-manage-a-large-openapi-document-file/" rel="alternate" type="text/html" title="HTTP API: 該如何管理一份很大的OpenAPI document？" /><published>2022-06-07T00:07:00+08:00</published><updated>2022-06-07T00:07:00+08:00</updated><id>https://homuchen.com/posts/how-to-manage-a-large-openapi-document-file</id><content type="html" xml:base="https://homuchen.com/posts/how-to-manage-a-large-openapi-document-file/"><![CDATA[<p>OpenAPI的document文件可以變得非常大一份，特別是當你有好幾百個routes的時候，
這時候單一份的yaml檔管理起來可能會非常頭大，這篇文章將分享在這種情況下，
我是如何將一份大的檔案拆分成許多小的檔案，易於管理。</p>

<h1 id="openapi-specification">OpenAPI Specification</h1>
<p>OpenAPI也被稱為Swagger，是一個用來描述你的API的標準，可以根據這個標準來撰寫你的文件，
我想你應該很熟悉了，如果還不熟的，
可以先看看官方的說明: <a href="https://swagger.io/specification/" target="_blank">OpenAPI specification</a>。</p>

<h1 id="我如何拆分檔案">我如何拆分檔案</h1>
<h2 id="使用json格式">使用JSON格式</h2>
<p>官網上的範例文件都是使用yaml，而我偏好使用JSON，基於以下幾個理由：</p>

<ul>
  <li>許多語言都內建支援JSON格式，尤其是javascript，JSON的J就是這樣來的。</li>
  <li>可以直接由程式控制，將需要共用的(<strong>response</strong>、<strong>schema</strong>、<strong>parameter</strong>)寫在不同檔案，要用的時候在import進來就好。</li>
  <li>除了以上常常會需要共用的，造成spec檔案會變的很大的一個因素就是有太多的<strong>path</strong>，也能將path依照你想要方式做拆分。</li>
</ul>

<p>寫起來就會像是下面這樣:</p>

<h3 id="indexjs">index.js</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">schemas</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./components/schemas</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">securitySchemes</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./components/securitySchemes</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">parameters</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./components/parameters</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">responses</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./components/responses</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">paths</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./paths</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">openapi</span><span class="p">:</span> <span class="dl">'</span><span class="s1">3.0.0</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">info</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Example API Overview</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">version</span><span class="p">:</span> <span class="dl">'</span><span class="s1">1.0.0</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">contact</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">API Support</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">email</span><span class="p">:</span> <span class="dl">'</span><span class="s1">b98901052@ntu.edu.tw</span><span class="dl">'</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="na">servers</span><span class="p">:</span> <span class="p">[{</span>
    <span class="na">url</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/api/v1</span><span class="dl">'</span>
  <span class="p">}],</span>
  <span class="na">components</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">schemas</span><span class="p">:</span> <span class="nx">schemas</span><span class="p">,</span>
    <span class="na">parameters</span><span class="p">:</span> <span class="nx">parameters</span><span class="p">,</span>
    <span class="na">responses</span><span class="p">:</span> <span class="nx">responses</span><span class="p">,</span>
    <span class="na">securitySchemes</span><span class="p">:</span> <span class="nx">securitySchemes</span>
  <span class="p">},</span>
  <span class="na">paths</span><span class="p">:</span> <span class="nx">paths</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="pathsjs">paths.js</h3>
<p>可能就會長得像下面這樣:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">pets</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./pets</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">users</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./users</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">stores</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./stores</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">...</span><span class="nx">pets</span><span class="p">,</span>
  <span class="p">...</span><span class="nx">users</span><span class="p">,</span>
  <span class="p">...</span><span class="nx">stores</span><span class="p">,</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>可以將所有<code class="language-plaintext highlighter-rouge">/pets</code>開頭的路由放到<code class="language-plaintext highlighter-rouge">pets.js</code>，以此類推，如此一來就便於管理，
不會有一份檔案裡頭有好幾百個path，
可以更快地知道要修改一個endpoints要去到哪一支相對應的檔案。</p>

<h2 id="輸出">輸出</h2>
<p>當你要輸出JSON檔時，只需要把上述<code class="language-plaintext highlighter-rouge">Object</code>做一個<code class="language-plaintext highlighter-rouge">JSON.stringify</code>就行，或是依賴其他套件轉成<code class="language-plaintext highlighter-rouge">YAML</code>的格式。</p>

<h2 id="限制">限制</h2>
<p>但前提是你使用的動態語言，像是<code class="language-plaintext highlighter-rouge">javascript</code>、<code class="language-plaintext highlighter-rouge">python</code>等等，才有這樣方便的好處。</p>

<h2 id="就是想用yaml">就是想用YAML</h2>
<p>其實不用JSON也是可以，上述的方法一樣可以套用到YAML檔，
也就是將一些可以重複使用的schema、response，以及拆分出來的path們放到不同的檔案，
只是可能需要依賴一些額外的library來幫你做合併的動作。</p>

<p>像是<a href="https://github.com/APIDevTools/swagger-cli" target="_blank">swagger-cli</a>，
就可以讓你把<code class="language-plaintext highlighter-rouge">$ref</code>的目標，放到不同的檔案。</p>

<h1 id="總結">總結</h1>
<p>想要拆分一份大的OpenAPI spec檔以便於管理，核心的關鍵就跟寫程式是一樣的，DRY(Don’t repeat yourself)，
將會重複使用的部分拆出來，在原先的OpenAPI spec也能做到，就是使用<code class="language-plaintext highlighter-rouge">$ref</code>，
但今天更近一步跟大家分享將其寫在不同的檔案的方法: 使用<code class="language-plaintext highlighter-rouge">JSON</code>格式、利用其他套件<code class="language-plaintext highlighter-rouge">swagger-cli</code>。</p>

<p>希望以上的內容對你有一丁點的幫助！掰掰～👋</p>]]></content><author><name>HoMuChen</name></author><category term="Web Development" /><category term="http" /><category term="restful api" /><category term="api" /><category term="openapi" /><summary type="html"><![CDATA[OpenAPI的document文件可以變得非常大一份，特別是當你有好幾百個routes的時候， 這時候單一份的yaml檔管理起來可能會非常頭大，這篇文章將分享在這種情況下， 我是如何將一份大的檔案拆分成許多小的檔案，易於管理。]]></summary></entry><entry><title type="html">如何使用Notion打造Kanban based的待辦清單</title><link href="https://homuchen.com/posts/notion-kanban-board/" rel="alternate" type="text/html" title="如何使用Notion打造Kanban based的待辦清單" /><published>2022-06-04T00:02:00+08:00</published><updated>2022-06-04T00:02:00+08:00</updated><id>https://homuchen.com/posts/notion-kanban-board</id><content type="html" xml:base="https://homuchen.com/posts/notion-kanban-board/"><![CDATA[<p>待辦清單的首要任務是幫助我們整理心智，在眾多的選擇中，優先認出當下最該先執行的事項，
而不會被一堆的事項搞到非常憂慮，什麼都想做卻什麼都做不好，甚至是都沒有開始做。</p>

<p>這篇文章將簡單分享我認為<strong>待辦清單系統應該具有哪些原則</strong>，什麼是<strong>Kanban</strong>，
以及我如何使用<strong>Notion</strong>，來打造自己的Kanban based的待辦清單系統，Let’s go！</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/notion-kanban-0.jpg" alt="notion kanban todo list system" loading="lazy" /></p>

<h1 id="三大待辦清單原則">三大待辦清單原則</h1>
<p>市面上的待辦事項系統玲瑯滿目，有沒有一些基本的原則是我們可以把握的呢？以下為大家簡單總結出三項原則：</p>

<ul>
  <li>
    <p><strong>要有截止日期:</strong>
沒有截止日期，沒有急迫性，大家就是會拖，懶就是人的天性，我想不用多說什麼，大家應該多少都能感同身受吧😂</p>
  </li>
  <li>
    <p><strong>清單不能太長:</strong>
選項太多也會導致不知道要選哪一項任務來進行，也就是<strong>決策癱瘓</strong>，就算費力地做了選擇，也會導致<strong>決策疲勞</strong>，
耗費了許多能量在決策上。</p>
  </li>
  <li>
    <p><strong>與目標連結:</strong>
要知道<strong>為什麼</strong>要做每項任務，它必須可以幫助你達成某項目標，否則做了很多事，很可能只是在瞎忙。</p>
  </li>
</ul>

<p><img src="https://storage.googleapis.com/homuchen.com/images/book-note-to-do-3.jpg" alt="todo list system principles" loading="lazy" /></p>

<p>關於待辦清單的原則，想看更詳盡的解釋，可以參考我之前寫過的一篇文章:</p>

<p><a href="/posts/book-note-todo-list-formula/" target="_blank"><strong>掌握這3個原則，打造出最適合自己的代辦清單系統</strong></a></p>

<h1 id="kanban是什麼">Kanban是什麼</h1>
<p>Kanban緣起於Toyota的生產管理系統，看起來就像是下圖這樣:</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/book-note-to-do-5.jpg" alt="看板系統" loading="lazy" /></p>

<p>主要組成有<strong>欄(column)</strong>、<strong>列</strong>、<strong>卡片(card)</strong>、<strong>WIP limit</strong>，每張卡片即是一項任務，
可以將相關的任務放在同一欄，也可以使用顏色分類，並在每一列區分出<strong>未開始</strong>、<strong>進行中</strong>及<strong>完成</strong>，
而進行中的任務數量會有一個上限，也就是WIP limit(Work in Progress Limit)。</p>

<h2 id="組成">組成</h2>
<ul>
  <li><strong>Cards</strong>: 每一張卡片即代表一個任務事項。</li>
  <li><strong>Columns</strong>: Kanban最明顯的特徵就是有著不同狀態的直欄: <strong>未開始</strong>、<strong>進行中</strong>及<strong>完成</strong>，
藉著將卡片移動來移動去以及視覺化，能夠對當前的進度及狀態一目瞭然。</li>
  <li><strong>WIP limit</strong>: 而對於進行中的那一欄，有一個卡片的數量上限限制，可以避免我們任務越積越多，
並且首先專注於最重要的幾件事上。</li>
</ul>

<h2 id="好處">好處</h2>
<ul>
  <li><strong>視覺化</strong>: 對於所以進行中及未開始的能夠一目瞭然，如果是一個團隊，
成員間也能迅速地同步所有任務事項的狀態。</li>
  <li><strong>決定優先事項</strong>: 每個當下只需專注於進行中的事項，把他們做完之前，不需要擔心其他的事，
可以減少心智負擔，也不用擔心是否會忘掉其他任務，因為你有把它們寫在未開始的那欄。</li>
</ul>

<h1 id="使用notion來實作">使用Notion來實作</h1>
<p>最後也是最重要的，將利用Notion這套軟體，來打造自己的Kanban，
並且可以符合上述說的三個原則: <strong>有截止日期</strong>、<strong>不能太長</strong>、<strong>與目標連結</strong>。</p>

<p>原本的Kanban系統因為有WIP limit的關係，有符合清單不能太長的原則，
但缺少了截止日期及與特定目標連結，
接下來我將一步一步地示範如何利用<a href="https://www.notion.so/" target="_blank"><strong>Notion</strong></a>，
來完善我們Kanban待辦清單系統！</p>

<h2 id="建立表格">建立表格</h2>
<p>首先第一步，新增一個頁面，並且選擇<strong>Table</strong>。
<img src="https://storage.googleapis.com/homuchen.com/images/notion-kanban-1.jpg" alt="notion: create a table" loading="lazy" /></p>

<p>接著系統會要你選擇資料來源，這邊就選<strong>New database</strong>。
<img src="https://storage.googleapis.com/homuchen.com/images/notion-kanban-2.jpg" alt="notion: create a table" loading="lazy" /></p>

<h2 id="新增欄位">新增欄位</h2>
<p>現在需要來定義我們的資料庫裡需要的欄位了，這邊我們是會需要名稱、任務狀態、截至日期、目標或專案。
<img src="https://storage.googleapis.com/homuchen.com/images/notion-kanban-3.jpg" alt="notion: create columns" loading="lazy" /></p>

<ol>
  <li>
    <p>狀態(Status): 為一個單選欄，主要的狀態就分為未開始、進行中、已完成，可以取用自己喜歡的名字，
也可以有更多的狀態，這邊最主要的目的就是區分出進行中的任務。</p>
  </li>
  <li>
    <p>目標或專案(Project): 每個任務會有附屬於一個目標或是專案之下，記錄下來，可以知道為什麼要做這個任務，
當事項太多時，也可以利用這個欄位來做篩選。</p>
  </li>
  <li>
    <p>截止日期或時間區間(Deadline): 加上截止日期，為自己增加急迫性，否則就很容易一拖再拖，
後續也會利用這個欄位來建立timeline的視覺畫圖表，有利於我們使用截止日期來決定哪些任務應該趕快開始進行。</p>
  </li>
</ol>

<h2 id="新增board-view">新增Board view</h2>
<p>建立好資料後，就可以使用board view的功能，按照下圖的步驟，來使得系統像一個看板拉！
<img src="https://storage.googleapis.com/homuchen.com/images/notion-kanban-4.jpg" alt="notion: add board view" loading="lazy" /></p>

<p>完成後，就可以在板上將任務拖拉移動來更改狀態，可以依照個人習慣的不同，每天或每個禮拜，
決定好要先專注於哪些任務。</p>

<h2 id="新增timeline-view">新增Timeline view</h2>
<p>再新增一個timeline view，步驟如下圖:
<img src="https://storage.googleapis.com/homuchen.com/images/notion-kanban-5.jpg" alt="notion: add timeline view" loading="lazy" /></p>

<p>可以看到紅線的位置就是當天，有了這張圖表，就可以一目瞭然的看出，
哪些任務已經快可以開始或是截止日期已經逼近了，可以據此來調整你的優先事項唷！</p>

<h1 id="總結">總結</h1>
<p>今天簡單地分享了好的待辦清單系統應該要具有的原則: 截止日期、不能太長、與目標連結，
也認識了一個常見於敏捷開發團隊的系統: 看板(Kanban)，最後使用了Notion來實作。</p>

<p>祝大家生產力高高，每天都可以順利地往自己的目標邁進！ 掰掰～👋</p>]]></content><author><name>HoMuChen</name></author><category term="生活" /><category term="notion" /><category term="productivity" /><category term="kanban" /><summary type="html"><![CDATA[待辦清單系統應該具有哪些原則，什麼是Kanban， 以及我如何使用Notion，來打造自己的Kanban based的待辦清單系統]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://storage.googleapis.com/homuchen.com/images/notion-kanban-0.jpg" /><media:content medium="image" url="https://storage.googleapis.com/homuchen.com/images/notion-kanban-0.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">為什麼逛完IKEA要來隻霜淇淋: 峰終定律</title><link href="https://homuchen.com/posts/peak-end-rule/" rel="alternate" type="text/html" title="為什麼逛完IKEA要來隻霜淇淋: 峰終定律" /><published>2022-05-16T22:12:00+08:00</published><updated>2022-05-16T22:12:00+08:00</updated><id>https://homuchen.com/posts/peak-end-rule</id><content type="html" xml:base="https://homuchen.com/posts/peak-end-rule/"><![CDATA[<p>為什麼IKEA會在最後結帳區的前後，設置餐廳區及有賣霜淇淋的小吃部呢？
這麼做對我們購物的體驗有什麼影響嗎？<strong>峰終定律</strong>可能可以給我們一點答案。</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/peak-end-rule-1.jpg" alt="IKEA 冰淇淋" /></p>

<h1 id="什麼是峰終定律">什麼是峰終定律</h1>
<p>我們對於過去的一段經驗及體驗的記憶，主要由兩個部分決定: <strong>高峰</strong>時於<strong>結束</strong>時的感覺。</p>

<p>這是由著名的心理學和經濟學家<a href="https://zh.wikipedia.org/zh-tw/%E4%B8%B9%E5%B0%BC%E5%B0%94%C2%B7%E5%8D%A1%E5%B0%BC%E6%9B%BC" target="_blank"><strong>丹尼爾．康納曼（Daniel Kahneman）</strong></a>所提出，他也做了以下實驗來證實這個理論。</p>

<h1 id="結腸鏡實驗1">結腸鏡實驗<a href="#1">[1]</a></h1>
<p>照胃鏡腸鏡總是一個令人不悅的體驗，實驗將受試者分成兩組，對照組如往常一樣，照完腸鏡就結束，
而實驗組則在照完腸鏡結束後，還繼續將腸鏡放在腸子裡一段時間不動，不動的時候就比較沒有那麼不舒服。</p>

<p>事後詢問兩組實驗對象對於腸鏡體驗的感受，結果竟然是實驗組覺得體驗較佳！
總的來說，他們承受了更多不適的時間，卻因為最後的時間比較沒那麼不舒服，就使得他們對於整段體驗的感受有更好的評價！</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/peak-end-rule-2.jpg" alt="峰終定律: 結腸鏡實驗" /></p>

<h1 id="噪音實驗">噪音實驗</h1>
<p>另一個實驗則是使用噪音作為不悅的體驗來源，實驗對象分別要聽兩段噪音，第一段是持續八分鐘的痛苦噪音，
第二段是八分鐘的痛苦噪音再加上八分鐘的輕微噪音，結束後請受試者再聽一次，他們可以選擇要聽哪一段，
結果竟然有更多的人選擇聽第二段噪音！！</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/peak-end-rule-3.jpg" alt="峰終定律: 噪音實驗" /></p>

<h1 id="人是不理性的">人是不理性的</h1>
<p>有沒有覺得那些受試者很笨，但人就是這樣，許多時候都是不理性的，人類的判斷會有許多失誤
許多心理學的研究及書籍就是在探討這一議題，比如
康納曼的<a href="https://www.books.com.tw/products/0010780181" target="_blank"><strong>《快思慢想》</strong></a>及
<a href="https://www.books.com.tw/products/0010893007" target="_blank"><strong>《雜訊》</strong></a>，
巴菲特的事業夥伴蒙格所推薦的<a href="https://www.books.com.tw/products/0010757786" target="_blank"><strong>《影響力：讓人乖乖聽話的說服術》</strong></a>，
這一本我覺得比起康納曼的書，要易讀許多～</p>

<p>而這一心理學領域與經濟學結合，就衍伸出一個新的經濟學領域: <a href="#2">行為經濟學</a>，
不再使用以往經濟學所假設的<strong>理性經濟人</strong>模型，而是將人性、不理性的一面也一併納入考量，
相關的書籍有像是<a href="https://www.books.com.tw/products/0010716217" target="_blank"><strong>《不當行為》</strong></a>
及<a href="https://www.books.com.tw/products/0010785897" target="_blank"><strong>《金錢心理學》</strong></a>。</p>

<p>延伸閱讀:</p>
<ul>
  <li><a href="/posts/book-note-money-psychology/" target="_blank"><strong>[讀書筆記] 金錢心理學: 打破你對金錢的迷思，學會聰明花費 (上)</strong></a></li>
  <li><a href="/posts/book-note-dollars-and-sense/" target="_blank"><strong>[讀書筆記] 金錢心理學: 打破你對金錢的迷思，學會聰明花費 (下)</strong></a></li>
</ul>

<h1 id="結論">結論</h1>
<p>IKEA在逛街購物的尾端，擺上令人心滿意足的小吃及霜淇淋，企圖為這次的體驗加分。</p>

<p>而人時常是不理性的動物，這篇文章所分享的峰終定律，
顯示出我們人類對於過去的經驗記憶，可能時常是有偏差的。但反過來，
我們也可以利用這點，來為自己創造出更好的體驗！</p>

<p>記得每次結束一整天約會後，
要給你的情人來一個大大的擁抱或是kiss goodbye，做為這次約會的美好結尾唷～❤️</p>

<h1 id="參考資料">參考資料</h1>
<ol>
  <li><a href="https://pubmed.ncbi.nlm.nih.gov/8857625/" target="_blank" id="1">Redelmeier D. A., Kahneman D. (1996). Patients’ memories of painful medical treatments: real-time and retrospective evaluations of two minimally invasive procedures.</a></li>
  <li><a href="https://zh.m.wikipedia.org/zh-tw/%E8%A1%8C%E7%82%BA%E7%B6%93%E6%BF%9F%E5%AD%B8" target="_blank" id="2">行為經濟學</a></li>
</ol>]]></content><author><name>HoMuChen</name></author><category term="生活" /><category term="psychology" /><summary type="html"><![CDATA[為什麼IKEA會在最後結帳區的前後，設置餐廳區及有賣霜淇淋的小吃部呢？ 這麼做對我們購物的體驗有什麼影響嗎？峰終定律可能可以給我們一點答案。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://storage.googleapis.com/homuchen.com/images/peak-end-rule-1.jpg" /><media:content medium="image" url="https://storage.googleapis.com/homuchen.com/images/peak-end-rule-1.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>