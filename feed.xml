<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-tw"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://homuchen.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://homuchen.com/" rel="alternate" type="text/html" hreflang="zh-tw" /><updated>2022-06-07T00:09:14+08:00</updated><id>https://homuchen.com/feed.xml</id><title type="html">HoMuChen</title><subtitle>Hi! This is HoMuchen, 陳河穆. I am a software engineer working at Largitdata now. This is where I record whatever I learned.</subtitle><entry><title type="html">HTTP API: 該如何管理一份很大的OpenAPI document？</title><link href="https://homuchen.com/posts/how-to-manage-a-large-openapi-document-file/" rel="alternate" type="text/html" title="HTTP API: 該如何管理一份很大的OpenAPI document？" /><published>2022-06-07T00:07:00+08:00</published><updated>2022-06-07T00:07:00+08:00</updated><id>https://homuchen.com/posts/how-to-manage-a-large-openapi-document-file</id><content type="html" xml:base="https://homuchen.com/posts/how-to-manage-a-large-openapi-document-file/"><![CDATA[<p>OpenAPI的document文件可以變得非常大一份，特別是當你有好幾百個routes的時候，
這時候單一份的yaml檔管理起來可能會非常頭大，這篇文章將分享在這種情況下，
我是如何將一份大的檔案拆分成許多小的檔案，易於管理。</p>

<h1 id="openapi-specification">OpenAPI Specification</h1>
<p>OpenAPI也被稱為Swagger，是一個用來描述你的API的標準，可以根據這個標準來撰寫你的文件，
我想你應該很熟悉了，如果還不熟的，
可以先看看官方的說明: <a href="https://swagger.io/specification/" target="_blank">OpenAPI specification</a>。</p>

<h1 id="我如何拆分檔案">我如何拆分檔案</h1>
<h2 id="使用json格式">使用JSON格式</h2>
<p>官網上的範例文件都是使用yaml，而我偏好使用JSON，基於以下幾個理由：</p>

<ul>
  <li>許多語言都內建支援JSON格式，尤其是javascript，JSON的J就是這樣來的。</li>
  <li>可以直接由程式控制，將需要共用的(<strong>response</strong>、<strong>schema</strong>、<strong>parameter</strong>)寫在不同檔案，要用的時候在import進來就好。</li>
  <li>除了以上常常會需要共用的，造成spec檔案會變的很大的一個因素就是有太多的<strong>path</strong>，也能將path依照你想要方式做拆分。</li>
</ul>

<p>寫起來就會像是下面這樣:</p>

<h3 id="indexjs">index.js</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">schemas</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./components/schemas</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">securitySchemes</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./components/securitySchemes</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">parameters</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./components/parameters</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">responses</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./components/responses</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">paths</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./paths</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">openapi</span><span class="p">:</span> <span class="dl">'</span><span class="s1">3.0.0</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">info</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Example API Overview</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">version</span><span class="p">:</span> <span class="dl">'</span><span class="s1">1.0.0</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">contact</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">API Support</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">email</span><span class="p">:</span> <span class="dl">'</span><span class="s1">b98901052@ntu.edu.tw</span><span class="dl">'</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="na">servers</span><span class="p">:</span> <span class="p">[{</span>
    <span class="na">url</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/api/v1</span><span class="dl">'</span>
  <span class="p">}],</span>
  <span class="na">components</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">schemas</span><span class="p">:</span> <span class="nx">schemas</span><span class="p">,</span>
    <span class="na">parameters</span><span class="p">:</span> <span class="nx">parameters</span><span class="p">,</span>
    <span class="na">responses</span><span class="p">:</span> <span class="nx">responses</span><span class="p">,</span>
    <span class="na">securitySchemes</span><span class="p">:</span> <span class="nx">securitySchemes</span>
  <span class="p">},</span>
  <span class="na">paths</span><span class="p">:</span> <span class="nx">paths</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="pathsjs">paths.js</h3>
<p>可能就會長得像下面這樣:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">pets</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./pets</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">users</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./users</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">stores</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./stores</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">...</span><span class="nx">pets</span><span class="p">,</span>
  <span class="p">...</span><span class="nx">users</span><span class="p">,</span>
  <span class="p">...</span><span class="nx">stores</span><span class="p">,</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>可以將所有<code class="language-plaintext highlighter-rouge">/pets</code>開頭的路由放到<code class="language-plaintext highlighter-rouge">pets.js</code>，以此類推，如此一來就便於管理，
不會有一份檔案裡頭有好幾百個path，
可以更快地知道要修改一個endpoints要去到哪一支相對應的檔案。</p>

<h2 id="輸出">輸出</h2>
<p>當你要輸出JSON檔時，只需要把上述<code class="language-plaintext highlighter-rouge">Object</code>做一個<code class="language-plaintext highlighter-rouge">JSON.stringify</code>就行，或是依賴其他套件轉成<code class="language-plaintext highlighter-rouge">YAML</code>的格式。</p>

<h2 id="限制">限制</h2>
<p>但前提是你使用的動態語言，像是<code class="language-plaintext highlighter-rouge">javascript</code>、<code class="language-plaintext highlighter-rouge">python</code>等等，才有這樣方便的好處。</p>

<h2 id="就是想用yaml">就是想用YAML</h2>
<p>其實不用JSON也是可以，上述的方法一樣可以套用到YAML檔，
也就是將一些可以重複使用的schema、response，以及拆分出來的path們放到不同的檔案，
只是可能需要依賴一些額外的library來幫你做合併的動作。</p>

<p>像是<a href="https://github.com/APIDevTools/swagger-cli" target="_blank">swagger-cli</a>，
就可以讓你把<code class="language-plaintext highlighter-rouge">$ref</code>的目標，放到不同的檔案。</p>

<h1 id="總結">總結</h1>
<p>想要拆分一份大的OpenAPI spec檔以便於管理，核心的關鍵就跟寫程式是一樣的，DRY(Don’t repeat yourself)，
將會重複使用的部分拆出來，在原先的OpenAPI spec也能做到，就是使用<code class="language-plaintext highlighter-rouge">$ref</code>，
但今天更近一步跟大家分享將其寫在不同的檔案的方法: 使用<code class="language-plaintext highlighter-rouge">JSON</code>格式、利用其他套件<code class="language-plaintext highlighter-rouge">swagger-cli</code>。</p>

<p>希望以上的內容對你有一丁點的幫助！掰掰～👋</p>]]></content><author><name>HoMuChen</name></author><category term="Web Development" /><category term="http" /><category term="restful api" /><category term="api" /><category term="openapi" /><summary type="html"><![CDATA[OpenAPI的document文件可以變得非常大一份，特別是當你有好幾百個routes的時候， 這時候單一份的yaml檔管理起來可能會非常頭大，這篇文章將分享在這種情況下， 我是如何將一份大的檔案拆分成許多小的檔案，易於管理。]]></summary></entry><entry><title type="html">如何使用Notion打造Kanban based的待辦清單</title><link href="https://homuchen.com/posts/notion-kanban-board/" rel="alternate" type="text/html" title="如何使用Notion打造Kanban based的待辦清單" /><published>2022-06-04T00:02:00+08:00</published><updated>2022-06-04T00:02:00+08:00</updated><id>https://homuchen.com/posts/notion-kanban-board</id><content type="html" xml:base="https://homuchen.com/posts/notion-kanban-board/"><![CDATA[<p>待辦清單的首要任務是幫助我們整理心智，在眾多的選擇中，優先認出當下最該先執行的事項，
而不會被一堆的事項搞到非常憂慮，什麼都想做卻什麼都做不好，甚至是都沒有開始做。</p>

<p>這篇文章將簡單分享我認為<strong>待辦清單系統應該具有哪些原則</strong>，什麼是<strong>Kanban</strong>，
以及我如何使用<strong>Notion</strong>，來打造自己的Kanban based的待辦清單系統，Let’s go！</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/notion-kanban-0.jpg" alt="notion kanban todo list system" loading="lazy" /></p>

<h1 id="三大待辦清單原則">三大待辦清單原則</h1>
<p>市面上的待辦事項系統玲瑯滿目，有沒有一些基本的原則是我們可以把握的呢？以下為大家簡單總結出三項原則：</p>

<ul>
  <li>
    <p><strong>要有截止日期:</strong>
沒有截止日期，沒有急迫性，大家就是會拖，懶就是人的天性，我想不用多說什麼，大家應該多少都能感同身受吧😂</p>
  </li>
  <li>
    <p><strong>清單不能太長:</strong>
選項太多也會導致不知道要選哪一項任務來進行，也就是<strong>決策癱瘓</strong>，就算費力地做了選擇，也會導致<strong>決策疲勞</strong>，
耗費了許多能量在決策上。</p>
  </li>
  <li>
    <p><strong>與目標連結:</strong>
要知道<strong>為什麼</strong>要做每項任務，它必須可以幫助你達成某項目標，否則做了很多事，很可能只是在瞎忙。</p>
  </li>
</ul>

<p><img src="https://storage.googleapis.com/homuchen.com/images/book-note-to-do-3.jpg" alt="todo list system principles" loading="lazy" /></p>

<p>關於待辦清單的原則，想看更詳盡的解釋，可以參考我之前寫過的一篇文章:</p>

<p><a href="/posts/book-note-todo-list-formula/" target="_blank"><strong>掌握這3個原則，打造出最適合自己的代辦清單系統</strong></a></p>

<h1 id="kanban是什麼">Kanban是什麼</h1>
<p>Kanban緣起於Toyota的生產管理系統，看起來就像是下圖這樣:</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/book-note-to-do-5.jpg" alt="看板系統" loading="lazy" /></p>

<p>主要組成有<strong>欄(column)</strong>、<strong>列</strong>、<strong>卡片(card)</strong>、<strong>WIP limit</strong>，每張卡片即是一項任務，
可以將相關的任務放在同一欄，也可以使用顏色分類，並在每一列區分出<strong>未開始</strong>、<strong>進行中</strong>及<strong>完成</strong>，
而進行中的任務數量會有一個上限，也就是WIP limit(Work in Progress Limit)。</p>

<h2 id="組成">組成</h2>
<ul>
  <li><strong>Cards</strong>: 每一張卡片即代表一個任務事項。</li>
  <li><strong>Columns</strong>: Kanban最明顯的特徵就是有著不同狀態的直欄: <strong>未開始</strong>、<strong>進行中</strong>及<strong>完成</strong>，
藉著將卡片移動來移動去以及視覺化，能夠對當前的進度及狀態一目瞭然。</li>
  <li><strong>WIP limit</strong>: 而對於進行中的那一欄，有一個卡片的數量上限限制，可以避免我們任務越積越多，
並且首先專注於最重要的幾件事上。</li>
</ul>

<h2 id="好處">好處</h2>
<ul>
  <li><strong>視覺化</strong>: 對於所以進行中及未開始的能夠一目瞭然，如果是一個團隊，
成員間也能迅速地同步所有任務事項的狀態。</li>
  <li><strong>決定優先事項</strong>: 每個當下只需專注於進行中的事項，把他們做完之前，不需要擔心其他的事，
可以減少心智負擔，也不用擔心是否會忘掉其他任務，因為你有把它們寫在未開始的那欄。</li>
</ul>

<h1 id="使用notion來實作">使用Notion來實作</h1>
<p>最後也是最重要的，將利用Notion這套軟體，來打造自己的Kanban，
並且可以符合上述說的三個原則: <strong>有截止日期</strong>、<strong>不能太長</strong>、<strong>與目標連結</strong>。</p>

<p>原本的Kanban系統因為有WIP limit的關係，有符合清單不能太長的原則，
但缺少了截止日期及與特定目標連結，
接下來我將一步一步地示範如何利用<a href="https://www.notion.so/" target="_blank"><strong>Notion</strong></a>，
來完善我們Kanban待辦清單系統！</p>

<h2 id="建立表格">建立表格</h2>
<p>首先第一步，新增一個頁面，並且選擇<strong>Table</strong>。
<img src="https://storage.googleapis.com/homuchen.com/images/notion-kanban-1.jpg" alt="notion: create a table" loading="lazy" /></p>

<p>接著系統會要你選擇資料來源，這邊就選<strong>New database</strong>。
<img src="https://storage.googleapis.com/homuchen.com/images/notion-kanban-2.jpg" alt="notion: create a table" loading="lazy" /></p>

<h2 id="新增欄位">新增欄位</h2>
<p>現在需要來定義我們的資料庫裡需要的欄位了，這邊我們是會需要名稱、任務狀態、截至日期、目標或專案。
<img src="https://storage.googleapis.com/homuchen.com/images/notion-kanban-3.jpg" alt="notion: create columns" loading="lazy" /></p>

<ol>
  <li>
    <p>狀態(Status): 為一個單選欄，主要的狀態就分為未開始、進行中、已完成，可以取用自己喜歡的名字，
也可以有更多的狀態，這邊最主要的目的就是區分出進行中的任務。</p>
  </li>
  <li>
    <p>目標或專案(Project): 每個任務會有附屬於一個目標或是專案之下，記錄下來，可以知道為什麼要做這個任務，
當事項太多時，也可以利用這個欄位來做篩選。</p>
  </li>
  <li>
    <p>截止日期或時間區間(Deadline): 加上截止日期，為自己增加急迫性，否則就很容易一拖再拖，
後續也會利用這個欄位來建立timeline的視覺畫圖表，有利於我們使用截止日期來決定哪些任務應該趕快開始進行。</p>
  </li>
</ol>

<h2 id="新增board-view">新增Board view</h2>
<p>建立好資料後，就可以使用board view的功能，按照下圖的步驟，來使得系統像一個看板拉！
<img src="https://storage.googleapis.com/homuchen.com/images/notion-kanban-4.jpg" alt="notion: add board view" loading="lazy" /></p>

<p>完成後，就可以在板上將任務拖拉移動來更改狀態，可以依照個人習慣的不同，每天或每個禮拜，
決定好要先專注於哪些任務。</p>

<h2 id="新增timeline-view">新增Timeline view</h2>
<p>再新增一個timeline view，步驟如下圖:
<img src="https://storage.googleapis.com/homuchen.com/images/notion-kanban-5.jpg" alt="notion: add timeline view" loading="lazy" /></p>

<p>可以看到紅線的位置就是當天，有了這張圖表，就可以一目瞭然的看出，
哪些任務已經快可以開始或是截止日期已經逼近了，可以據此來調整你的優先事項唷！</p>

<h1 id="總結">總結</h1>
<p>今天簡單地分享了好的待辦清單系統應該要具有的原則: 截止日期、不能太長、與目標連結，
也認識了一個常見於敏捷開發團隊的系統: 看板(Kanban)，最後使用了Notion來實作。</p>

<p>祝大家生產力高高，每天都可以順利地往自己的目標邁進！ 掰掰～👋</p>]]></content><author><name>HoMuChen</name></author><category term="生活" /><category term="notion" /><category term="productivity" /><category term="kanban" /><summary type="html"><![CDATA[待辦清單系統應該具有哪些原則，什麼是Kanban， 以及我如何使用Notion，來打造自己的Kanban based的待辦清單系統]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://storage.googleapis.com/homuchen.com/images/notion-kanban-0.jpg" /><media:content medium="image" url="https://storage.googleapis.com/homuchen.com/images/notion-kanban-0.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">為什麼逛完IKEA要來隻霜淇淋: 峰終定律</title><link href="https://homuchen.com/posts/peak-end-rule/" rel="alternate" type="text/html" title="為什麼逛完IKEA要來隻霜淇淋: 峰終定律" /><published>2022-05-16T22:12:00+08:00</published><updated>2022-05-16T22:12:00+08:00</updated><id>https://homuchen.com/posts/peak-end-rule</id><content type="html" xml:base="https://homuchen.com/posts/peak-end-rule/"><![CDATA[<p>為什麼IKEA會在最後結帳區的前後，設置餐廳區及有賣霜淇淋的小吃部呢？
這麼做對我們購物的體驗有什麼影響嗎？<strong>峰終定律</strong>可能可以給我們一點答案。</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/peak-end-rule-1.jpg" alt="IKEA 冰淇淋" /></p>

<h1 id="什麼是峰終定律">什麼是峰終定律</h1>
<p>我們對於過去的一段經驗及體驗的記憶，主要由兩個部分決定: <strong>高峰</strong>時於<strong>結束</strong>時的感覺。</p>

<p>這是由著名的心理學和經濟學家<a href="https://zh.wikipedia.org/zh-tw/%E4%B8%B9%E5%B0%BC%E5%B0%94%C2%B7%E5%8D%A1%E5%B0%BC%E6%9B%BC" target="_blank"><strong>丹尼爾．康納曼（Daniel Kahneman）</strong></a>所提出，他也做了以下實驗來證實這個理論。</p>

<h1 id="結腸鏡實驗1">結腸鏡實驗<a href="#1">[1]</a></h1>
<p>照胃鏡腸鏡總是一個令人不悅的體驗，實驗將受試者分成兩組，對照組如往常一樣，照完腸鏡就結束，
而實驗組則在照完腸鏡結束後，還繼續將腸鏡放在腸子裡一段時間不動，不動的時候就比較沒有那麼不舒服。</p>

<p>事後詢問兩組實驗對象對於腸鏡體驗的感受，結果竟然是實驗組覺得體驗較佳！
總的來說，他們承受了更多不適的時間，卻因為最後的時間比較沒那麼不舒服，就使得他們對於整段體驗的感受有更好的評價！</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/peak-end-rule-2.jpg" alt="峰終定律: 結腸鏡實驗" /></p>

<h1 id="噪音實驗">噪音實驗</h1>
<p>另一個實驗則是使用噪音作為不悅的體驗來源，實驗對象分別要聽兩段噪音，第一段是持續八分鐘的痛苦噪音，
第二段是八分鐘的痛苦噪音再加上八分鐘的輕微噪音，結束後請受試者再聽一次，他們可以選擇要聽哪一段，
結果竟然有更多的人選擇聽第二段噪音！！</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/peak-end-rule-3.jpg" alt="峰終定律: 噪音實驗" /></p>

<h1 id="人是不理性的">人是不理性的</h1>
<p>有沒有覺得那些受試者很笨，但人就是這樣，許多時候都是不理性的，人類的判斷會有許多失誤
許多心理學的研究及書籍就是在探討這一議題，比如
康納曼的<a href="https://www.books.com.tw/products/0010780181" target="_blank"><strong>《快思慢想》</strong></a>及
<a href="https://www.books.com.tw/products/0010893007" target="_blank"><strong>《雜訊》</strong></a>，
巴菲特的事業夥伴蒙格所推薦的<a href="https://www.books.com.tw/products/0010757786" target="_blank"><strong>《影響力：讓人乖乖聽話的說服術》</strong></a>，
這一本我覺得比起康納曼的書，要易讀許多～</p>

<p>而這一心理學領域與經濟學結合，就衍伸出一個新的經濟學領域: <a href="#2">行為經濟學</a>，
不再使用以往經濟學所假設的<strong>理性經濟人</strong>模型，而是將人性、不理性的一面也一併納入考量，
相關的書籍有像是<a href="https://www.books.com.tw/products/0010716217" target="_blank"><strong>《不當行為》</strong></a>
及<a href="https://www.books.com.tw/products/0010785897" target="_blank"><strong>《金錢心理學》</strong></a>。</p>

<p>延伸閱讀:</p>
<ul>
  <li><a href="/posts/book-note-money-psychology/" target="_blank"><strong>[讀書筆記] 金錢心理學: 打破你對金錢的迷思，學會聰明花費 (上)</strong></a></li>
  <li><a href="/posts/book-note-dollars-and-sense/" target="_blank"><strong>[讀書筆記] 金錢心理學: 打破你對金錢的迷思，學會聰明花費 (下)</strong></a></li>
</ul>

<h1 id="結論">結論</h1>
<p>IKEA在逛街購物的尾端，擺上令人心滿意足的小吃及霜淇淋，企圖為這次的體驗加分。</p>

<p>而人時常是不理性的動物，這篇文章所分享的峰終定律，
顯示出我們人類對於過去的經驗記憶，可能時常是有偏差的。但反過來，
我們也可以利用這點，來為自己創造出更好的體驗！</p>

<p>記得每次結束一整天約會後，
要給你的情人來一個大大的擁抱或是kiss goodbye，做為這次約會的美好結尾唷～❤️</p>

<h1 id="參考資料">參考資料</h1>
<ol>
  <li><a href="https://pubmed.ncbi.nlm.nih.gov/8857625/" target="_blank" id="1">Redelmeier D. A., Kahneman D. (1996). Patients’ memories of painful medical treatments: real-time and retrospective evaluations of two minimally invasive procedures.</a></li>
  <li><a href="https://zh.m.wikipedia.org/zh-tw/%E8%A1%8C%E7%82%BA%E7%B6%93%E6%BF%9F%E5%AD%B8" target="_blank" id="2">行為經濟學</a></li>
</ol>]]></content><author><name>HoMuChen</name></author><category term="生活" /><category term="psychology" /><summary type="html"><![CDATA[為什麼IKEA會在最後結帳區的前後，設置餐廳區及有賣霜淇淋的小吃部呢？ 這麼做對我們購物的體驗有什麼影響嗎？峰終定律可能可以給我們一點答案。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://storage.googleapis.com/homuchen.com/images/peak-end-rule-1.jpg" /><media:content medium="image" url="https://storage.googleapis.com/homuchen.com/images/peak-end-rule-1.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">架設個人網站、撰寫部落格帶給我的5個好處</title><link href="https://homuchen.com/posts/advantages-personal-website-and-blog-brings-to-me/" rel="alternate" type="text/html" title="架設個人網站、撰寫部落格帶給我的5個好處" /><published>2022-05-08T20:31:00+08:00</published><updated>2022-05-08T20:31:00+08:00</updated><id>https://homuchen.com/posts/advantages-personal-website-and-blog-brings-to-me</id><content type="html" xml:base="https://homuchen.com/posts/advantages-personal-website-and-blog-brings-to-me/"><![CDATA[<p>開始認真規律的寫部落格寫到現在，大概過了近一年的時間，這篇文章將分享
寫部落格帶給了我哪些好處:</p>

<ul>
  <li>積極學習</li>
  <li>豐富生活</li>
  <li>分享輸出</li>
  <li>個人品牌</li>
  <li>SEO知識及Markdown語法</li>
</ul>

<p><img src="https://storage.googleapis.com/homuchen.com/images/personal-blog-advantages.jpg" alt="personal blog advantages" loading="lazy" /></p>

<h1 id="積極學習">積極學習</h1>
<p>當你需要規律的有產出的時候，等於變相地要求自己有所學習及成長，如果寫不出來，
就代表最近這些日子沒有什麼長進了😂</p>

<p>寫作就是 <strong>輸入</strong> + <strong>處理</strong> + <strong>輸出</strong>，不管是工作專業上的、一般的閱讀或是實踐一些新得到的想法都好，
為了要有東西輸出，就會逼自己持續的輸入及思考。</p>

<h1 id="豐富生活">豐富生活</h1>
<p>除了成長之外，適當的休息及玩樂也是必要的！但休閒娛樂也有分為被動及主動的，
低品質及高品質的活動。</p>

<p>躺在沙發上吃垃圾食物看劇是一種休閒，研究室內設計，
準備DIY改造房間也是一種休閒，都很有趣！我也喜歡耍廢！但是收穫到的卻是截然不同的！</p>

<p>在<a href="https://www.books.com.tw/products/0010814436" target="_blank"><strong>《要忙, 就忙得有意義》</strong></a>一書裡有提到，
該如何讓我們的一生過得充實，完成很多事呢？其實很多時候只是我們忘記了，我們沒有創造出值得記憶的事物，
比如你每天的通勤一小時，如果都是不假思索，
同一路線上班下班，就這樣過了30年，在那7800個小時裡(1x5x52x30)，你會記得什麼呢?</p>

<p>那如果你一天換個交通方式，一天繞個路去探索別家早餐店，是不是就彷彿記得更多的事，擁有了更多時間呢？
所以每天可以問問自己: <strong>今天跟昨天有什麼不一樣呢？</strong></p>

<h1 id="分享輸出">分享輸出</h1>
<p>透過寫作輸出，可以讓我的學習更加地深刻，大家都知道教學就是最好的學習，當你要去教導別人一個概念時，
如果自己理解得不夠清楚，就可能會卡關，所以可以趁著寫作輸出時，找出自己還不是理解得很透徹的點。</p>

<p>延伸閱讀:</p>
<ul>
  <li><a href="/posts/book-notes-output/" target="_blank"><strong>[讀書筆記] 最高學以致用法: 讓學習發揮最大成果的輸出大全</strong></a></li>
</ul>

<h1 id="個人品牌">個人品牌</h1>
<p>曾經有位素不謀面的朋友的朋友，表示他願意幫我看我的履歷，並且向他們公司(全球市值前10)進行內部推薦，
問他為什麼願意這樣幫助我呢？他說因為他看過了我的部落格！</p>

<p>這就是自我營銷、個人品牌的強大，在現今網路發達的年代，將自己行銷出去的門檻變得非常低，
部落格(或其他平台)不僅可以讓大家認識你，各種機會也會自己找上門來！</p>

<p>面試找工作時，公司只能透過幾次會談，在幾個小時的時間來了解你，那何不透過部落格，
讓他們可以更多地知道你的強項！</p>

<h1 id="seo及markdown">SEO及Markdown</h1>
<p>技術面上的收穫，就是了解到更多關於SEO的知識，既然都花心力寫了，當然還是會想要觸及到更多的群眾，
不過我覺得還是真誠且有價值的內容才是最重要的，只是SEO的一些知識，可以幫你加速這個過程。</p>

<p>而我的部落格是用Jekyll建置的，是一個基於markdown語法來產出靜態網頁的程式，所以我在寫文章時，
都是對著黑白畫面的文字介面，也讓我更熟悉了markdown語法～</p>

<h1 id="結論">結論</h1>
<p>最一開始寫作的初衷，就只是為了讓自己的學習可以更加深刻，不過後來發現它帶來了許多的好處，
其中最主要的，就是會<strong>讓生活變得更加地充實</strong>！有意識的、好好地度過每一天，
而不是虛度光陰，等到老的時候，想不起來這輩子都到底幹了些什麼😂</p>

<p>這邊簡單地跟大家分享～希望對大家有一丁點兒的幫助，掰掰～👋</p>]]></content><author><name>HoMuChen</name></author><category term="生活" /><category term="self improvement" /><summary type="html"><![CDATA[開始認真規律的寫部落格寫到現在，大概過了近一年的時間，這篇文章將分享 寫部落格帶給了我哪些好處:]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://storage.googleapis.com/homuchen.com/images/personal-blog-advantages.jpg" /><media:content medium="image" url="https://storage.googleapis.com/homuchen.com/images/personal-blog-advantages.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">掌握這3個原則，打造出最適合自己的代辦清單系統</title><link href="https://homuchen.com/posts/book-note-todo-list-formula/" rel="alternate" type="text/html" title="掌握這3個原則，打造出最適合自己的代辦清單系統" /><published>2022-05-05T17:18:00+08:00</published><updated>2022-05-05T17:18:00+08:00</updated><id>https://homuchen.com/posts/book-note-todo-list-formula</id><content type="html" xml:base="https://homuchen.com/posts/book-note-todo-list-formula/"><![CDATA[<p>這篇文章將探討為何要使用待辦清單系統，有哪些基本的原則，並分析現存各種待辦清單系統的優缺點，
了解他們分別滿足及不滿足哪些原則，好讓我們可以應用這些原則，設計最適合你自己的待辦清單系統。</p>

<h1 id="為何要使用待辦清單">為何要使用待辦清單</h1>

<p><img src="https://storage.googleapis.com/homuchen.com/images/book-note-to-do-2.jpg" alt="why should we use todo list system" loading="lazy" /></p>

<h2 id="決定優先順序">決定優先順序</h2>
<p>決定好每時每刻，當下應該要應該要專注的事，就是待辦事項系統是最大的價值。</p>

<p>待辦事項的目標並不是要讓你完成更多的事，也不是要你把所有的項目都上上去，
然後專心於把全部都打上勾勾，而是讓我們知道該<strong>優先</strong>做哪些任務，專注於<strong>高價值</strong>的事！</p>

<h2 id="幫助達成目標">幫助達成目標</h2>
<p>並不是所有的事都值得要去做，當有一件事項出現時，不管他是自己想到的還是別人的要求的，
知道<strong>為什麼</strong>要做它是很重要的，它必須符合公司的目標、團隊的目標或者是自己的目標。</p>

<p>每個事項都是用來幫助你達成某個目標才是有意義的，否則就容易陷入很忙卻是在瞎忙的狀態！</p>

<h2 id="減輕壓力">減輕壓力</h2>
<p>將待辦事項寫下來，能夠使它不在縈繞於腦海之中。或許你也有過這樣的經驗，
要做的事情很多，心心念念擔心著未完成的事，結果睡不著甚至做惡夢。</p>

<p>將待辦事項寫下來，並決定好優先順序，就能一次專注於當下的工作，
也不用擔心會忘記其他的事項，並隨著事項一個一個的完成，
感到一步步朝著目標前進的信心，就能夠減輕許多的心理壓力。</p>

<h1 id="三個大原則">三個大原則</h1>
<p>待辦事項系統玲瑯滿目，有沒有一些基本的原則是我們可以把握的呢？以下為大家簡單總結出三個原則：</p>

<ul>
  <li>清單必須要有截止日期</li>
  <li>清單不能太長</li>
  <li>每項任務要有背景，並與特別目標連結</li>
</ul>

<p><img src="https://storage.googleapis.com/homuchen.com/images/book-note-to-do-3.jpg" alt="todo list system principles" loading="lazy" /></p>

<h2 id="要有截止日期">要有截止日期</h2>
<p>如果沒有截止日期，它就只是一個願望清單，缺少了急迫性，就像信用卡帳單、稅單一樣，你會拖到最後一刻才去繳費。</p>

<blockquote>
  <p>Parkinson’s Law：Work expands so as to fill the time available for its completion.</p>
</blockquote>

<p><strong>帕金森定律</strong>: 工作總會填滿它可用的完成時間，給你八個小時的時間完成一項任務，你就會花八個小時把它完成；
如果你小孩生病了，必須在兩個小時之後離開公司，那你就會神奇地在兩個小時內完成工作！</p>

<h2 id="清單不能太長">清單不能太長</h2>
<p>面對一份落落長的清單及太多的選擇，會使得我們決策癱瘓，選擇太多造成難以做出選擇進而行動，
就算我們真的成功地做了一連串的抉擇，也耗費了許多心智能量，造成<strong>決策疲勞</strong>。</p>

<p>做決定跟意志力是一樣的，他們是有限的心智資源，所以可以看到許多成大事的人，
都會避免自己在小地方上需要做選擇，比如賈伯斯跟祖克柏每天都穿一樣的衣服，
艾因斯坦也是一樣的灰西裝一直穿。</p>

<p>並且太長的清單，也會使你覺得有一堆未完成事項而感到沮喪。</p>

<p>有哪些方法可以幫助清單不要太長呢？</p>

<ul>
  <li>區隔出當前任務及未來任務</li>
  <li>篩選: 可以在兩分鐘之內做完的事，就直接做完，跟達成目標願景無關的事，也不值得寫下來去做。</li>
  <li>分類: 可以依據目標、專案、時間、地點任何你想要的方式分類，每一類的清單就不會太長。</li>
</ul>

<h2 id="與特定目標連結">與特定目標連結</h2>
<p>任務間要有關聯，要知道情境也就是<strong>為什麼</strong>要做這項任務，必須要有目標，
再將目標拆解出許多小的、可以行動的事項，這些事項才是真正重要的！</p>

<p>要如何將目標拆解出任務可以參考<strong>S.M.A.R.T原則</strong>，由管理學大師彼得‧杜拉克(Peter Drucker)提出，
分別為Specific（明確的）、Measurable（可衡量的）、Achievable（可達成的）、
Relevant（相關的）和Time-bound（有時限的）。</p>

<h1 id="有哪些待辦清單系統">有哪些待辦清單系統</h1>

<p><img src="https://storage.googleapis.com/homuchen.com/images/book-note-to-do-4.jpg" alt="待辦清單系統優缺點" loading="lazy" /></p>

<h2 id="全包式清單">全包式清單</h2>
<p>只要任務一出現，一想到什麼就全部寫下來</p>

<ul>
  <li>好處: 減輕大腦負擔，將未完成任務寫下來，就能卸除它們佔用你的大腦。</li>
  <li>缺點: 全部的任務寫在一起，使得清單太長難以從中做出選擇，沒有截止日期、也無法跟目標關聯。</li>
</ul>

<h2 id="任務--開始日期--截止日期">任務 + 開始日期 + 截止日期</h2>
<p>除了記下任務之外，為每項任務加上開始及截止時間</p>

<ul>
  <li>好處: 有了截止日期才有急迫性，不會落入帕金森定律的陷阱裡；並且可依日期來決定的優先事項。</li>
  <li>缺點: 沒有每項任務的情境、分類，以及跟目標的關聯。</li>
</ul>

<h2 id="總工作清單--每日工作清單">總工作清單 + 每日工作清單</h2>
<p>就像<a href="https://www.books.com.tw/products/0010803003" target="_blank"><strong>《子彈筆記》</strong></a>裡的基本元素，
Future Log、Monthly Log及Daily Log，將未來清單與近期或每日清單分開。</p>

<ul>
  <li>好處: 跟全包式清單一樣可以做到大腦傾存，區隔當前與未來任務，就能有份較短的優先清單。</li>
  <li>缺點: 沒有情境分類跟目標關聯、跟截止日期。</li>
</ul>

<h2 id="專案清單">專案清單</h2>
<p>依照專案分項，將隸屬於同一份專案的待辦事項寫於同一份清單之中。</p>

<p>比如說你今年的目標專案有出書、整修房子、夏威夷旅遊等等…在整修房子裡的待辦事項可能就會像這樣:</p>

<ul>
  <li>聯絡設計師</li>
  <li>進行諮詢，風格、需求定調</li>
  <li>購買DIY地板材料</li>
  <li>地板施工</li>
  <li>購買DIY牆壁材料</li>
  <li>牆壁施工</li>
  <li>購買傢俱</li>
  <li>組裝傢俱</li>
  <li>
    <p>軟裝擺設</p>
  </li>
  <li>好處: 每個任務之間都有關聯，並且是為特定目標前進，而每個專案的清單也不會太長。</li>
  <li>缺點: 沒有截止日期。</li>
</ul>

<h2 id="看板kanban">看板(Kanban)</h2>
<p>Kanban緣起於Toyota的生產管理系統，看起來就像是下圖這樣:</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/book-note-to-do-5.jpg" alt="看板系統" loading="lazy" /></p>

<p>主要組成有欄、列、卡片、WIP limit，每張卡片即是一項任務，可以將相關的任務放在同一欄
，並區分出<strong>未開始</strong>、<strong>進行中</strong>及<strong>完成</strong>等列，而進行中的任務數量會有一個上限。</p>

<ul>
  <li>好處: 有區分出總任務及當前任務清單，WIP limit(work in progress limit)可以定義出一個不會太長的優先事項。</li>
  <li>缺點: 沒有截止日期。</li>
</ul>

<h1 id="結論">結論</h1>
<p>綜合以上的幾點原則，有下列這些要點是我們可以行動的:</p>

<ol>
  <li>區隔當前與未來任務</li>
  <li>知道任務的背景及原因，對目標有貢獻</li>
  <li>把專案拆成多項單獨任務</li>
  <li>加上截止日期</li>
  <li>當前任務數量限制</li>
</ol>

<p>以上的內容為<a href="https://www.books.com.tw/products/0010831893" target="_blank"><strong>《一流工作者都在用的待辦清單》</strong></a>的節錄。</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/book-note-to-do-1.jpg" alt="book: To-Do List Formula: A Stress-Free Guide To Creating To-Do Lists That Work!" loading="lazy" /></p>

<p>掌握核心的原則，才能根據每個人不同的情況去做變化，依照自己的需求，就設計出最適合自己的系統！</p>

<p>而我自己是如何利用這些原則，
並搭配工具<a href="https://www.notion.so/" target="_blank"><strong>Notion</strong></a>來打造自己的Kanban based的待辦系統，
可以參考我的另一篇文章:</p>

<ul>
  <li><strong>我如何使用Notion打造Kanban based的待辦清單(TODO)</strong></li>
</ul>

<p>感謝您的閱讀～希望以上內容對大家有所幫助，並祝福大家都可以朝自己想要的生活前進！掰掰～👋</p>]]></content><author><name>HoMuChen</name></author><category term="讀書筆記" /><category term="books" /><category term="productivity" /><category term="notion" /><summary type="html"><![CDATA[待辦清單要如何設計？這本書《一流工作者都在用的待辦清單》將任務清單應該具備的原則列舉出來， 並分析各種待辦清單系統的優缺點，讓讀者可以根據自己的情況，設計出最符合自己的待辦清單！]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://storage.googleapis.com/homuchen.com/images/book-note-to-do-4.jpg" /><media:content medium="image" url="https://storage.googleapis.com/homuchen.com/images/book-note-to-do-4.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">STEPN實測: 效率對產出的影響？我應該要升級我的跑鞋嗎？</title><link href="https://homuchen.com/posts/stepn-efficiency-vs-gst-outcome-test/" rel="alternate" type="text/html" title="STEPN實測: 效率對產出的影響？我應該要升級我的跑鞋嗎？" /><published>2022-04-24T21:40:00+08:00</published><updated>2022-04-24T21:40:00+08:00</updated><id>https://homuchen.com/posts/stepn-efficiency-vs-gst-outcome-test</id><content type="html" xml:base="https://homuchen.com/posts/stepn-efficiency-vs-gst-outcome-test/"><![CDATA[<p>買了跑鞋開始跑步的大家可能會有些疑問，我應該升級我的跑鞋嗎？升級了之後，
點數要加到哪裡呢？今天這篇文章將分享我實測下來的結果，升級並提升效率值後，
但每次跑步GST的產出有多少的影響！</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/stepn-income-01.jpg" alt="STEPN shoes price" /></p>

<h1 id="實測數據">實測數據</h1>
<p>以下是我11天的十跑紀錄，每次皆為花費2能量，以5分速(12km/hr)跑10分鐘的GST的紀錄，
橫軸為鞋子的效率值，縱軸為GST產出。</p>

<h2 id="散佈圖">散佈圖</h2>
<p><img src="https://storage.googleapis.com/homuchen.com/images/stepn-eff-01.jpg" alt="STEPN: efficiency vs. gst outcome scatter chart" /></p>

<h2 id="原始數據">原始數據</h2>

<table>
  <thead>
    <tr>
      <th>效率</th>
      <th>產出(GST)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>9.7</td>
      <td>5.81</td>
    </tr>
    <tr>
      <td>14.7</td>
      <td>8.08</td>
    </tr>
    <tr>
      <td>19.7</td>
      <td>8.62</td>
    </tr>
    <tr>
      <td>24.7</td>
      <td>9.26</td>
    </tr>
    <tr>
      <td>25.3</td>
      <td>9.69</td>
    </tr>
    <tr>
      <td>25.3</td>
      <td>9.74</td>
    </tr>
    <tr>
      <td>25.3</td>
      <td>9.48</td>
    </tr>
    <tr>
      <td>27.7</td>
      <td>10.4</td>
    </tr>
    <tr>
      <td>31.7</td>
      <td>11.27</td>
    </tr>
    <tr>
      <td>35.7</td>
      <td>11.4</td>
    </tr>
    <tr>
      <td>35.7</td>
      <td>11.83</td>
    </tr>
    <tr>
      <td>35.7</td>
      <td>11.6</td>
    </tr>
    <tr>
      <td>39.7</td>
      <td>12.87</td>
    </tr>
    <tr>
      <td>39.7</td>
      <td>12.26</td>
    </tr>
  </tbody>
</table>

<h1 id="資產累積的速度">資產累積的速度</h1>
<p>讓我們從另一個角度來看是否要升級鞋子增加效率，也就是GST的累積數，分別為三種情況:</p>

<ol>
  <li>完全不升級鞋子 (假設每天產出5.5GST)</li>
  <li>持續投入，升級到效率值約為25 (假設每天產出9.5GST)</li>
  <li>持續投入，升級到效率值約為35 (假設每天產出11.5GST)</li>
</ol>

<p><img src="https://storage.googleapis.com/homuchen.com/images/stepn-eff-02.jpg" alt="STEPN: gst outcome chart group by level" /></p>

<p>可以看到將鞋升到約LV5，也就是效率值大約25的話，雖然前三天賺得幾乎得要再投入，
但7天之後，就會彎道超車將不升級的鞋比下去了。</p>

<p>如果持續投入到效率值35，15天就可以超過效率值25的鞋，並且之後每天約多產出2GST。</p>

<h1 id="結論">結論</h1>
<p>如果你認為這個項目會持續一兩個月以上都還不會死掉的話，
那將鞋子升級到9等會是比較好的做法(如果你有要跑步賺錢的話)，
在高上去的等級我就沒有測試了。</p>

<p>為什麼是停在9等呢？因為從九升到十會需要30GST，CP值比較低，不過LV10的鞋可以出租，
等之後開放出租的時候再來升等吧！</p>

<p>想知道完整遊戲收入情況的，可以看我之前寫過的一篇文章:</p>

<ul>
  <li><a href="/posts/stepn-record-everyday-income/" target="_blank"><strong>STEPN: 從2022-04-10進場至今的收益紀錄</strong></a></li>
</ul>]]></content><author><name>HoMuChen</name></author><category term="生活" /><category term="crypto" /><category term="stepn" /><summary type="html"><![CDATA[買了跑鞋開始跑步的大家可能會有些疑問，我應該升級我的跑鞋嗎？升級了之後， 點數要加到哪裡呢？今天這篇文章將分享我實測下來的結果，升級並提升效率值後， 但每次跑步GST的產出有多少的影響！]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://storage.googleapis.com/homuchen.com/images/stepn-income-01.jpg" /><media:content medium="image" url="https://storage.googleapis.com/homuchen.com/images/stepn-income-01.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">STEPN: 從2022-04-10進場至今的收益紀錄</title><link href="https://homuchen.com/posts/stepn-record-everyday-income/" rel="alternate" type="text/html" title="STEPN: 從2022-04-10進場至今的收益紀錄" /><published>2022-04-21T13:25:00+08:00</published><updated>2022-05-11T20:45:00+08:00</updated><id>https://homuchen.com/posts/stepn-record-everyday-income</id><content type="html" xml:base="https://homuchen.com/posts/stepn-record-everyday-income/"><![CDATA[<p>真的可以賺到錢嗎？每天可以賺錢的速度有多快，幾天才可以回本呢？
對於還在猶豫不決、思考著到底要不要進場的玩家們，這些大概就是最重要的問題吧！</p>

<p>這篇文章紀錄了我從2022-04-10進場，花了多少錢買鞋子，
以及後續每天的產出，希望能幫助還在觀望的玩家對實際情形有近一步的了解～</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/stepn-income-01.jpg" alt="STEPN" /></p>

<h1 id="投入金額-410">投入金額 (4/10)</h1>
<p>在4/10以10.1SOL購入第一雙runner的鞋子，當時1SOL = 110USD，而1USD = 28.9 NTD，
所以投入的金額為<strong>32108 NTD</strong>。</p>

<h1 id="每天產出持續更新">每天產出(持續更新)</h1>
<p>下圖是<strong>Runner</strong>的鞋，跑<strong>五分速(12km/hr)</strong>每天的收益(已扣掉每天維修費)。</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/stepn-income-02.jpg" alt="收益圖表" /></p>

<h2 id="2022-04-16">2022-04-16</h2>
<p>以12.5SOL購入第二雙LV0鞋，開始做效率測試。</p>

<h2 id="2022-04-23">2022-04-23</h2>
<p>點了4點點數到resilience，鞋子損耗從八點變為六點。</p>

<h2 id="2022-04-24">2022-04-24</h2>
<p>購入第三雙鞋，達到每天4點能量可以跑20分鐘，後面的時間無法維持五分速，以致收入沒到兩倍😂</p>

<h2 id="原始資料">原始資料</h2>

<table>
  <thead>
    <tr>
      <th>日期</th>
      <th>消耗能量</th>
      <th>效率</th>
      <th>收入</th>
      <th>維修支出</th>
      <th>淨收入(GST)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2022-04-11</td>
      <td>2.2</td>
      <td>25.3</td>
      <td>8.46</td>
      <td>3.24</td>
      <td>5.22</td>
    </tr>
    <tr>
      <td>2022-04-12</td>
      <td>1.8</td>
      <td>25.3</td>
      <td>8.96</td>
      <td>2.88</td>
      <td>6.08</td>
    </tr>
    <tr>
      <td>2022-04-13</td>
      <td>2.0</td>
      <td>25.3</td>
      <td>9.69</td>
      <td>2.88</td>
      <td>6.81</td>
    </tr>
    <tr>
      <td>2022-04-14</td>
      <td>2.0</td>
      <td>25.3</td>
      <td>9.74</td>
      <td>2.88</td>
      <td>6.86</td>
    </tr>
    <tr>
      <td>2022-04-15</td>
      <td>2.0</td>
      <td>25.3</td>
      <td>9.48</td>
      <td>2.88</td>
      <td>6.60</td>
    </tr>
    <tr>
      <td>2022-04-16</td>
      <td>2.0</td>
      <td>9.7</td>
      <td>5.81</td>
      <td>2.72</td>
      <td>2.93</td>
    </tr>
    <tr>
      <td>2022-04-17</td>
      <td>2.0</td>
      <td>14.7</td>
      <td>8.08</td>
      <td>2.88</td>
      <td>5.20</td>
    </tr>
    <tr>
      <td>2022-04-18</td>
      <td>2.0</td>
      <td>19.7</td>
      <td>8.62</td>
      <td>2.88</td>
      <td>5.74</td>
    </tr>
    <tr>
      <td>2022-04-19</td>
      <td>2.0</td>
      <td>24.7</td>
      <td>9.26</td>
      <td>2.88</td>
      <td>6.38</td>
    </tr>
    <tr>
      <td>2022-04-20</td>
      <td>2.0</td>
      <td>27.7</td>
      <td>10.4</td>
      <td>2.88</td>
      <td>7.52</td>
    </tr>
    <tr>
      <td>2022-04-23</td>
      <td>2.0</td>
      <td>35.7</td>
      <td>11.83</td>
      <td>2.40</td>
      <td>9.43</td>
    </tr>
    <tr>
      <td>2022-04-24</td>
      <td>4.0</td>
      <td>35.7</td>
      <td>22.66</td>
      <td>4.92</td>
      <td>17.74</td>
    </tr>
    <tr>
      <td>2022-04-25</td>
      <td>4.0</td>
      <td>39.7</td>
      <td>24.46</td>
      <td>4.92</td>
      <td>19.54</td>
    </tr>
    <tr>
      <td>2022-04-26</td>
      <td>4.0</td>
      <td>39.7</td>
      <td>24.34</td>
      <td>4.92</td>
      <td>19.42</td>
    </tr>
    <tr>
      <td>2022-04-27</td>
      <td>4.0</td>
      <td>39.7</td>
      <td>23.63</td>
      <td>4.92</td>
      <td>18.71</td>
    </tr>
    <tr>
      <td>2022-04-28</td>
      <td>4.0</td>
      <td>39.7</td>
      <td>24.01</td>
      <td>4.92</td>
      <td>19.09</td>
    </tr>
    <tr>
      <td>2022-04-29</td>
      <td>4.0</td>
      <td>39.7</td>
      <td>24.78</td>
      <td>4.92</td>
      <td>19.86</td>
    </tr>
    <tr>
      <td>2022-04-30</td>
      <td>3.0</td>
      <td>39.7</td>
      <td>17.76</td>
      <td>3.69</td>
      <td>14.07</td>
    </tr>
    <tr>
      <td>2022-05-01</td>
      <td>4.0</td>
      <td>39.7</td>
      <td>24.14</td>
      <td>4.92</td>
      <td>19.22</td>
    </tr>
    <tr>
      <td>2022-05-02</td>
      <td>3.0</td>
      <td>39.7</td>
      <td>17.02</td>
      <td>3.69</td>
      <td>13.33</td>
    </tr>
    <tr>
      <td>2022-05-03</td>
      <td>4.0</td>
      <td>39.7</td>
      <td>24.52</td>
      <td>4.92</td>
      <td>19.60</td>
    </tr>
    <tr>
      <td>2022-05-04</td>
      <td>4.0</td>
      <td>39.7</td>
      <td>23.93</td>
      <td>4.92</td>
      <td>19.01</td>
    </tr>
    <tr>
      <td>2022-05-05</td>
      <td>4.0</td>
      <td>39.7</td>
      <td>23.75</td>
      <td>4.92</td>
      <td>18.83</td>
    </tr>
    <tr>
      <td>2022-05-06</td>
      <td>4.0</td>
      <td>39.7</td>
      <td>23.81</td>
      <td>4.92</td>
      <td>18.89</td>
    </tr>
    <tr>
      <td>2022-05-07</td>
      <td>4.0</td>
      <td>39.7</td>
      <td>24.86</td>
      <td>4.92</td>
      <td>19.94</td>
    </tr>
    <tr>
      <td>2022-05-08</td>
      <td>4.0</td>
      <td>39.7</td>
      <td>25.14</td>
      <td>4.92</td>
      <td>20.22</td>
    </tr>
    <tr>
      <td>2022-05-09</td>
      <td>4.0</td>
      <td>39.7</td>
      <td>23.95</td>
      <td>4.92</td>
      <td>19.03</td>
    </tr>
    <tr>
      <td>2022-05-10</td>
      <td>4.0</td>
      <td>39.7</td>
      <td>23.42</td>
      <td>4.92</td>
      <td>18.50</td>
    </tr>
    <tr>
      <td>2022-05-11</td>
      <td>2.0</td>
      <td>39.7</td>
      <td>11.60</td>
      <td>2.46</td>
      <td>9.14</td>
    </tr>
  </tbody>
</table>

<h1 id="總結">總結</h1>
<p>可以預期在27.7的效率值(LV5的鞋)下，每天可以有<strong>7.5GST</strong>的進帳，以1GST = 130NTD來算的話，
一天有975塊台幣，所以<strong>33天</strong>就可以回本啦～</p>

<p>33天的回本的前提是，效率27.7、LV5的鞋子(runner)，以12km/hr的速度跑(之後再來做跑步速度對賺錢速率的影響的實測)，
LV5的鞋可以直接從市場購買，或是自己從LV0開始升上去，但升到LV5需要花費20GST，而且買LV0的鞋通常又比較貴！</p>

<p>什麼？！LV0比LV5還要貴！這是為什麼呢？想知道該如何選鞋進場的跑友們，可以參考我之前的一篇文章:</p>

<ul>
  <li><a href="/posts/stepn-how-to-choose-shoes-to-start/" target="_blank"><strong>STEPN攻略: 想進場跑步該如何挑選鞋子？</strong></a></li>
</ul>

<p>不只想升到LV5，想繼續往上升級的，可以參考我另一篇寫關於鞋子效率值對賺錢速度的實測:</p>

<ul>
  <li><a href="/posts/stepn-efficiency-vs-gst-outcome-test/" target="_blank"><strong>STEPN實測: 效率對產出的影響？我應該要升級我的跑鞋嗎？</strong></a></li>
</ul>]]></content><author><name>HoMuChen</name></author><category term="生活" /><category term="crypto" /><category term="stepn" /><summary type="html"><![CDATA[真的可以賺到錢嗎？每天可以賺錢的速度有多快，幾天才可以回本呢？ 對於還在猶豫不決、思考著到底要不要進場的玩家們，這些大概就是最重要的問題吧！]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://storage.googleapis.com/homuchen.com/images/stepn-income-01.jpg" /><media:content medium="image" url="https://storage.googleapis.com/homuchen.com/images/stepn-income-01.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">STEPN攻略: 想進場跑步該如何挑選鞋子？</title><link href="https://homuchen.com/posts/stepn-how-to-choose-shoes-to-start/" rel="alternate" type="text/html" title="STEPN攻略: 想進場跑步該如何挑選鞋子？" /><published>2022-04-17T15:49:00+08:00</published><updated>2022-04-17T15:49:00+08:00</updated><id>https://homuchen.com/posts/stepn-how-to-choose-shoes-to-start</id><content type="html" xml:base="https://homuchen.com/posts/stepn-how-to-choose-shoes-to-start/"><![CDATA[<p>在考慮進場<strong>STEPN</strong>邊跑邊賺嗎？對於想買鞋嘗試玩玩看的玩家，
買鞋時有哪些點是需要考量及注意的呢？將在這篇文章一一介紹。</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/stepn-shoes-0.jpg" alt="STEPN shoes price" /></p>

<p>可以看到上圖，在撰寫這篇文章時(2022-04-16)，
最便宜的鞋在市場上的價格已經來到約12SOL，折合美金約為1224USD，台幣為35655NTD。</p>

<h1 id="認識鞋子">認識鞋子</h1>
<p>首先我們先要認識鞋子，好知道哪些因素會影響價格，就算有時有些因素不太影響價格，
卻會影響到之後跑步賺錢的效率！</p>

<p>鞋子有分品質(Quality)，分別為Common、Uncommon、Rare、Epic、Legendary，
今天只就Common的鞋討論，因為最便宜的鞋只會是這種😂</p>

<h2 id="鞋子基礎數值">鞋子基礎數值</h2>
<p>每雙鞋子都會有四種基礎素質，
分別為<strong>Efficiency</strong>、<strong>Luck</strong>、<strong>Comfort</strong>、<strong>Resilience</strong>，這些數值目前看起來對價格是沒有影響的，
一般的鞋子(Common)的這四種素質都會是<strong>1-10</strong>的隨機分佈，
所以一樣的錢買到4個素質都是10的就是最好了啦～</p>

<p>而以跑步賺錢效率來說，最直接影響的數值就是Efficiency及Resilience，
Efficiency越高跑步時產生的GST越多，而Resilience越高，會讓鞋子不容易壞，需要維修的費用較少！</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/stepn-shoes-2.jpg" alt="STEPN shoes fundementals" /></p>

<p>上圖可以看到，左邊的鞋的素質就比右邊的要好上許多。</p>

<p>至於素質的影響有多大，
可以看這一篇<a href="/posts/stepn-efficiency-vs-gst-outcome-test/" target="_blank"><strong>STEPN實測: 效率對產出的影響？我應該要升級我的跑鞋嗎？</strong></a></p>

<h2 id="鞋子等級">鞋子等級</h2>

<h3 id="升等花費">升等花費</h3>
<p>鞋子可以升等，隨著等級的增加，所需要花費的GST及時間都會隨著增加，
最高可以升到30等，以下先簡單列出1-10等升級所需的花費。</p>

<table>
  <thead>
    <tr>
      <th>等級</th>
      <th>花費GST</th>
      <th>累積花費GST</th>
      <th>花費時間(小時)</th>
      <th>累積花費時間</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>2</td>
      <td>2</td>
      <td>3</td>
      <td>2</td>
      <td>3</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>3</td>
      <td>3</td>
      <td>6</td>
      <td>3</td>
      <td>6</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>4</td>
      <td>4</td>
      <td>10</td>
      <td>4</td>
      <td>10</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>5</td>
      <td>10</td>
      <td>20</td>
      <td>5</td>
      <td>15</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>6</td>
      <td>6</td>
      <td>26</td>
      <td>6</td>
      <td>21</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>7</td>
      <td>7</td>
      <td>33</td>
      <td>7</td>
      <td>28</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>8</td>
      <td>8</td>
      <td>41</td>
      <td>8</td>
      <td>36</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>9</td>
      <td>9</td>
      <td>50</td>
      <td>9</td>
      <td>45</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>10</td>
      <td>30</td>
      <td>80</td>
      <td>10</td>
      <td>55</td>
    </tr>
  </tbody>
</table>

<h3 id="升等可以幹嘛呢">升等可以幹嘛呢？</h3>
<p>Common的鞋子每升一級可以有4點的點數讓你分配到上述的基礎數值上，
至於該不該要花GST來升級鞋子以提升之後每天的產出效率，
一樣可以看這篇<a href="/posts/stepn-efficiency-vs-gst-outcome-test/" target="_blank"><strong>STEPN實測: 效率對產出的影響？我應該要升級我的跑鞋嗎？</strong></a></p>

<p>另外升級還會開通一些功能，升到5級的鞋子才可以開啟鑄造(mint)的功能，10級就可以出租(目前尚未開放)，</p>

<p>可以看到市場上的鞋子幾乎不是Lv0就是Lv5，這就是因為5等才可以鑄造的原因，
而鑄造次數就是影響鞋子價格最主要的因素。</p>

<h2 id="鑄造mint次數">鑄造(mint)次數</h2>
<p>兩雙5級以上的鞋子再加上一些花費，就可以鑄造出一雙新的鞋子，而每一雙鞋子<strong>最多只能鑄造7次</strong>。</p>

<table>
  <thead>
    <tr>
      <th>鞋子等級</th>
      <th>鑄造所需花費GST</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>100</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>2</td>
      <td>100</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>3</td>
      <td>150</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>4</td>
      <td>200</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>5</td>
      <td>250</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>6</td>
      <td>300</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>7</td>
      <td>350</td>
    </tr>
  </tbody>
</table>

<p>舉個例子:</p>
<ul>
  <li>兩雙鑄造次數皆為0的鞋，需花費200GST來鑄造出一雙新鞋</li>
  <li>一雙鑄造次數為2，另一雙為0的話，就需要花費100 + 150 = 250GST</li>
</ul>

<p>所以這也就是為什麼LV5的鞋子還比較便宜的原因，因為他們已經被鑄造過兩次了，
而第三次的鑄造會比前兩次要多花50GST。</p>

<h1 id="結論">結論</h1>
<p>買一雙Lv5，鑄造次數已經2次的鞋，且Efficiency及Resilience數值好的鞋，
是殖利率最高，最快回本的方法(大約30-40天)，鞋子本身比較便宜之後，
又幫你免費升級了5次(省了20GST)，讓你跑步時可以賺到更多GST。</p>

<p>但如果你想要玩鑄造，持續投入所賺到的GST時，期待鞋子漲價，賣鞋獲利的話，
就要小心不要買到鑄造次數已經是2次或甚至是3次的鞋子啦～</p>

<p>就像買股票有人是為了賺價差，有人賺股息，根據你的目的及風險偏好，來決定你的投資策略囉～</p>

<h1 id="參考資料">參考資料</h1>
<ul>
  <li><a href="https://whitepaper.stepn.com/game-fi-elements/shoe-minting" target="_blank">STEPN白皮書: 鞋子鑄造</a></li>
  <li><a href="https://stepn-simulator.xyz/mint/eng/" target="_blank">鞋子鑄造計算機</a></li>
</ul>]]></content><author><name>HoMuChen</name></author><category term="生活" /><category term="crypto" /><category term="stepn" /><summary type="html"><![CDATA[在考慮進場STEPN邊跑邊賺嗎？對於想買鞋嘗試玩玩看的玩家， 買鞋時有哪些點是需要考量及注意的呢？將在這篇文章一一介紹。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://storage.googleapis.com/homuchen.com/images/stepn-income-01.jpg" /><media:content medium="image" url="https://storage.googleapis.com/homuchen.com/images/stepn-income-01.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">REST API Design: Pagination</title><link href="https://homuchen.com/posts/restful-api-pagination/" rel="alternate" type="text/html" title="REST API Design: Pagination" /><published>2022-04-14T22:35:00+08:00</published><updated>2022-04-14T22:35:00+08:00</updated><id>https://homuchen.com/posts/restful-api-pagination</id><content type="html" xml:base="https://homuchen.com/posts/restful-api-pagination/"><![CDATA[<h1 id="為何要pagination">為何要Pagination</h1>
<p>一個response如果資料太多，回應太慢，一定會造成使用者的體驗不佳，進而流失用戶，
而pagination就是使reponse回應速度的加快的做法之一。</p>

<p>比如說你在用instagram，在探索頁面中一眼看到的貼文可能只有10幾篇，
此時你就不需要一次抓回來30篇甚至是更多的貼文資料，藉此來減少用戶等待的時間，
只有當用戶繼續將螢幕往下滾時，再抓取下一個10幾篇的資料就好。</p>

<p>以下來看看兩種Pagination的做法，<code class="language-plaintext highlighter-rouge">offset</code>及<code class="language-plaintext highlighter-rouge">keyset</code>:</p>

<h1 id="offset-pagination">Offset Pagination</h1>
<p>最基本的做法就是使用<code class="language-plaintext highlighter-rouge">offset</code>及<code class="language-plaintext highlighter-rouge">limit</code>，一樣的概念在<code class="language-plaintext highlighter-rouge">SQL</code>語法中也可以看到:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">items</span> <span class="k">LIMIT</span> <span class="mi">20</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>而在HTTP API裡，則會像是這樣</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>curl http://api.exmaple.com/items?offset<span class="o">=</span>0&amp;limit<span class="o">=</span>10
</pre></td></tr></tbody></table></code></pre></div></div>

<p>也有一些服務會使用其他的名字，例如<code class="language-plaintext highlighter-rouge">Elasticsearch</code>用的<code class="language-plaintext highlighter-rouge">from</code>及<code class="language-plaintext highlighter-rouge">size</code>，都是代表一樣的意思，
從第幾則資料開始(offset、from)算，總共抓取幾則資料(limit、size)。</p>

<p><img src="https://storage.googleapis.com/homuchen.com/images/pagination-1.jpg" alt="offset pagination" /></p>

<h2 id="offset-pagination可能的問題">offset pagination可能的問題</h2>
<ul>
  <li>
    <p>當offset很大時，比如說offset=1000000，API server必須scan一百萬的資料，效能不彰。</p>
  </li>
  <li>
    <p>再來就是當你的資料持續再增加時，可能會造成一些混亂，以下面的例子為例:</p>

    <ol>
      <li><code class="language-plaintext highlighter-rouge">GET /items?offset=0&amp;limit=10</code></li>
      <li>增加了5筆資料</li>
      <li>再一次<code class="language-plaintext highlighter-rouge">GET /items?offset=0&amp;limit=10</code>，結果其中5筆是第一次query裡已經有出現的了</li>
    </ol>
  </li>
</ul>

<h1 id="keyset-pagination">Keyset Pagination</h1>
<p>不是使用offset，而是使用某個key作為指定的起始點，比如說<code class="language-plaintext highlighter-rouge">created_at</code>，HTTP request看起來可能像是這樣</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>curl http://api.exmaple.com/items?limit<span class="o">=</span>10&amp;created_at:lte:2022-04-10T00:00:00
</pre></td></tr></tbody></table></code></pre></div></div>

<p>只抓取創建時間比2022-04-10T00:00:00還要早的資料，想翻頁時，
就將created_at:lte的時間指定為上一次回傳的最後一筆資料的created_at就好了，如此一來，
就不會有後來新增的資料跑進來的問題了。</p>

<p>而且通常所使用的key在資料庫中會建立索引，也可以避免上述使用offset造成的large database scan的問題。</p>

<hr />

<p>這是RESTful API一系列文章中的一篇，想了解更多關於RESTful API及HTTP的，可以看這篇目錄:</p>

<p><a href="/posts/http-restful-api-design-practical-guide/" target="_blank"><strong>RESTful API Design — A practical guide</strong></a></p>

<p>感謝您的閱讀~期待下次見！</p>]]></content><author><name>HoMuChen</name></author><category term="Web Development" /><category term="api" /><category term="http" /><category term="restful api" /><summary type="html"><![CDATA[什麼是Pagination？為何要使用，以及在HTTP API設計中該如何實作呢？]]></summary></entry><entry><title type="html">如何開始開發你的API: API first principle and OpenAPI</title><link href="https://homuchen.com/posts/api-first-principle-openapi/" rel="alternate" type="text/html" title="如何開始開發你的API: API first principle and OpenAPI" /><published>2022-04-09T12:50:00+08:00</published><updated>2022-04-09T12:50:00+08:00</updated><id>https://homuchen.com/posts/api-first-principle-openapi</id><content type="html" xml:base="https://homuchen.com/posts/api-first-principle-openapi/"><![CDATA[<h1 id="api-first">API first</h1>
<p>在一頭熱開始寫code實作你的API service之前，應該首先要關注API中的<strong>I</strong>字，也就是<strong>interface</strong>，
interface是作為服務提供者及服務使用者溝通的介面，為什麼要首先定義好interface呢？有幾下幾個好處:</p>

<h2 id="更早得到回饋">更早得到回饋</h2>
<p>為什麼要寫API，總是因為有人要用嘛～有人希望我們提供某些服務，而API就是使用這些服務的入口及介面，
如果我們可以在開工之前，就先把介面設計定義好，並交給客戶，如此一來，
客戶們就可以先看看我們所提供的介面好不好用，有沒有任何的問題，想要的功能有沒有齊全，
如果有需要修改或增減的地方，就能儘早地得到回饋！在真正投入心血開發之前，導正方向～</p>

<h2 id="更穩定">更穩定</h2>
<p>由於上述的原因，我們的介面就會更穩定，更少需要變動，整個系統以更容易去維護。
介面的變動往往牽涉到多方人員，越多人依賴這個介面，一旦要改動就麻煩了，所牽涉的層面就越廣。</p>

<p>但也並不是說介面就一定不會變，在整個產品的生命週期中，一定會經歷持續改善的過程，可能要加新功能，
，或是發現有更好用的介面，只是在我們應該盡最大的努力來維持介面的穩定。</p>

<h2 id="併行開發">併行開發</h2>
<p>最後，一旦<strong>介面</strong>定義好了之後，服務提供者及使用者就可以同時針對這個介面來進行工作了，
當兩邊都完成各自的工作後，就可以接起來看看有沒有成功，
如此一來就可以避免掉使用者苦苦等著提供者完成的窘境。</p>

<p>那在完成實作之前，該要先如何描述這個介面呢？這個描述的方法或語言應該要是一個標準，
如此一來，各方單位才能看得懂，而這個標準就是<strong>OpenAPI</strong>。</p>

<h1 id="openapi">OpenAPI</h1>
<p>OpenAPI是一個描述RESTful API的標準，藉由寫下OpenAPI的spec檔案，
可以讓不管是電腦或是人類的使用者知道，你的API可以做到哪些事，提供了什麼功能及怎麼使用，
而不需要再去看source code，或者是真的打打看你的API service來得知！</p>

<p>這裡就不詳細說明OpenAPI該怎麼使用了，想了解的去官網查詢～</p>

<ul>
  <li><a href="https://swagger.io/specification/" target="_blank"><strong>OpenAPI Specification</strong></a></li>
</ul>

<p>這是RESTful API一系列文章中的一篇，想了解更多關於RESTful API及HTTP的，可以看這篇目錄:</p>

<ul>
  <li><a href="/posts/http-restful-api-design-practical-guide/" target="_blank"><strong>RESTful API Design — A practical guide</strong></a></li>
</ul>]]></content><author><name>HoMuChen</name></author><category term="Web Development" /><category term="api" /><category term="http" /><category term="restful api" /><category term="openapi" /><summary type="html"><![CDATA[開發API應該要使用怎樣的流程，先定義好介面有哪些好處，以及可以使用哪些工具呢？(OpenAPI 3.0)]]></summary></entry></feed>